<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>是五月呀！</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://damon4u.github.io/"/>
  <updated>2018-10-30T15:33:27.101Z</updated>
  <id>https://damon4u.github.io/</id>
  
  <author>
    <name>五月y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA插件开发（十一）mybatis插件之Xml校验</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8BXml%E6%A0%A1%E9%AA%8C.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（十一）mybatis插件之Xml校验.html</id>
    <published>2018-10-26T10:41:50.000Z</published>
    <updated>2018-10-30T15:33:27.101Z</updated>
    
    <content type="html"><![CDATA[<p>今天要实现的功能是，检查xml中的增删改查有没有对应的DAO层方法，如果没有，则报错。</p><p>IDEA插件中是通过 <strong>Inspection</strong> 来实现这个功能。</p><p>对XML的检查，IDEA提供了一个<code>BasicDomElementsInspection</code>来做基本检查，我们需要做的就是做好DOM解析工作，对关键属性添加<code>converter</code>。最后注册到<code>plugin.xml</code>即可。</p><a id="more"></a><p>为了让<code>BasicDomElementsInspection</code>帮我们做Dom元素检查，我们首先需要为属性添加约束条件。<br>例如，我们想让增删改查对应这DAO层方法，那我们就可以为他们的id属性添加一个<code>ResolvingConverter</code>:</p><p>先添加一个适配器，提供默认实现方法，具体减少实现类的无用代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ConverterAdaptor</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ResolvingConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Collection&lt;? extends T&gt; getVariants(ConvertContext context) &#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">fromString</span><span class="params">(@Nullable String s, ConvertContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">(@Nullable T t, ConvertContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后就创建一个DAO层方法绑定的实现，重写<code>fromString()</code>方法，根据命名空间和id（即方法名称）查询对应的DAO方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoMethodConverter</span> <span class="keyword">extends</span> <span class="title">ConverterAdaptor</span>&lt;<span class="title">PsiMethod</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PsiMethod <span class="title">fromString</span><span class="params">(@Nullable @NonNls String id, ConvertContext context)</span> </span>&#123;</div><div class="line">        Mapper mapper = MapperUtils.getMapper(context.getInvocationElement());</div><div class="line">        <span class="keyword">return</span> JavaUtils.findMethod(context.getProject(), MapperUtils.getNamespace(mapper), id).orElse(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后绑定到增删改查都实现的接口上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DMLAndDQLDynamicQueryableDomElement</span> <span class="keyword">extends</span> <span class="title">DynamicQueryableDomElement</span>, <span class="title">IdDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 重写id属性，提供转换器，增删改查会实现这个接口，用来对应Dao层方法</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"id"</span>)</div><div class="line">    <span class="meta">@Convert</span>(DaoMethodConverter.class)</div><div class="line">    <span class="function">GenericAttributeValue&lt;String&gt; <span class="title">getId</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"parameterType"</span>)</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> converter</span></div><div class="line">    <span class="function">GenericAttributeValue&lt;PsiClass&gt; <span class="title">getParameterType</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后，我们实现一个<code>BasicDomElementsInspection</code>即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 检查mapper文件中的语句有没有对应的dao层方法</span></div><div class="line"><span class="comment"> * 继承自BasicDomElementsInspection，依赖于DOM解析过程中的规则，</span></div><div class="line"><span class="comment"> * 需要为ParameteredDynamicQueryableDomElement中的id添加DaoMethodConverter，绑定对应关系</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 2018-10-25 21:49</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperXmlInspection</span> <span class="keyword">extends</span> <span class="title">BasicDomElementsInspection</span>&lt;<span class="title">DomElement</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapperXmlInspection</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(DomElement.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkDomElement</span><span class="params">(DomElement element, DomElementAnnotationHolder holder, DomHighlightingHelper helper)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.checkDomElement(element, holder, helper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注册到<code>plugin.xml</code>中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">localInspection</span> <span class="attr">language</span>=<span class="string">"XML"</span> <span class="attr">shortName</span>=<span class="string">"MybatisMapperXmlInspection"</span> <span class="attr">enabledByDefault</span>=<span class="string">"true"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span></span></div><div class="line"><span class="tag">                 <span class="attr">displayName</span>=<span class="string">"Mapper xml inspection"</span></span></div><div class="line"><span class="tag">                 <span class="attr">groupName</span>=<span class="string">"Mybatis"</span></span></div><div class="line"><span class="tag">                 <span class="attr">implementationClass</span>=<span class="string">"com.damon4u.plugin.mybatis.inspection.MapperXmlInspection"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>还有一点小完善，就是为这个inspection创建说明文档，这个文档在settings对话框中展示。如果没有提供这样的说明文档，IDEA会给提示。<br>在<code>/resources/inspectionDescriptions</code>下创建<code>MybatisMapperXmlInspection.html</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>There should be a method in DAO interface with the same name of Mybatis XML tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a method according to the XML tag id or just remove the tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>实现的效果：<br>检测到没有DAO层方法：</p><p><img src="/images/idea-plugin18.png" alt=""></p><p>打开setting提示：<br><img src="/images/idea-plugin19.png" alt=""></p><p>参考：<br><a href="https://www.jetbrains.org/intellij/sdk/docs/tutorials/code_inspections.html" target="_blank" rel="external">Code Inspections</a><br><a href="https://www.jetbrains.com/help/idea/code-inspection.html" target="_blank" rel="external">Code Inspection</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天要实现的功能是，检查xml中的增删改查有没有对应的DAO层方法，如果没有，则报错。&lt;/p&gt;
&lt;p&gt;IDEA插件中是通过 &lt;strong&gt;Inspection&lt;/strong&gt; 来实现这个功能。&lt;/p&gt;
&lt;p&gt;对XML的检查，IDEA提供了一个&lt;code&gt;BasicDomElementsInspection&lt;/code&gt;来做基本检查，我们需要做的就是做好DOM解析工作，对关键属性添加&lt;code&gt;converter&lt;/code&gt;。最后注册到&lt;code&gt;plugin.xml&lt;/code&gt;即可。&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（十）mybatis插件之DAO与XML之间跳转</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E5%8D%81%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8BDAO%E4%B8%8EXML%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（十）mybatis插件之DAO与XML之间的跳转.html</id>
    <published>2018-10-26T09:41:50.000Z</published>
    <updated>2018-10-30T15:33:27.102Z</updated>
    
    <content type="html"><![CDATA[<p>使用Mybatis进行开发时，还有一个常用场景是从DAO层方法跳转到XML标签，或者反过来从XML标签跳转到DAO层方法。<br>可以使用<code>lineMarkerProvider</code>来实现该功能。</p><blockquote><p>Line markers help to annotate any code with icons on the gutter. These icons may provide navigation to related code.</p></blockquote><a id="more"></a><h3 id="DAO层方法跳转到对应XML标签"><a href="#DAO层方法跳转到对应XML标签" class="headerlink" title="DAO层方法跳转到对应XML标签"></a>DAO层方法跳转到对应XML标签</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoToXmlLineMarkerProvider</span> <span class="keyword">extends</span> <span class="title">RelatedItemLineMarkerProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Function&lt;DomElement, XmlTag&gt; FUNCTION = DomElement::getXmlTag;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">collectNavigationMarkers</span><span class="params">(@NotNull PsiElement element, @NotNull Collection&lt;? <span class="keyword">super</span> RelatedItemLineMarkerInfo&gt; result)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (element <span class="keyword">instanceof</span> PsiNameIdentifierOwner &amp;&amp; JavaUtils.isElementWithinInterface(element)) &#123;</div><div class="line">            CommonProcessors.CollectProcessor&lt;IdDomElement&gt; processor = <span class="keyword">new</span> CommonProcessors.CollectProcessor&lt;&gt;();</div><div class="line">            JavaService.getInstance(element.getProject()).process(element, processor);</div><div class="line">            Collection&lt;IdDomElement&gt; results = processor.getResults();</div><div class="line">            <span class="keyword">if</span> (!results.isEmpty()) &#123;</div><div class="line">                NavigationGutterIconBuilder&lt;PsiElement&gt; builder = NavigationGutterIconBuilder.create(Icons.DAO_TO_XML_LINE_MARKER_ICON)</div><div class="line">                        .setAlignment(GutterIconRenderer.Alignment.CENTER)</div><div class="line">                        .setTargets(Collections2.transform(results, FUNCTION))</div><div class="line">                        .setTooltipTitle(<span class="string">"Navigation to target in mapper xml"</span>);</div><div class="line">                PsiElement nameIdentifier = ((PsiNameIdentifierOwner) element).getNameIdentifier();</div><div class="line">                <span class="keyword">if</span> (nameIdentifier != <span class="keyword">null</span>) &#123;</div><div class="line">                    result.add(builder.createLineMarkerInfo(nameIdentifier));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同样先过滤出DAO层接口，可能是接口本身，也可能是接口中的方法。<br>根据接口或者方法<code>PsiElement</code>寻找对应<code>IdDomElement</code>的逻辑在<code>JavaService#process()</code>方法中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(@NotNull PsiElement target, @NotNull Processor processor)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> PsiMethod) &#123; <span class="comment">// dao方法</span></div><div class="line">        process((PsiMethod) target, processor);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target <span class="keyword">instanceof</span> PsiClass) &#123; <span class="comment">// dao接口</span></div><div class="line">        process((PsiClass) target, processor);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(@NotNull PsiMethod psiMethod, @NotNull Processor&lt;IdDomElement&gt; processor)</span> </span>&#123;</div><div class="line">    PsiClass psiClass = psiMethod.getContainingClass();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == psiClass) <span class="keyword">return</span>;</div><div class="line">    String id = psiClass.getQualifiedName() + <span class="string">"."</span> + psiMethod.getName();</div><div class="line">    <span class="keyword">for</span> (Mapper mapper : MapperUtils.findMappers(psiMethod.getProject())) &#123; <span class="comment">// 先根据命名空间找mapper</span></div><div class="line">        <span class="keyword">for</span> (IdDomElement idDomElement : mapper.getDaoElements()) &#123;</div><div class="line">            <span class="keyword">if</span> (MapperUtils.getIdSignature(idDomElement).equals(id)) &#123; <span class="comment">// 对比tag的id与方法名</span></div><div class="line">                processor.process(idDomElement);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(@NotNull PsiClass clazz, @NotNull Processor&lt;Mapper&gt; processor)</span> </span>&#123;</div><div class="line">    String ns = clazz.getQualifiedName();</div><div class="line">    <span class="keyword">for</span> (Mapper mapper : MapperUtils.findMappers(clazz.getProject())) &#123;</div><div class="line">        <span class="keyword">if</span> (MapperUtils.getNamespace(mapper).equals(ns)) &#123;</div><div class="line">            processor.process(mapper);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>找到符合的<code>IdDomElement</code>后，构造一个跳转<code>LineMarkerInfo</code>：<br>需要传入图标、布局、跳转目标和提示语。</p><h3 id="XML标签跳转到DAO层方法"><a href="#XML标签跳转到DAO层方法" class="headerlink" title="XML标签跳转到DAO层方法"></a>XML标签跳转到DAO层方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlToDaoLineMarkerProvider</span> <span class="keyword">implements</span> <span class="title">LineMarkerProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ImmutableList&lt;Class&lt;? extends DMLAndDQLDynamicQueryableDomElement&gt;&gt; TARGET_TYPES = ImmutableList.of(</div><div class="line">            Select.class,</div><div class="line">            Update.class,</div><div class="line">            Insert.class,</div><div class="line">            Delete.class</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> LineMarkerInfo <span class="title">getLineMarkerInfo</span><span class="params">(@NotNull PsiElement element)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isTargetElement(element)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        DomElement domElement = DomUtil.getDomElement(element);</div><div class="line">        <span class="keyword">if</span> (domElement == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        Optional&lt;PsiMethod&gt; method = JavaUtils.findMethod(element.getProject(), (IdDomElement) domElement);</div><div class="line">        <span class="keyword">return</span> method.map(psiMethod -&gt; <span class="keyword">new</span> LineMarkerInfo&lt;&gt;((XmlTag) element,</div><div class="line">                element.getTextRange(),</div><div class="line">                Icons.XML_TO_DAO_LINE_MARKER_ICON,</div><div class="line">                Pass.UPDATE_ALL,</div><div class="line">                getTooltipProvider(psiMethod),</div><div class="line">                getNavigationHandler(psiMethod),</div><div class="line">                GutterIconRenderer.Alignment.CENTER)).orElse(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectSlowLineMarkers</span><span class="params">(@NotNull List&lt;PsiElement&gt; elements, @NotNull Collection&lt;LineMarkerInfo&gt; result)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTargetElement</span><span class="params">(@NotNull PsiElement element)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> element <span class="keyword">instanceof</span> XmlTag</div><div class="line">                &amp;&amp; MapperUtils.isElementWithinMybatisFile(element)</div><div class="line">                &amp;&amp; isTargetType(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTargetType</span><span class="params">(PsiElement element)</span> </span>&#123;</div><div class="line">        DomElement domElement = DomUtil.getDomElement(element);</div><div class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz : TARGET_TYPES) &#123;</div><div class="line">            <span class="keyword">if</span> (clazz.isInstance(domElement))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Function&lt;XmlTag, String&gt; <span class="title">getTooltipProvider</span><span class="params">(<span class="keyword">final</span> PsiMethod target)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> from -&gt; getTooltip(target);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> GutterIconNavigationHandler&lt;XmlTag&gt; <span class="title">getNavigationHandler</span><span class="params">(<span class="keyword">final</span> PsiMethod target)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (e, from) -&gt; ((Navigatable) target.getNavigationElement()).navigate(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getTooltip</span><span class="params">(@NotNull PsiMethod target)</span> </span>&#123;</div><div class="line">        PsiClass containingClass = target.getContainingClass();</div><div class="line">        <span class="keyword">if</span> (containingClass == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Data access object not found"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Data access object found - "</span> + containingClass.getQualifiedName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个类继承自最基本的<code>LineMarkerProvider</code>，实现<code>getLineMarkerInfo</code>方法。<br>同样是先过滤，然后构造<code>LineMarkerInfo</code>。</p><p>最后注册到<code>plugin.xml</code>中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 在java类或者方法行添加跳转到mapper的icon --&gt;</div><div class="line">&lt;codeInsight.lineMarkerProvider language=&quot;JAVA&quot;</div><div class="line">                                implementationClass=&quot;com.damon4u.plugin.mybatis.linemarker.DaoToXmlLineMarkerProvider&quot;/&gt;</div><div class="line"></div><div class="line">&lt;!-- 在mapper文件中添加跳转到java类的icon --&gt;</div><div class="line">&lt;codeInsight.lineMarkerProvider language=&quot;XML&quot;</div><div class="line">                                implementationClass=&quot;com.damon4u.plugin.mybatis.linemarker.XmlToDaoLineMarkerProvider&quot;/&gt;</div></pre></td></tr></table></figure></p><p>参考：<br><a href="https://www.jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/line_marker_provider.html" target="_blank" rel="external">Line Marker Provider</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Mybatis进行开发时，还有一个常用场景是从DAO层方法跳转到XML标签，或者反过来从XML标签跳转到DAO层方法。&lt;br&gt;可以使用&lt;code&gt;lineMarkerProvider&lt;/code&gt;来实现该功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Line markers help to annotate any code with icons on the gutter. These icons may provide navigation to related code.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（九）mybatis插件之参数补全</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B9%9D%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%8F%82%E6%95%B0%E8%A1%A5%E5%85%A8.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（九）mybatis插件之参数补全.html</id>
    <published>2018-10-25T09:41:50.000Z</published>
    <updated>2018-10-25T15:20:17.727Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA插件开发时，可以有两种途径提供代码补全：</p><ul><li>实现<code>Reference</code>的<code>getVariants()</code>方法，返回一个数组，类型为<code>String</code>或者<code>PsiElement</code>或者<code>LookupElement</code>。这种方式只支持基本（basic）补全操作。</li><li>继承<code>CompletionContributor</code>，支持basic、smart和class name三种补全方式。</li></ul><p>本文主要介绍继承<code>CompletionContributor</code>的方式。</p><a id="more"></a><p>先说目标。</p><p>还是以之前的mapper文件为例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserName"</span> <span class="attr">resultType</span>=<span class="string">"com.damon4u.demo.domain.User"</span>&gt;</span></div><div class="line">    select id, user_name</div><div class="line">    from user</div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span></div><div class="line">            user_name like CONCAT('%',#&#123;userName&#125;,'%')</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></p><p>我想为sql语句和if条件中的<code>#{userName}</code>添加自动补全。</p><p>首先创建一个<code>CompletionContributor</code>的基本实现类，其中包含公共方法，为元素添加自动补全：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseParamCompletionContributor</span> <span class="keyword">extends</span> <span class="title">CompletionContributor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PRIORITY = <span class="number">400.0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCompletionForPsiParameter</span><span class="params">(@NotNull <span class="keyword">final</span> Project project,</span></span></div><div class="line"><span class="function"><span class="params">                                             @NotNull <span class="keyword">final</span> CompletionResultSet completionResultSet,</span></span></div><div class="line"><span class="function"><span class="params">                                             @Nullable <span class="keyword">final</span> IdDomElement element)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> PsiMethod method = JavaUtils.findMethod(project, element).orElse(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> PsiParameter[] parameters = method.getParameterList().getParameters();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (parameters.length == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">final</span> PsiParameter parameter = parameters[<span class="number">0</span>];</div><div class="line">            completionResultSet.addElement(buildLookupElementWithIcon(parameter.getName(), parameter.getType().getPresentableText()));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (PsiParameter parameter : parameters) &#123;</div><div class="line">                <span class="keyword">final</span> Optional&lt;String&gt; annotationValueText = JavaUtils.getAnnotationValueText(parameter, Annotation.PARAM);</div><div class="line">                completionResultSet.addElement(buildLookupElementWithIcon(annotationValueText.orElseGet(parameter::getName), parameter.getType().getPresentableText()));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> LookupElement <span class="title">buildLookupElementWithIcon</span><span class="params">(<span class="keyword">final</span> String parameterName,</span></span></div><div class="line"><span class="function"><span class="params">                                                            <span class="keyword">final</span> String parameterType)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> PrioritizedLookupElement.withPriority(</div><div class="line">                LookupElementBuilder.create(parameterName)</div><div class="line">                        .withTypeText(parameterType)</div><div class="line">                        .withIcon(PlatformIcons.PARAMETER_ICON),</div><div class="line">                PRIORITY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>该方法的逻辑比较清楚，先查出元素所在方法的参数列表，然后将参数构造成<code>LookupElement</code>返回。<br>构造<code>LookupElement</code>时，需要设置参数名称，参数类型和图标。<br>实现方式与上一篇<a href="https://damon4u.github.io/blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AB%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%8F%82%E6%95%B0%E5%BC%95%E7%94%A8.html">IDEA插件开发（八）mybatis插件之参数引用</a> 类似，不多解释。</p><p>主要看两个具体的实现类。</p><h4 id="重写fillCompletionVariants方法"><a href="#重写fillCompletionVariants方法" class="headerlink" title="重写fillCompletionVariants方法"></a>重写fillCompletionVariants方法</h4><p>第一个，为sql语句中的<code>#{userName}</code>添加自动补全。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlParamCompletionContributor</span> <span class="keyword">extends</span> <span class="title">BaseParamCompletionContributor</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillCompletionVariants</span><span class="params">(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (parameters.getCompletionType() != CompletionType.BASIC) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> PsiElement position = parameters.getPosition();</div><div class="line">        PsiFile topLevelFile = InjectedLanguageManager.getInstance(parameters.getPosition().getProject()).getTopLevelFile(position);</div><div class="line">        <span class="keyword">if</span> (DomUtils.isMybatisFile(topLevelFile)) &#123;</div><div class="line">            <span class="keyword">if</span> (shouldAddElement(position.getContainingFile(), parameters.getOffset())) &#123;</div><div class="line">                process(topLevelFile, result, position);</div><div class="line">            &#125;    </div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">shouldAddElement</span><span class="params">(PsiFile file, <span class="keyword">int</span> offset)</span> </span>&#123;</div><div class="line">        String text = file.getText();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = offset - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">char</span> c = text.charAt(i);</div><div class="line">            <span class="keyword">if</span> (c == <span class="string">'&#123;'</span> &amp;&amp; text.charAt(i - <span class="number">1</span>) == <span class="string">'#'</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(PsiFile xmlFile, CompletionResultSet result, PsiElement position)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> offset = InjectedLanguageManager.getInstance(position.getProject()).injectedToHost(position, position.getTextOffset());</div><div class="line">        Optional&lt;IdDomElement&gt; idDomElement = MapperUtils.findParentIdDomElement(xmlFile.findElementAt(offset));</div><div class="line">        <span class="keyword">if</span> (idDomElement.isPresent()) &#123;</div><div class="line">            addCompletionForPsiParameter(position.getProject(), result, idDomElement.get());</div><div class="line">            result.stopHere();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>为了方便解释，我们先把注册到<code>plugin.xml</code>的代码贴出来：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">completion.contributor</span> <span class="attr">language</span>=<span class="string">"SQL"</span></span></div><div class="line"><span class="tag">                                <span class="attr">implementationClass</span>=<span class="string">"com.damon4u.plugin.mybatis.completion.SqlParamCompletionContributor"</span></span></div><div class="line"><span class="tag">                                <span class="attr">order</span>=<span class="string">"first"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>第一种方式重写<code>fillCompletionVariants</code>方法，首先也是过滤参数。<br>在注册时，我们指定了language为SQL，那么该补全器只会传入SQL语句中参数。<br>然后我们在方法内过滤mybatis的mapper文件中的SQL语句参数。<br>然后判断是否是<code>#{</code>开头，如果是，才补全。</p><h4 id="使用extend方法"><a href="#使用extend方法" class="headerlink" title="使用extend方法"></a>使用extend方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParamCompletionContributor</span> <span class="keyword">extends</span> <span class="title">BaseParamCompletionContributor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestParamCompletionContributor</span><span class="params">()</span> </span>&#123;</div><div class="line">        extend(CompletionType.BASIC,</div><div class="line">                XmlPatterns.psiElement().inside(XmlPatterns.xmlAttribute().withName(<span class="string">"test"</span>)),</div><div class="line">                <span class="keyword">new</span> CompletionProvider&lt;CompletionParameters&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addCompletions</span><span class="params">(@NotNull CompletionParameters parameters,</span></span></div><div class="line"><span class="function"><span class="params">                                                  ProcessingContext context,</span></span></div><div class="line"><span class="function"><span class="params">                                                  @NotNull CompletionResultSet result)</span> </span>&#123;</div><div class="line">                        <span class="keyword">final</span> PsiElement position = parameters.getPosition();</div><div class="line">                        addCompletionForPsiParameter(position.getProject(), result, MapperUtils.findParentIdDomElement(position).orElse(<span class="keyword">null</span>));</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>常用的实现方式是在构造函数中调用<code>extend()</code>方法。<br>第一个参数是补全类型，支持basic，smart和class name。一般选basic就好了。<br>第二个参数是参数匹配模式。本例子中是找到<code>name</code>为<code>test</code>的<code>XmlAttribute</code>内部的元素：<code>XmlPatterns.psiElement().inside(XmlPatterns.xmlAttribute().withName(&quot;test&quot;))</code>。<br>第三个参数是<code>CompletionProvider</code>实例，重写<code>addCompletions</code>方法即可。</p><p>最后注册到<code>plugin.xml</code>中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">completion.contributor</span> <span class="attr">language</span>=<span class="string">"XML"</span></span></div><div class="line"><span class="tag">                                <span class="attr">implementationClass</span>=<span class="string">"com.damon4u.plugin.mybatis.completion.TestParamCompletionContributor"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>参考：<br><a href="https://www.jetbrains.org/intellij/sdk/docs/reference_guide/custom_language_support/code_completion.html" target="_blank" rel="external">Code Completion</a><br><a href="https://www.jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/completion_contributor.html" target="_blank" rel="external">Completion Contributor</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDEA插件开发时，可以有两种途径提供代码补全：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现&lt;code&gt;Reference&lt;/code&gt;的&lt;code&gt;getVariants()&lt;/code&gt;方法，返回一个数组，类型为&lt;code&gt;String&lt;/code&gt;或者&lt;code&gt;PsiElement&lt;/code&gt;或者&lt;code&gt;LookupElement&lt;/code&gt;。这种方式只支持基本（basic）补全操作。&lt;/li&gt;
&lt;li&gt;继承&lt;code&gt;CompletionContributor&lt;/code&gt;，支持basic、smart和class name三种补全方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文主要介绍继承&lt;code&gt;CompletionContributor&lt;/code&gt;的方式。&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（八）mybatis插件之参数引用</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AB%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8B%E5%8F%82%E6%95%B0%E5%BC%95%E7%94%A8.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（八）mybatis插件之参数引用.html</id>
    <published>2018-10-24T09:41:50.000Z</published>
    <updated>2018-10-25T15:07:47.307Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://damon4u.github.io/blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%83%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8Bmapper%E8%A7%A3%E6%9E%90.html">IDEA插件开发（七）mybatis插件之mapper解析</a> 一文中使用到了<code>PropertyConverter</code>来为<code>property</code>属性添加引用，实现鼠标点击跳转，代码补全提示等功能，其中使用了<code>ContextPsiFieldReference</code>，它继承了<code>PsiReferenceBase</code>，实现<code>resolve()</code>方法来返回对应的引用对象。</p><p>今天主要就说说引用（ <strong>PSI References</strong> ），以及如何单独注册引用。</p><blockquote><p>A reference in a PSI tree is an object that represents a link from a usage of a certain element in the code to the corresponding declaration. Resolving a reference means locating the declaration to which a specific usage refers.</p><p>Resolving references gives users the ability to navigate from a PSI element usage (accessing a variable, calling a method and so on) to the declaration of that element (the variable’s definition, a method declaration and so on). This feature is needed in order to support the <code>Go to Declaration</code> action invoked by <strong>Ctrl-B</strong> and <strong>Ctrl-Click</strong>, and it is a prerequisite for implementing the Find Usages action, the Rename refactoring and code completion.</p></blockquote><p>举个例子，也就是我想要实现的效果。<br>Dao层有个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">List&lt;User&gt; <span class="title">findByUserName</span><span class="params">(@Param(<span class="string">"userName"</span>)</span> String userName)</span>;</div></pre></td></tr></table></figure></p><p>然后对应的mapper文件中的查询语句：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserName"</span> <span class="attr">resultType</span>=<span class="string">"com.damon4u.demo.domain.User"</span>&gt;</span></div><div class="line">    select id, user_name</div><div class="line">    from user</div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span></div><div class="line">            user_name like CONCAT('%',#&#123;userName&#125;,'%')</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></p><p>我现在想实现点击<code>#{userName}</code>中的<code>userName</code>能够跳转到Dao层方法的<code>userName</code>参数，即为xml中的参数添加引用。</p><a id="more"></a><p>要实现这样的功能，有两个关键点：</p><ul><li>创建一个<code>PsiReferenceBase</code>引用类，实现<code>resolve()</code>方法，返回值为当前<code>PsiElement</code>需要跳转到的目标<code>PsiElement</code>。</li><li>继承<code>PsiReferenceContributor</code>，实现<code>registerReferenceProviders()</code>方法，将创建的引用类注册（绑定）到一个触发<code>PsiElement</code>上。可以理解为点击哪个元素会触发引用跳转。</li></ul><h3 id="引用绑定注册器PsiReferenceContributor"><a href="#引用绑定注册器PsiReferenceContributor" class="headerlink" title="引用绑定注册器PsiReferenceContributor"></a>引用绑定注册器PsiReferenceContributor</h3><p>按照逻辑，我们需要先找到触发元素，本例中，就是先要从mapper文件中找出<code>#{userName}</code>中的<code>userName</code>，即符合<code>#{paramName}</code>模式的参数名。然后将引用绑定到该元素上。<br>寻找和绑定的逻辑需要放到<code>PsiReferenceContributor</code>中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlParamReferenceContributor</span> <span class="keyword">extends</span> <span class="title">PsiReferenceContributor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 匹配 #&#123;xxx&#125;</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PARAM_PATTERN = Pattern.compile(<span class="string">"#\\&#123;(.*?)&#125;"</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerReferenceProviders</span><span class="params">(@NotNull PsiReferenceRegistrar registrar)</span> </span>&#123;</div><div class="line">        registrar.registerReferenceProvider(PlatformPatterns.psiElement(XmlToken.class),</div><div class="line">                <span class="keyword">new</span> PsiReferenceProvider() &#123;</div><div class="line">                    <span class="meta">@NotNull</span></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> PsiReference[] getReferencesByElement(<span class="meta">@NotNull</span> PsiElement element, <span class="meta">@NotNull</span> ProcessingContext context) &#123;</div><div class="line">                        XmlToken token = (XmlToken) element;</div><div class="line">                        <span class="comment">// XmlToken所在文件需要是mapper</span></div><div class="line">                        <span class="keyword">if</span> (MapperUtils.isElementWithinMybatisFile(token)) &#123;</div><div class="line">                            String text = token.getText();</div><div class="line">                            Matcher matcher = PARAM_PATTERN.matcher(text);</div><div class="line">                            ArrayList&lt;PsiReference&gt; referenceList = Lists.newArrayList();</div><div class="line">                            <span class="comment">// 正则匹配出#&#123;paramName&#125;中的paramName，并为每一个参数添加引用</span></div><div class="line">                            <span class="keyword">while</span> (matcher.find()) &#123;</div><div class="line">                                <span class="comment">// 参数名</span></div><div class="line">                                String param = matcher.group(<span class="number">1</span>);</div><div class="line">                                <span class="comment">// 在XmlToken内容中的开始位置</span></div><div class="line">                                <span class="keyword">int</span> start = matcher.start(<span class="number">1</span>);</div><div class="line">                                <span class="comment">// 在XmlToken内容中的结束位置</span></div><div class="line">                                <span class="keyword">int</span> end = matcher.end(<span class="number">1</span>);</div><div class="line">                                referenceList.add(<span class="keyword">new</span> ParamReference(token, <span class="keyword">new</span> TextRange(start, end), param));</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">return</span> referenceList.toArray(<span class="keyword">new</span> PsiReference[<span class="number">0</span>]);</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">return</span> PsiReference.EMPTY_ARRAY;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>重点在于<code>registerReferenceProvider</code>的两个参数。<br>第一个参数传入<code>PlatformPatterns.psiElement(XmlToken.class)</code>，代表我们要为<code>XmlToken</code>添加引用。<br>为什么说我们要为<code>XmlToken</code>添加引用呢？因为mapper的xml文件中，最基本的元素就是一个<code>XmlToken</code>，<code>user_name</code>是一个，<code>like</code>是一个，<code>CONCAT(&#39;%&#39;,#{userName},&#39;%&#39;)</code>是一个。<br>可以简单的理解为，使用空格分割的元素都是。<br>为了分析IDEA中的元素从属于哪种<code>PsiElement</code>类型，可以给沙箱安装一个插件<code>PsiViewer</code>，然后就可以方便的分析<code>PsiElement</code>类型了：</p><p><img src="/images/idea-plugin17.png" alt=""></p><p>鼠标点击要分析的元素上，右边能清晰的看到元素的属性以及层级关系。</p><p>第二个参数是<code>PsiReferenceProvider</code>实现类，主要实现<code>getReferencesByElement</code>方法，将引用绑定到指定元素上。<br>由于所有xml中的<code>XmlToken</code>都会被放到候选集中，我们需要过滤出想要的元素，必须在mapper文件内。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isElementWithinMybatisFile</span><span class="params">(@NotNull PsiElement element)</span> </span>&#123;</div><div class="line">    PsiFile psiFile = element.getContainingFile();</div><div class="line">    <span class="keyword">return</span> element <span class="keyword">instanceof</span> XmlElement &amp;&amp; DomUtils.isMybatisFile(psiFile);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>DomUtils.isMybatisFile(psiFile);</code>方法比较简单，就是比较根标签是否是<code>mapper</code>。</p><p>之后，使用正则表达式取出符合<code>#{paramName}</code>模式的参数名，以及参数名在<code>XmlToken</code>中的开始位置和结束位置，构造一个TextRange，作为鼠标点击区域。<br>之后构造一个我们自己的引用实例<code>ParamReference</code>，加入到返回列表中，完成绑定。</p><h3 id="引用PsiReferenceBase"><a href="#引用PsiReferenceBase" class="headerlink" title="引用PsiReferenceBase"></a>引用PsiReferenceBase</h3><p>接下来就要下我们自己的<code>PsiReferenceBase</code>了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamReference</span> <span class="keyword">extends</span> <span class="title">PsiReferenceBase</span>&lt;<span class="title">XmlElement</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 参数名称</span></div><div class="line">    <span class="keyword">private</span> String paramName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParamReference</span><span class="params">(@NotNull XmlElement attributeValue, TextRange textRange, @NotNull String paramName)</span> </span>&#123;</div><div class="line">        <span class="comment">// 调用父类构造函数</span></div><div class="line">        <span class="keyword">super</span>(attributeValue, textRange);</div><div class="line">        <span class="keyword">this</span>.paramName = paramName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PsiElement <span class="title">resolve</span><span class="params">()</span> </span>&#123;</div><div class="line">        XmlElement element = getElement();</div><div class="line">        Project project = element.getProject();</div><div class="line">        <span class="comment">// 寻找当前元素的父级IdDomElement，这里应该拿到的是Select，Update等，包含Dao层方法名</span></div><div class="line">        IdDomElement domElement = MapperUtils.findParentIdDomElement(element).orElse(<span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (domElement == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 根据mapper的namespace拿到Dao类，然后根据IdDomElement的id拿到方法名称</span></div><div class="line">        <span class="keyword">final</span> PsiMethod method = JavaUtils.findMethod(project, domElement).orElse(<span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (method == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 取出方法参数</span></div><div class="line">        <span class="keyword">final</span> PsiParameter[] parameters = method.getParameterList().getParameters();</div><div class="line"></div><div class="line">        <span class="comment">// dao层方法参数可能有两种情况</span></div><div class="line">        <span class="comment">// 1、只有一个参数，那么可能这个参数没有用@Param注解标注，那么直接使用参数名称与paramName比较；</span></div><div class="line">        <span class="comment">// 2、方法有多个参数，那么每个参数都应该使用@Param注解标注，用@Param的value值挨个与paramName比较。如果没有标注，那么就认为没找到，不创建引用。</span></div><div class="line">        <span class="keyword">if</span> (parameters.length == <span class="number">1</span>) &#123;</div><div class="line">            PsiParameter parameter = parameters[<span class="number">0</span>];</div><div class="line">            <span class="keyword">if</span> (paramName.equals(parameter.getName())) &#123;</div><div class="line">                <span class="keyword">return</span> parameter;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> PsiParameter parameter : parameters) &#123;</div><div class="line">                <span class="keyword">final</span> Optional&lt;String&gt; value = JavaUtils.getAnnotationValueText(parameter, Annotation.PARAM);</div><div class="line">                <span class="keyword">if</span> (value.isPresent() &amp;&amp; paramName.equals(value.get())) &#123;</div><div class="line">                    <span class="keyword">return</span> parameter;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 这个方法是用来提供代码补全候选的，这里没有实现，后面会用SqlParamCompletionContributor实现补全</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Object[] getVariants() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中设计到<code>JavaUtils</code>中的几个方法，寻找mapper对应的dao层方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;PsiMethod&gt; <span class="title">findMethod</span><span class="params">(@NotNull Project project, @NotNull IdDomElement element)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> findMethod(project, MapperUtils.getNamespace(element), MapperUtils.getId(element));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;PsiMethod&gt; <span class="title">findMethod</span><span class="params">(@NotNull Project project, @Nullable String clazzName, @Nullable String methodName)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (StringUtils.isBlank(clazzName) || StringUtils.isBlank(methodName)) &#123;</div><div class="line">        <span class="keyword">return</span> Optional.empty();</div><div class="line">    &#125;</div><div class="line">    Optional&lt;PsiClass&gt; clazz = findClazz(project, clazzName);</div><div class="line">    <span class="keyword">if</span> (clazz.isPresent()) &#123;</div><div class="line">        PsiMethod[] methods = clazz.get().findMethodsByName(methodName, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> ArrayUtils.isEmpty(methods) ? Optional.empty() : Optional.of(methods[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Optional.empty();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@NotNull</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;PsiClass&gt; <span class="title">findClazz</span><span class="params">(@NotNull Project project, @NotNull String clazzName)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Optional.ofNullable(JavaPsiFacade.getInstance(project).findClass(clazzName, GlobalSearchScope.allScope(project)));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后，将<code>SqlParamReferenceContributor</code>注册到<code>plugin.xml</code>中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">psi.referenceContributor</span> <span class="attr">implementation</span>=<span class="string">"com.damon4u.plugin.mybatis.reference.SqlParamReferenceContributor"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>至此，便完成了对sql语句中<code>#{userName}</code>的引用创建。</p><p>下面再举一个例子，并说说开发时遇到的坑。<br>回到刚才的mapper文件中的查询语句：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserName"</span> <span class="attr">resultType</span>=<span class="string">"com.damon4u.demo.domain.User"</span>&gt;</span></div><div class="line">    select id, user_name</div><div class="line">    from user</div><div class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span></div><div class="line">            user_name like CONCAT('%',#&#123;userName&#125;,'%')</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></p><p>我现在还想为<code>&lt;if test=&quot;userName != null&quot;&gt;</code>中的<code>userName</code>添加引用，同样跳转到Dao层方法参数。</p><h4 id="思路一，完全复用SqlParamReferenceContributor"><a href="#思路一，完全复用SqlParamReferenceContributor" class="headerlink" title="思路一，完全复用SqlParamReferenceContributor"></a>思路一，完全复用SqlParamReferenceContributor</h4><p>使用PsiViewer分析<code>&lt;if test=&quot;userName != null&quot;&gt;</code>也属于<code>XmlToken</code>类型，那理论上<code>SqlParamReferenceContributor</code>也能接收到。<br>但是反复Debug都没有拦截到这个值。后来发现，只有<code>XmlText</code>下的<code>XmlToken</code>才能被拦截到。<br>那可能是<code>PlatformPatterns.psiElement(XmlToken.class)</code>这种创建Patterns的方式有问题，只能拦截<code>XmlText</code>下的<code>XmlToken</code>，不能拦截<code>XmlAttributeValue</code>下的<code>XmlToken</code>。<br>所以这个思路不行。</p><h4 id="思路二，匹配XmlAttribute"><a href="#思路二，匹配XmlAttribute" class="headerlink" title="思路二，匹配XmlAttribute"></a>思路二，匹配XmlAttribute</h4><p>只要能取出所有mapper中的<code>XmlAttribute</code>，然后比较<code>name</code>是否为<code>test</code>，如果是，取出<code>XmlAttributeValue</code>，匹配关键字创建引用即可。<br>开发过程中，发现匹配没问题，但是会把引用绑定到<code>XmlAttribute</code>整体上，<code>test=&quot;userName != null&quot;</code>。<br>其实我们真正想要的是给<code>XmlAttributeValue</code>创建引用，即<code>&quot;userName != null&quot;</code>部分。</p><h4 id="思路三，匹配XmlAttributeValue"><a href="#思路三，匹配XmlAttributeValue" class="headerlink" title="思路三，匹配XmlAttributeValue"></a>思路三，匹配XmlAttributeValue</h4><p>最开始也是想匹配<code>XmlAttributeValue</code>的，但是不好过滤前面的<code>test</code>。所以想简单的匹配<code>XmlAttribute</code>，然后比较<code>name</code>是否为<code>test</code>。<br><code>XmlAttributeValue</code>其实是<code>XmlAttribute</code>的子标签，获取父类即可拿到<code>XmlAttribute</code>。<br>下面看实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestParamReferenceContributor</span> <span class="keyword">extends</span> <span class="title">PsiReferenceContributor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 匹配参数值，这里就去掉了"!=" "=="等运算符和数字</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PARAM_PATTERN = Pattern.compile(<span class="string">"([A-Za-z]+)"</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerReferenceProviders</span><span class="params">(@NotNull PsiReferenceRegistrar registrar)</span> </span>&#123;</div><div class="line">        <span class="comment">// 注意，这里第一个参数说明是要给XmlAttributeValue创建引用，那么下面返回TestParamReference的泛型参数也是XmlAttributeValue</span></div><div class="line">        <span class="comment">// 开始试过一次XmlAttribute来作为pattern，然后TestParamReference的泛型参数是XmlAttributeValue，这样其实需要点击外层属性name才能触发，不对应</span></div><div class="line">        registrar.registerReferenceProvider(PlatformPatterns.psiElement(XmlAttributeValue.class),</div><div class="line">                <span class="keyword">new</span> PsiReferenceProvider() &#123;</div><div class="line">                    <span class="meta">@NotNull</span></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="keyword">public</span> PsiReference[] getReferencesByElement(<span class="meta">@NotNull</span> PsiElement element, <span class="meta">@NotNull</span> ProcessingContext context) &#123;</div><div class="line">                        XmlAttributeValue xmlAttributeValue = (XmlAttributeValue) element;</div><div class="line">                        <span class="keyword">if</span> (MapperUtils.isElementWithinMybatisFile(xmlAttributeValue)) &#123;</div><div class="line">                            <span class="comment">// XmlAttributeValue其实是XmlAttribute的子标签，获取父类即可拿到XmlAttribute</span></div><div class="line">                            PsiElement xmlAttribute = xmlAttributeValue.getParent();</div><div class="line">                            <span class="keyword">if</span> (xmlAttribute <span class="keyword">instanceof</span> XmlAttribute &amp;&amp; ((XmlAttribute) xmlAttribute).getName().equals(<span class="string">"test"</span>)) &#123;</div><div class="line">                                String value = xmlAttributeValue.getValue();</div><div class="line">                                <span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class="line">                                    ArrayList&lt;PsiReference&gt; referenceList = Lists.newArrayList();</div><div class="line">                                    Matcher matcher = PARAM_PATTERN.matcher(value);</div><div class="line">                                    <span class="keyword">while</span> (matcher.find()) &#123;</div><div class="line">                                        String param = matcher.group(<span class="number">1</span>);</div><div class="line">                                        <span class="comment">// 注意需要排除一些逻辑关键字</span></div><div class="line">                                        <span class="keyword">if</span> (param.equalsIgnoreCase(<span class="string">"and"</span>)</div><div class="line">                                                || param.equalsIgnoreCase(<span class="string">"or"</span>)</div><div class="line">                                                || param.equalsIgnoreCase(<span class="string">"null"</span>)) &#123;</div><div class="line">                                            <span class="keyword">continue</span>;</div><div class="line">                                        &#125;</div><div class="line">                                        <span class="comment">// 这里加1是因为attribute value用双引号包着</span></div><div class="line">                                        <span class="keyword">int</span> start = matcher.start(<span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">                                        <span class="keyword">int</span> end = matcher.end(<span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">                                        referenceList.add(<span class="keyword">new</span> ParamReference(xmlAttributeValue, <span class="keyword">new</span> TextRange(start, end), param));</div><div class="line">                                    &#125;</div><div class="line">                                    <span class="keyword">return</span> referenceList.toArray(<span class="keyword">new</span> PsiReference[<span class="number">0</span>]);</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">return</span> PsiReference.EMPTY_ARRAY;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中引用可以复用之前的<code>ParamReference</code>。<br>最后不要忘了注册到<code>plugin.xml</code>中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">psi.referenceContributor</span> <span class="attr">implementation</span>=<span class="string">"com.damon4u.plugin.mybatis.reference.TestParamReferenceContributor"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>参考：<br><a href="https://www.jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi_references.html" target="_blank" rel="external">PSI References</a><br><a href="https://www.jetbrains.org/intellij/sdk/docs/reference_guide/custom_language_support/references_and_resolve.html" target="_blank" rel="external">References and Resolve</a><br><a href="https://www.jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/reference_contributor.html" target="_blank" rel="external">Reference Contributor</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://damon4u.github.io/blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%83%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8Bmapper%E8%A7%A3%E6%9E%90.html&quot;&gt;IDEA插件开发（七）mybatis插件之mapper解析&lt;/a&gt; 一文中使用到了&lt;code&gt;PropertyConverter&lt;/code&gt;来为&lt;code&gt;property&lt;/code&gt;属性添加引用，实现鼠标点击跳转，代码补全提示等功能，其中使用了&lt;code&gt;ContextPsiFieldReference&lt;/code&gt;，它继承了&lt;code&gt;PsiReferenceBase&lt;/code&gt;，实现&lt;code&gt;resolve()&lt;/code&gt;方法来返回对应的引用对象。&lt;/p&gt;
&lt;p&gt;今天主要就说说引用（ &lt;strong&gt;PSI References&lt;/strong&gt; ），以及如何单独注册引用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A reference in a PSI tree is an object that represents a link from a usage of a certain element in the code to the corresponding declaration. Resolving a reference means locating the declaration to which a specific usage refers.&lt;/p&gt;
&lt;p&gt;Resolving references gives users the ability to navigate from a PSI element usage (accessing a variable, calling a method and so on) to the declaration of that element (the variable’s definition, a method declaration and so on). This feature is needed in order to support the &lt;code&gt;Go to Declaration&lt;/code&gt; action invoked by &lt;strong&gt;Ctrl-B&lt;/strong&gt; and &lt;strong&gt;Ctrl-Click&lt;/strong&gt;, and it is a prerequisite for implementing the Find Usages action, the Rename refactoring and code completion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举个例子，也就是我想要实现的效果。&lt;br&gt;Dao层有个方法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;List&amp;lt;User&amp;gt; &lt;span class=&quot;title&quot;&gt;findByUserName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@Param(&lt;span class=&quot;string&quot;&gt;&quot;userName&quot;&lt;/span&gt;)&lt;/span&gt; String userName)&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后对应的mapper文件中的查询语句：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;findByUserName&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;resultType&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;com.damon4u.demo.domain.User&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    select id, user_name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    from user&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;where&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;test&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;userName != null&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            user_name like CONCAT(&#39;%&#39;,#&amp;#123;userName&amp;#125;,&#39;%&#39;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;if&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;where&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我现在想实现点击&lt;code&gt;#{userName}&lt;/code&gt;中的&lt;code&gt;userName&lt;/code&gt;能够跳转到Dao层方法的&lt;code&gt;userName&lt;/code&gt;参数，即为xml中的参数添加引用。&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Charles抓取HTTPS接口</title>
    <link href="https://damon4u.github.io//blog/2018/10/Charles%E6%8A%93%E5%8F%96HTTPS%E6%8E%A5%E5%8F%A3.html"/>
    <id>https://damon4u.github.io//blog/2018/10/Charles抓取HTTPS接口.html</id>
    <published>2018-10-22T09:41:50.000Z</published>
    <updated>2018-10-22T14:34:19.220Z</updated>
    
    <content type="html"><![CDATA[<p>日常开发过程中，可能会需要抓取线上https的接口，这里介绍使用 <strong>Charles</strong> 来实现。</p><a id="more"></a><p>首先在电脑上安装 <strong>Charles</strong> ，破解不破解都可以。我这里的版本是4.2.1。</p><p>之后需要在手机上安装SSL证书。<br>点击 <strong>Charles</strong> 的 <strong>Help</strong> -&gt; <strong>SSL Proxying</strong> -&gt; <strong>Install Charles Root Certificate on a Mobile Device or Remote Browser</strong> :<br><img src="/images/charles1.png" alt=""></p><p>之后会弹出弹窗，提示如何安装证书：<br>首先配置手机网络使用Charles的HTTP代理。<br>点击已经连接的Wi-Fi网络边上的叹号按钮，打开手机的网络配置页面，拖到最下面选择配置代理按钮，选择手动，然后服务器填写电脑的ip，端口填写8888：<br><img src="/images/charles2.jpeg" alt=""></p><p>配置好代理后，用手机浏览器访问 <code>chls.pro/ssl</code>，提示安装证书，然后根据提示安装即可。</p><p>安装完证书还不算完，新的ios系统需要单独信任证书配置：<br>选择手机的 <strong>通用</strong> -&gt; <strong>关于本机</strong> -&gt; <strong>证书信任设置</strong> ，开启证书信任。</p><p>这样手机端就配置完成了。</p><p>回到电脑端Charles，选择 <strong>Proxy</strong> -&gt; <strong>SSL Proxying Settings</strong> ，在这里添加对那些域名进行代理拦截，如果全部拦截，就配置为<code>*:443</code>即可：<br><img src="/images/charles3.png" alt=""></p><p>至此，配置工作完成，应该可以抓取大部分https接口了。</p><p>不用的时候，记得断开手机代理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日常开发过程中，可能会需要抓取线上https的接口，这里介绍使用 &lt;strong&gt;Charles&lt;/strong&gt; 来实现。&lt;/p&gt;
    
    </summary>
    
      <category term="http" scheme="https://damon4u.github.io/categories/http/"/>
    
    
      <category term="http" scheme="https://damon4u.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（七）mybatis插件之mapper解析与converter</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%83%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8Bmapper%E8%A7%A3%E6%9E%90%E4%B8%8Econverter.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（七）mybatis插件之mapper解析与converter.html</id>
    <published>2018-10-18T09:41:50.000Z</published>
    <updated>2018-10-25T15:07:47.307Z</updated>
    
    <content type="html"><![CDATA[<p>从今天开始一步一步练习mybatis插件开发。</p><p>第一步是解析mapper文件，可以实现xml中按照id属性查找resultMap或者sql片段，鼠标点击跳转。</p><p>Dom操作Xml的基本只是可以参考之前的文章：<a href="https://damon4u.github.io/blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89DOM%E6%93%8D%E4%BD%9CXML%E6%96%87%E4%BB%B6.html#more">IDEA插件开发（二）DOM操作XML文件</a></p><p>本文直接以mybatis的mapper文件解析为例，说明Dom操作的常用写法。</p><a id="more"></a><p>使用Dom解析xml文件，首先需要按照xml包含的标签元素（DTD）编写对应的Java实体。<br>例如一个典型的mapper xml文件包含的标签元素为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper</span></div><div class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></div><div class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.demo.dao.UserDao"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userMap"</span> <span class="attr">type</span>=<span class="string">"com.demo.entity.User"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"jobInfo"</span> <span class="attr">javaType</span>=<span class="string">"com.demo.entity.Job"</span></span></div><div class="line"><span class="tag">                    <span class="attr">resultMap</span>=<span class="string">"jobMap"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">sql</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.demo.entity.User"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUser"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p><p>转化为一个Java实体：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mapper</span> <span class="keyword">extends</span> <span class="title">DomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 一次返回mapper文件中增删改查子tag，在寻找候选tag时需要</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 增删改查子tag列表，每个子tag都包含id属性</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagsList</span>(&#123;<span class="string">"insert"</span>, <span class="string">"update"</span>, <span class="string">"delete"</span>, <span class="string">"select"</span>&#125;)</div><div class="line">    <span class="function">List&lt;IdDomElement&gt; <span class="title">getDaoElements</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * mapper标签包含namespace属性</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Required</span></div><div class="line">    <span class="meta">@NameValue</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"namespace"</span>)</div><div class="line">    <span class="function">GenericAttributeValue&lt;String&gt; <span class="title">getNamespace</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 解析并返回resultMap标签列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"resultMap"</span>)</div><div class="line">    <span class="function">List&lt;ResultMap&gt; <span class="title">getResultMaps</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 解析并返回parameterMap标签列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"parameterMap"</span>)</div><div class="line">    <span class="function">List&lt;ParameterMap&gt; <span class="title">getParameterMaps</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 解析并返回sql标签列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"sql"</span>)</div><div class="line">    <span class="function">List&lt;Sql&gt; <span class="title">getSqls</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 解析并返回insert标签列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"insert"</span>)</div><div class="line">    <span class="function">List&lt;Insert&gt; <span class="title">getInserts</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 解析并返回update标签列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"update"</span>)</div><div class="line">    <span class="function">List&lt;Update&gt; <span class="title">getUpdates</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 解析并返回delete标签列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"delete"</span>)</div><div class="line">    <span class="function">List&lt;Delete&gt; <span class="title">getDeletes</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 解析并返回select标签列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"select"</span>)</div><div class="line">    <span class="function">List&lt;Select&gt; <span class="title">getSelects</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到，每个xml中想解析的标签，都要写一个get方法去标示。<br>这里解释几个常用的注解：</p><h4 id="SubTag"><a href="#SubTag" class="headerlink" title="SubTag"></a>SubTag</h4><p><code>@SubTag</code>标注最多出现一次的子标签，对应的get方法返回单个实体。<br>例如<code>resultMap</code>标签中，最多有一个<code>constructor</code>子标签，那么需要写为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SubTag</span>(<span class="string">"constructor"</span>)</div><div class="line"><span class="function">Constructor <span class="title">getConstructor</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p><h4 id="SubTagList"><a href="#SubTagList" class="headerlink" title="SubTagList"></a>SubTagList</h4><p><code>@SubTagList</code>标注可以出现多次的子标签集合，对应的get方法返回实体列表。<br>例如一个<code>mapper</code>标签中，可以有多个<code>resultMap</code>子标签，那么需要写为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SubTagList</span>(<span class="string">"resultMap"</span>)</div><div class="line"><span class="function">List&lt;ResultMap&gt; <span class="title">getResultMaps</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p><h4 id="SubTagsList"><a href="#SubTagsList" class="headerlink" title="SubTagsList"></a>SubTagsList</h4><p><code>@SubTagsList</code>标注的方法，返回多个集合的全集，对应的方法返回实体列表。<br>通常用于返回一个标签中的多个子标签集合。<br>例如，我们要定义一个方法，返回mapper中出现的所有增删改查子标签集合，那么可以写为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SubTagsList</span>(&#123;<span class="string">"insert"</span>, <span class="string">"update"</span>, <span class="string">"delete"</span>, <span class="string">"select"</span>&#125;)</div><div class="line"><span class="function">List&lt;IdDomElement&gt; <span class="title">getDaoElements</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p><h4 id="NameValue"><a href="#NameValue" class="headerlink" title="NameValue"></a>NameValue</h4><p><code>@NameValue</code>的作用：使用这个注解标注<code>Element</code>中的一个方法，这个方法只能返回<code>String</code>或者<code>GenericValue</code>，在使用<code>ElementPresentationManager#getElementName(Object)</code>获取当前<code>Element</code>的名字标示时，返回这个方法的返回值，或者是直接的<code>String</code>，或者是<code>GenericValue</code>，那么返回<code>GenericValue</code>的<code>getStringValue</code>方法结果。</p><h4 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h4><p><code>@Attribute</code>标注的方法，在xml中是以标签属性的形式出现的，而非标签。例如mapper中的namespace属性。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.demo.dao.UserDao"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p><p>那么对应的方法为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Attribute</span>(<span class="string">"namespace"</span>)</div><div class="line"><span class="function">GenericAttributeValue&lt;String&gt; <span class="title">getNamespace</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p><p>上面给出的<code>Mapper</code>接口继承了<code>DomElement</code>接口，这样就成为了一个可以DOM被解析的xml元素。<br><code>Mapper</code>接口中出现的实体也都是需要自己定义的，如<code>ResultMap</code>,<code>Insert</code>等。</p><p>下面开始写单个实体，对mapper中的子元素进行解析。</p><h4 id="一个包含id属性的基础标签"><a href="#一个包含id属性的基础标签" class="headerlink" title="一个包含id属性的基础标签"></a>一个包含id属性的基础标签</h4><p>很多标签都包含<code>id</code>属性，例如<code>resultMap</code>，<code>insert</code>等，那么我们先定义一个基本标签：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> * 定义一个基本dom元素，包含id属性</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 2018-10-18 15:38</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IdDomElement</span> <span class="keyword">extends</span> <span class="title">DomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 必须包含一个id属性</span></div><div class="line"><span class="comment">     * Required注解标示必须要有该属性</span></div><div class="line"><span class="comment">     * NameValue注解该方法，那么外部获取IdDomElement的标示时，返回该方法的结果</span></div><div class="line"><span class="comment">     * Attribute注解标示xml属性</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回GenericAttributeValue而不是String可以方便重命名</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Required</span></div><div class="line">    <span class="meta">@NameValue</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"id"</span>)</div><div class="line">    <span class="function">GenericAttributeValue&lt;String&gt; <span class="title">getId</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="动态查询语句元素"><a href="#动态查询语句元素" class="headerlink" title="动态查询语句元素"></a>动态查询语句元素</h4><p>mapper中允许使用<code>where</code>，<code>set</code>，<code>if</code>等动态查询语句拼接查询条件，那么可以抽取出来一个动态查询语句元素：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> * mapper中的动态查询语句</span></div><div class="line"><span class="comment"> * http://www.mybatis.org/mybatis-3/dynamic-sql.html</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 2018-10-18 16:55</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DynamicQueryableDomElement</span> <span class="keyword">extends</span> <span class="title">DomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"include"</span>)</div><div class="line">    <span class="function">List&lt;Include&gt; <span class="title">getIncludes</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"trim"</span>)</div><div class="line">    <span class="function">List&lt;Trim&gt; <span class="title">getTrims</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"where"</span>)</div><div class="line">    <span class="function">List&lt;Where&gt; <span class="title">getWheres</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"set"</span>)</div><div class="line">    <span class="function">List&lt;Set&gt; <span class="title">getSets</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"foreach"</span>)</div><div class="line">    <span class="function">List&lt;Foreach&gt; <span class="title">getForeachs</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"choose"</span>)</div><div class="line">    <span class="function">List&lt;Choose&gt; <span class="title">getChooses</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"if"</span>)</div><div class="line">    <span class="function">List&lt;If&gt; <span class="title">getIfs</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"bind"</span>)</div><div class="line">    <span class="function">List&lt;Bind&gt; <span class="title">getBinds</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中<code>Trim</code>，<code>Where</code>等子标签又可以包含动态查询语句，因此，可以写为类似递归的形式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Where</span> <span class="keyword">extends</span> <span class="title">DynamicQueryableDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其他子标签与<code>Where</code>类似，不多写。<br>其中<code>Include</code>标签要特殊一些，根据mybatis的规则，该标签用来引用sql代码片段。<br>所谓sql代码片段，是一段可复用的动态查询语句集合，因此我们先定义<code>Sql</code>实体：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sql</span> <span class="keyword">extends</span> <span class="title">DynamicQueryableDomElement</span>, <span class="title">IdDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到它继承了<code>DynamicQueryableDomElement</code>和<code>IdDomElement</code>，代表着它包含了动态查询语句，带有<code>id</code>属性。<br>下面就可以定义<code>include</code>实体了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Include</span> <span class="keyword">extends</span> <span class="title">DomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * include引用标签id</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 引用标签</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"refid"</span>)</div><div class="line">    <span class="function">GenericAttributeValue&lt;Sql&gt; <span class="title">getRefId</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意返回值泛型参数为<code>Sql</code>实体，这样在xml编写时，IDEA可以自动提供代码补全、鼠标点击跳转引用等功能。</p><h4 id="带有请求参数的元素"><a href="#带有请求参数的元素" class="headerlink" title="带有请求参数的元素"></a>带有请求参数的元素</h4><p>增删改查元素都可以配置请求参数，包含<code>parameterType</code>指定一个实体类，那么我们抽取一个元素：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ParameteredDynamicQueryableDomElement</span> <span class="keyword">extends</span> <span class="title">DynamicQueryableDomElement</span>, <span class="title">IdDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"parameterType"</span>)</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> converter</span></div><div class="line">    <span class="function">GenericAttributeValue&lt;PsiClass&gt; <span class="title">getParameterType</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中<code>parameterType</code>的返回值泛型类型为<code>PsiClass</code>，这样能映射到一个具体的实体类上。</p><h4 id="增删改查标签"><a href="#增删改查标签" class="headerlink" title="增删改查标签"></a>增删改查标签</h4><p>有了<code>ParameteredDynamicQueryableDomElement</code>，就可以在此基础上继续丰富，定义增删改查标签。</p><h4 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Insert</span> <span class="keyword">extends</span> <span class="title">ParameteredDynamicQueryableDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"selectKey"</span>)</div><div class="line">    <span class="function">List&lt;SelectKey&gt; <span class="title">getSelectKey</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> * 插入语句中的selectkey标签，用来生成主键</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 2018-10-18 17:32</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SelectKey</span> <span class="keyword">extends</span> <span class="title">DomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"resultType"</span>)</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> converter</span></div><div class="line">    <span class="function">GenericAttributeValue&lt;PsiClass&gt; <span class="title">getResultType</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Delete</span> <span class="keyword">extends</span> <span class="title">ParameteredDynamicQueryableDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> <span class="keyword">extends</span> <span class="title">ParameteredDynamicQueryableDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Select</span> <span class="keyword">extends</span> <span class="title">ParameteredDynamicQueryableDomElement</span>, <span class="title">ResultMapAttributeDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"resultType"</span>)</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> converter</span></div><div class="line">    <span class="function">GenericAttributeValue&lt;PsiClass&gt; <span class="title">getResultType</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中返回<code>resultType</code>好理解，指定一个实体类，而mybatis规定select标签是可以返回<code>resultMap</code>的。<br>这里提现在<code>ResultMapAttributeDomElement</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultMapAttributeDomElement</span> <span class="keyword">extends</span> <span class="title">DomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"resultMap"</span>)</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> converter</span></div><div class="line">    <span class="function">GenericAttributeValue&lt;ResultMap&gt; <span class="title">getResultMap</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来重点介绍这个相对复杂的<code>resultMap</code>。</p><h4 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h4><p><code>resultMap</code>元素有很多子元素和一个值得讨论的结构。</p><ul><li><code>constructor</code> - 用于在实例化类时，注入结果到构造方法中<ul><li><code>idArg</code> - ID 参数;标记出作为 ID 的结果可以帮助提高整体性能</li><li><code>arg</code> - 将被注入到构造方法的一个普通结果</li></ul></li><li><code>id</code> – 一个 ID 结果;标记出作为 ID 的结果可以帮助提高整体性能</li><li><code>result</code> – 注入到字段或<code>JavaBean</code>属性的普通结果</li><li><code>association</code> – 一个复杂类型的关联;许多结果将包装成这种类型<ul><li>嵌套结果映射 – associations are resultMaps themselves, or can refer to one</li></ul></li><li><code>collection</code> – 一个复杂类型的集合<ul><li>嵌套结果映射 – collections are resultMaps themselves, or can refer to one</li></ul></li><li><code>discriminator</code> – 使用结果值来决定使用哪个<code>resultMap</code><ul><li><code>case</code> – 基于某些值的结果映射<ul><li>嵌套结果映射 – 一个 case 也是一个映射它本身的结果,因此可以包含很多相 同的元素，或者它可以参照一个外部的 resultMap。</li></ul></li></ul></li></ul><p>首先，将<code>resultMap</code>中的基础元素抽取出来，他们可能直接出现在<code>resultMap</code>标签中，也可能出现在<code>association</code>等子标签中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> * mapper中的resultMap标签内元素基本属性</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 2018-10-18 17:47</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultMapBaseDomElement</span> <span class="keyword">extends</span> <span class="title">DomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SubTag</span>(<span class="string">"constructor"</span>)</div><div class="line">    <span class="function">Constructor <span class="title">getConstructor</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"id"</span>)</div><div class="line">    <span class="function">List&lt;Id&gt; <span class="title">getIds</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"result"</span>)</div><div class="line">    <span class="function">List&lt;Result&gt; <span class="title">getResults</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"association"</span>)</div><div class="line">    <span class="function">List&lt;Association&gt; <span class="title">getAssociations</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@SubTagList</span>(<span class="string">"collection"</span>)</div><div class="line">    <span class="function">List&lt;Collection&gt; <span class="title">getCollections</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@SubTag</span>(<span class="string">"discriminator"</span>)</div><div class="line">    <span class="function">Discriminator <span class="title">getDiscriminator</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中<code>id</code>和<code>result</code>子标签功能类似，用来做数据库字段与实体字段映射，包含<code>property</code>属性，那么我们将<code>property</code>属性抽取出来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> * 包含property属性的元素</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 2018-10-18 17:52</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertyAttributeDomElement</span> <span class="keyword">extends</span> <span class="title">DomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"property"</span>)</div><div class="line">    <span class="meta">@Convert</span>(PropertyConverter.class)</div><div class="line">    <span class="function">GenericAttributeValue&lt;XmlAttributeValue&gt; <span class="title">getProperty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后让<code>id</code>和<code>result</code>去继承它：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Id</span> <span class="keyword">extends</span> <span class="title">PropertyAttributeDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Result</span> <span class="keyword">extends</span> <span class="title">PropertyAttributeDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而<code>association</code>和<code>collection</code>子标签功能会多一些，内部还可能包含一个嵌套的<code>resultMap</code>，因此会继承多一些，当然，它们会包含自己独有的属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Association</span> <span class="keyword">extends</span> <span class="title">ResultMapBaseDomElement</span>, <span class="title">ResultMapAttributeDomElement</span>, <span class="title">PropertyAttributeDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"javaType"</span>)</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> converter</span></div><div class="line">    <span class="function">GenericAttributeValue&lt;PsiClass&gt; <span class="title">getJavaType</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span> <span class="keyword">extends</span> <span class="title">ResultMapBaseDomElement</span>, <span class="title">ResultMapAttributeDomElement</span>, <span class="title">PropertyAttributeDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"ofType"</span>)</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> converter</span></div><div class="line">    <span class="function">GenericAttributeValue&lt;PsiClass&gt; <span class="title">getOfType</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="属性转换器PropertyConverter"><a href="#属性转换器PropertyConverter" class="headerlink" title="属性转换器PropertyConverter"></a>属性转换器PropertyConverter</h4><blockquote><p>注：属性转换器涉及到 <strong>PSI Reference</strong> 的知识，在下一篇文章中做介绍。</p></blockquote><p>重新把<code>property</code>属性请回来，因为我们要讲它的转换器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> * 包含property属性的元素</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 2018-10-18 17:52</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertyAttributeDomElement</span> <span class="keyword">extends</span> <span class="title">DomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"property"</span>)</div><div class="line">    <span class="meta">@Convert</span>(PropertyConverter.class)</div><div class="line">    <span class="function">GenericAttributeValue&lt;XmlAttributeValue&gt; <span class="title">getProperty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先说目的，加这个转换器，是为了让<code>resultMap</code>中的<code>property</code>属性具有鼠标点击跳转操作，即为属性值创建引用到实体上。<br>假如我们有这样一个<code>User</code>实体：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> User son;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们可能会有如下<code>resultMap</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userResultMap"</span> <span class="attr">type</span>=<span class="string">"com.damon4u.demo.domain.User"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_name"</span> <span class="attr">property</span>=<span class="string">"userName"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"son_id"</span> <span class="attr">property</span>=<span class="string">"son.id"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div></pre></td></tr></table></figure></p><p>按照mybatis规定，除了可以映射基本类型和简单类型，还可以映射带引用嵌套层级的属性，如<code>son.id</code>。</p><p>首先创建个<code>MapperUtils</code>，写一个方法，用来获取当前<code>property</code>所属标签对应哪个实体类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MapperUtils</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取property从属的类型</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> attributeValue property属性</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;PsiClass&gt; <span class="title">getPropertyClazz</span><span class="params">(XmlAttributeValue attributeValue)</span> </span>&#123;</div><div class="line">        DomElement domElement = DomUtil.getDomElement(attributeValue);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == domElement) &#123;</div><div class="line">            <span class="keyword">return</span> Optional.empty();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// collection标签下的property，那么类型为ofType指定</span></div><div class="line">        Collection collection = DomUtil.getParentOfType(domElement, Collection.class, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != collection &amp;&amp; isNotWithinSameTag(collection, attributeValue)) &#123;</div><div class="line">            <span class="keyword">return</span> Optional.ofNullable(collection.getOfType().getValue());</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// association标签下的property，那么类型为javaType指定</span></div><div class="line">        Association association = DomUtil.getParentOfType(domElement, Association.class, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != association &amp;&amp; isNotWithinSameTag(association, attributeValue)) &#123;</div><div class="line">            <span class="keyword">return</span> Optional.ofNullable(association.getJavaType().getValue());</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// resultMap标签下的property，那么类型为type指定</span></div><div class="line">        ResultMap resultMap = DomUtil.getParentOfType(domElement, ResultMap.class, <span class="keyword">true</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != resultMap &amp;&amp; isNotWithinSameTag(resultMap, attributeValue)) &#123;</div><div class="line">            <span class="keyword">return</span> Optional.ofNullable(resultMap.getType().getValue());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Optional.empty();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNotWithinSameTag</span><span class="params">(@NotNull DomElement domElement, @NotNull XmlElement xmlElement)</span> </span>&#123;</div><div class="line">        XmlTag xmlTag = PsiTreeUtil.getParentOfType(xmlElement, XmlTag.class);</div><div class="line">        <span class="keyword">return</span> !domElement.getXmlTag().equals(xmlTag);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来还需要一个工具类<code>JavaUtils</code>，用来从类中寻找成员变量（非static、非final）的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaUtils</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JavaUtils</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 从类中查找成员变量</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> clazz        类</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> propertyName 属性名称</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;PsiField&gt; <span class="title">findSettablePsiField</span><span class="params">(@NotNull <span class="keyword">final</span> PsiClass clazz,</span></span></div><div class="line"><span class="function"><span class="params">                                                          @Nullable <span class="keyword">final</span> String propertyName)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> PsiField field = PropertyUtil.findPropertyField(clazz, propertyName, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> Optional.ofNullable(field);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取类中所有成员变量</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PsiField[] findSettablePsiFields(<span class="keyword">final</span> <span class="meta">@NotNull</span> PsiClass clazz) &#123;</div><div class="line">        <span class="keyword">final</span> PsiField[] allFields = clazz.getAllFields();</div><div class="line">        <span class="keyword">final</span> List&lt;PsiField&gt; settableFields = <span class="keyword">new</span> ArrayList&lt;&gt;(allFields.length);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> PsiField field : allFields) &#123;</div><div class="line">            <span class="keyword">final</span> PsiModifierList modifierList = field.getModifierList();</div><div class="line">            <span class="keyword">if</span> (modifierList != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                    (modifierList.hasModifierProperty(PsiModifier.STATIC)</div><div class="line">                            || modifierList.hasModifierProperty(PsiModifier.FINAL))) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            settableFields.add(field);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> settableFields.toArray(<span class="keyword">new</span> PsiField[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>有了工具类，就可以写解析器了，将xml属性解析到实体类字段：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * 将xml属性解析到实体类字段</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 2018-10-19 11:46</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PsiFiledReferenceSetResolver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 嵌套引用分隔符</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Splitter SPLITTER = Splitter.on(String.valueOf(ReferenceSetBase.DOT_SEPARATOR));</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当前属性元素</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> XmlAttributeValue element;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 属性全名可能包含引用，例如user.name，那么按照点号分割，保存所有字段名称</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; fieldNameWithReferenceList;</div><div class="line"></div><div class="line">    PsiFiledReferenceSetResolver(<span class="meta">@NotNull</span> XmlAttributeValue element) &#123;</div><div class="line">        <span class="keyword">this</span>.element = element;</div><div class="line">        <span class="comment">// 属性全名，可能包含引用，如user.name</span></div><div class="line">        String wholeFiledName = element.getValue() != <span class="keyword">null</span> ? element.getValue() : <span class="string">""</span>;</div><div class="line">        <span class="keyword">this</span>.fieldNameWithReferenceList = Lists.newArrayList(SPLITTER.split(wholeFiledName));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将xml属性解析到实体类字段</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> index 按照点号分割后，属性位于哪一级，index为索引值</span></div><div class="line"><span class="comment">     *              例如user.name，那么idea会为user和name分别创建引用，都可以鼠标点击跳转</span></div><div class="line"><span class="comment">     *              user的index为0，name的index为1</span></div><div class="line"><span class="comment">     *              这个值决定解析层级深度</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">final</span> Optional&lt;? extends PsiElement&gt; resolve(<span class="keyword">int</span> index) &#123;</div><div class="line">        <span class="comment">// 先获取一级属性</span></div><div class="line">        <span class="comment">// 对于简单属性"name"，那么就是这个属性</span></div><div class="line">        <span class="comment">// 对于包含引用的情况"user.name"，那么先找到一级属性user</span></div><div class="line">        Optional&lt;PsiField&gt; firstLevelElement = getFirstLevelElement(Iterables.getFirst(fieldNameWithReferenceList, <span class="keyword">null</span>));</div><div class="line">        <span class="keyword">return</span> firstLevelElement.isPresent() ?</div><div class="line">                (fieldNameWithReferenceList.size() &gt; <span class="number">1</span> ? parseNextLevelElement(firstLevelElement, index) : firstLevelElement)</div><div class="line">                : Optional.empty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取一级属性</span></div><div class="line"><span class="comment">     * 对于简单属性"name"，那么就是这个属性</span></div><div class="line"><span class="comment">     * 对于包含引用的情况"user.name"，那么先找到一级属性user</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> firstLevelFieldName 第一层级的属性名，可能是一个引用，也可能是基本类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Optional&lt;PsiField&gt; <span class="title">getFirstLevelElement</span><span class="params">(@Nullable String firstLevelFieldName)</span> </span>&#123;</div><div class="line">        Optional&lt;PsiClass&gt; clazz = MapperUtils.getPropertyClazz(element);</div><div class="line">        <span class="keyword">return</span> clazz.flatMap(psiClass -&gt; JavaUtils.findSettablePsiField(psiClass, firstLevelFieldName));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 按照点号逐层解析，前面层级为引用，去引用中解析下一层字段</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> maxLevelIndex 最大解析层级深度，比如"user.name"，那么如果是要为user建立引用，maxLevelIndex为1；</span></div><div class="line"><span class="comment">     *                      如果要为name建立引用，那么maxLevelIndex为2</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Optional&lt;PsiField&gt; <span class="title">parseNextLevelElement</span><span class="params">(Optional&lt;PsiField&gt; current, <span class="keyword">int</span> maxLevelIndex)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (current.isPresent() &amp;&amp; index &lt;= maxLevelIndex) &#123;</div><div class="line">            String nextLevelIndexFiledName = fieldNameWithReferenceList.get(index);</div><div class="line">            <span class="keyword">if</span> (nextLevelIndexFiledName.contains(<span class="string">" "</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> Optional.empty();</div><div class="line">            &#125;</div><div class="line">            current = resolveReferenceField(current.get(), nextLevelIndexFiledName);</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> current;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 从引用类型中解析字段</span></div><div class="line"><span class="comment">     * 例如user.name</span></div><div class="line"><span class="comment">     * 那么current为前面解析出来的user引用，fieldName为name</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> current   当前引用</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> fieldName 要从引用中解析的字段名称</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 字段</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Optional&lt;PsiField&gt; <span class="title">resolveReferenceField</span><span class="params">(@NotNull PsiField current, @NotNull String fieldName)</span> </span>&#123;</div><div class="line">        PsiType type = current.getType();</div><div class="line">        <span class="comment">// 引用类型，而且不包含可变参数</span></div><div class="line">        <span class="keyword">if</span> (type <span class="keyword">instanceof</span> PsiClassReferenceType &amp;&amp; !((PsiClassReferenceType) type).hasParameters()) &#123;</div><div class="line">            PsiClass clazz = ((PsiClassReferenceType) type).resolve();</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != clazz) &#123;</div><div class="line">                <span class="keyword">return</span> JavaUtils.findSettablePsiField(clazz, fieldName);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Optional.empty();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>外部调用<code>resolve</code>方法，首先对一级属性进行解析，如果包含了嵌套引用，那么需要逐层解析。</p><p>有了解析器，就可以创建一个<code>PsiReference</code>引用，顾名思义，就是创建一个Psi元素的引用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextPsiFieldReference</span> <span class="keyword">extends</span> <span class="title">PsiReferenceBase</span>&lt;<span class="title">XmlAttributeValue</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> PsiFiledReferenceSetResolver resolver;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 当前解析层级</span></div><div class="line"><span class="comment">     * 例如property为"user.name"</span></div><div class="line"><span class="comment">     * 那么如果鼠标点击的user，index为1</span></div><div class="line"><span class="comment">     * 如果鼠标点击的是name，index为2</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> element 当前元素</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> range   元素边界</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> index   引用层级</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    ContextPsiFieldReference(XmlAttributeValue element, TextRange range, <span class="keyword">int</span> index) &#123;</div><div class="line">        <span class="keyword">super</span>(element, range, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">this</span>.index = index;</div><div class="line">        resolver = <span class="keyword">new</span> PsiFiledReferenceSetResolver(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 解析xml属性，返回对应的引用变量</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PsiElement <span class="title">resolve</span><span class="params">()</span> </span>&#123;</div><div class="line">        Optional&lt;PsiElement&gt; resolved = (Optional&lt;PsiElement&gt;) resolver.resolve(index);</div><div class="line">        <span class="keyword">return</span> resolved.orElse(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 代码自动提示类型中所有可赋值（非static和非final）的成员变量列表</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 类型中所有可赋值（非static和非final）的成员变量列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Object[] getVariants() &#123;</div><div class="line">        Optional&lt;PsiClass&gt; clazz = getTargetClazz();</div><div class="line">        <span class="keyword">return</span> clazz.isPresent() ? JavaUtils.findSettablePsiFields(clazz.get()) : PsiReference.EMPTY_ARRAY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取property参数的类型</span></div><div class="line"><span class="comment">     * 如果是简单的"name"，那么就使用外层标签指定的类型</span></div><div class="line"><span class="comment">     * 如果是带引用的"user.name"，那么需要深入解析出具体引用类型user</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> property参数的类型</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">private</span> Optional&lt;PsiClass&gt; <span class="title">getTargetClazz</span><span class="params">()</span> </span>&#123;</div><div class="line">        String elementValue = getElement().getValue();</div><div class="line">        <span class="keyword">if</span> (elementValue == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> Optional.empty();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (elementValue.contains(String.valueOf(ReferenceSetBase.DOT_SEPARATOR))) &#123;</div><div class="line">            <span class="comment">// 包含点号，说明此参数的类型为引用类型</span></div><div class="line">            <span class="comment">// 例如一个类的成员变量中包含其他引用类型</span></div><div class="line">            <span class="keyword">int</span> ind = <span class="number">0</span> == index ? <span class="number">0</span> : index - <span class="number">1</span>;</div><div class="line">            Optional&lt;PsiElement&gt; resolved = (Optional&lt;PsiElement&gt;) resolver.resolve(ind);</div><div class="line">            <span class="keyword">if</span> (resolved.isPresent()) &#123;</div><div class="line">                <span class="keyword">return</span> JavaService.getInstance(myElement.getProject()).getReferenceClazzOfPsiField(resolved.get());</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有点号，说明参数类型不是引用类型，直接就是外层标签定义的类型（如resultMap中type指定的类型）中包含的简单类型，如基本类型或者字符串类型变量</span></div><div class="line">            <span class="keyword">return</span> MapperUtils.getPropertyClazz(myElement);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Optional.empty();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面创建的<code>ContextPsiFieldReference</code>引用需要传入<code>index</code>变量，用来指出引用的层级。<br>例如xml中属性值为<code>user.name</code>，那么如果是<code>user</code>这一层的引用，<code>index</code>为1，如果是<code>name</code>这一层的引用，<code>index</code>为2。</p><p>接下来创建一个<code>ReferenceSetBase</code>，用来解析嵌套引用。<br>继承<code>ReferenceSetBase</code>并重写<code>createReference</code>方法，使用我们上面创建的<code>ContextPsiFieldReference</code>。基类<code>ReferenceSetBase</code>中包含着对嵌套引用的解析操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultPropertyReferenceSet</span> <span class="keyword">extends</span> <span class="title">ReferenceSetBase</span>&lt;<span class="title">PsiReference</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultPropertyReferenceSet</span><span class="params">(String text, @NotNull PsiElement element, <span class="keyword">int</span> offset)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(text, element, offset, ReferenceSetBase.DOT_SEPARATOR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> PsiReference <span class="title">createReference</span><span class="params">(TextRange range, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        XmlAttributeValue element = (XmlAttributeValue) getElement();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span> == element ? <span class="keyword">null</span> : <span class="keyword">new</span> ContextPsiFieldReference(element, range, index);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>有了引用，接下来需要放到转换器中，与字段绑定：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyConverter</span> <span class="keyword">extends</span> <span class="title">ResolvingConverter</span>&lt;<span class="title">XmlAttributeValue</span>&gt; <span class="keyword">implements</span> <span class="title">CustomReferenceConverter</span>&lt;<span class="title">XmlAttributeValue</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * converter实现CustomReferenceConverter，这样能通过实现createReferences创建引用关系</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PsiReference[] createReferences(GenericDomValue&lt;XmlAttributeValue&gt; value, PsiElement element, ConvertContext context) &#123;</div><div class="line">        String stringValue = value.getStringValue();</div><div class="line">        <span class="keyword">if</span> (stringValue == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> PsiReference.EMPTY_ARRAY;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultPropertyReferenceSet(stringValue, element, ElementManipulators.getOffsetInElement(element)).getPsiReferences();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Collection&lt;? extends XmlAttributeValue&gt; getVariants(ConvertContext context) &#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> XmlAttributeValue <span class="title">fromString</span><span class="params">(@Nullable String s, ConvertContext context)</span> </span>&#123;</div><div class="line">        DomElement ctxElement = context.getInvocationElement();</div><div class="line">        <span class="keyword">return</span> ctxElement <span class="keyword">instanceof</span> GenericAttributeValue ? ((GenericAttributeValue) ctxElement).getXmlAttributeValue() : <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">(@Nullable XmlAttributeValue attributeValue, ConvertContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后再看一次使用方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> * 包含property属性的元素</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 2018-10-18 17:52</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertyAttributeDomElement</span> <span class="keyword">extends</span> <span class="title">DomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"property"</span>)</div><div class="line">    <span class="meta">@Convert</span>(PropertyConverter.class)</div><div class="line">    <span class="function">GenericAttributeValue&lt;XmlAttributeValue&gt; <span class="title">getProperty</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样，再DOM解析时，会使用该converter，而converter实现了<code>CustomReferenceConverter</code>，可以创建引用，就能实现引用绑定了。</p><p>参考：<br><a href="https://www.jetbrains.org/intellij/sdk/docs/basics/architectural_overview/psi_references.html" target="_blank" rel="external">PSI References</a><br><a href="https://www.jetbrains.org/intellij/sdk/docs/reference_guide/custom_language_support/references_and_resolve.html" target="_blank" rel="external">References and Resolve</a><br><a href="https://www.jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/reference_contributor.html" target="_blank" rel="external">Reference Contributor</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从今天开始一步一步练习mybatis插件开发。&lt;/p&gt;
&lt;p&gt;第一步是解析mapper文件，可以实现xml中按照id属性查找resultMap或者sql片段，鼠标点击跳转。&lt;/p&gt;
&lt;p&gt;Dom操作Xml的基本只是可以参考之前的文章：&lt;a href=&quot;https://damon4u.github.io/blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89DOM%E6%93%8D%E4%BD%9CXML%E6%96%87%E4%BB%B6.html#more&quot;&gt;IDEA插件开发（二）DOM操作XML文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文直接以mybatis的mapper文件解析为例，说明Dom操作的常用写法。&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>对称加密与AES算法</title>
    <link href="https://damon4u.github.io//blog/2018/10/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%B8%8EAES%E7%AE%97%E6%B3%95.html"/>
    <id>https://damon4u.github.io//blog/2018/10/对称加密与AES算法.html</id>
    <published>2018-10-16T10:41:50.000Z</published>
    <updated>2018-10-22T14:34:19.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>加密和解密使用同一个密钥的方式成为共享密钥加密（Common key crypto system），也被成为对称密钥加密。<br>以共享的方式加密时必须将密钥也发送给对方。</p><a id="more"></a><h3 id="AES算法"><a href="#AES算法" class="headerlink" title="AES算法"></a>AES算法</h3><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称Rijndael加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用。<br>对称加密算法也就是加密和解密用相同的密钥，具体的加密流程如下图：<br><img src="/images/aes1.png" alt=""></p><ul><li>明文P：没有经过加密的数据。</li><li>密钥K：用来加密明文的密码，在对称加密算法中，加密与解密的密钥是相同的。密钥为接收方与发送方协商产生，但不可以直接在网络上传输，否则会导致密钥泄漏，通常是通过非对称加密算法加密密钥，然后再通过网络传输给对方，或者直接面对面商量密钥。密钥是绝对不可以泄漏的，否则会被攻击者还原密文，窃取机密数据。</li><li>AES加密函数：设AES加密函数为E，则 C = E(K, P),其中P为明文，K为密钥，C为密文。也就是说，把明文P和密钥K作为加密函数的参数输入，则加密函数E会输出密文C。</li><li>密文C：经加密函数处理后的数据。</li><li>AES解密函数：设AES解密函数为D，则 P = D(K, C),其中C为密文，K为密钥，P为明文。也就是说，把密文C和密钥K作为解密函数的参数输入，则解密函数会输出明文P。</li></ul><p>AES的区块长度固定为128比特，密钥长度则可以是128，192或256比特。</p><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><p>首先生成一个秘钥：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * AES密钥生成器,生成16进制格式的密钥</span></div><div class="line"><span class="comment"> * 密钥长度可以是128，192或256比特,这里生成的是128bit的16进制字符串,长度为32 (4*32=128)</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateAESKey</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        KeyGenerator generator = KeyGenerator.getInstance(<span class="string">"AES"</span>);</div><div class="line">        generator.init(<span class="number">128</span>); <span class="comment">//128bit</span></div><div class="line">        SecretKey secretKey = generator.generateKey();</div><div class="line">        <span class="keyword">return</span> DatatypeConverter.printHexBinary(secretKey.getEncoded());<span class="comment">//16进制编码后返回</span></div><div class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>AES属于对称加密，内容传输之前，前端使用密钥将内容加密，后端拿到后，使用相同的密钥将内容解密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * AES加密</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> hexStringKey 16进制密钥</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> initVector 初始向量 iv</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> value 待加密内容</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> Base64编码的加密内容</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptIVHexKey</span><span class="params">(String hexStringKey, String initVector, String value)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(initVector.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">        <span class="keyword">byte</span>[] decodedKey = DatatypeConverter.parseHexBinary(hexStringKey);</div><div class="line">        SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(decodedKey, <span class="number">0</span>, decodedKey.length, <span class="string">"AES"</span>);</div><div class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5PADDING"</span>);</div><div class="line">        cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] encrypted = cipher.doFinal(value.getBytes());</div><div class="line">        <span class="keyword">return</span> Base64.encodeBase64String(encrypted);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * AES解密</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> hexStringKey 16进制密钥</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> initVector 初始向量 iv</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> encrypted 待解密内容,Base64编码</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> 解密后的内容</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptIVHexKey</span><span class="params">(String hexStringKey, String initVector, String encrypted)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        IvParameterSpec iv = <span class="keyword">new</span> IvParameterSpec(initVector.getBytes(<span class="string">"UTF-8"</span>));</div><div class="line">        <span class="keyword">byte</span>[] decodedKey = DatatypeConverter.parseHexBinary(hexStringKey);</div><div class="line">        SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(decodedKey, <span class="number">0</span>, decodedKey.length, <span class="string">"AES"</span>);</div><div class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"AES/CBC/PKCS5PADDING"</span>);</div><div class="line">        cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);</div><div class="line">        <span class="keyword">byte</span>[] original = cipher.doFinal(Base64.decodeBase64(encrypted));</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(original);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">        ex.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String key = <span class="string">"30023E85AE254CF431FAAB0E3325B3D6"</span>; <span class="comment">// 128 bit key</span></div><div class="line">    String initVector = <span class="string">"1234567890123456"</span>; <span class="comment">// 16 bytes IV</span></div><div class="line">    System.out.println(decryptIVHexKey(key, initVector,</div><div class="line">            encryptIVHexKey(key, initVector, <span class="string">"123abc"</span>)));</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意，iv需要是16bit。前后端一致。</p><h3 id="2-js"><a href="#2-js" class="headerlink" title="2.js"></a>2.js</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>aes demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        *&#123;margin:0;padding:0&#125;</span></div><div class="line"><span class="undefined">        .demo-wrap&#123;width: 400px;height: 50px;margin: 50px auto auto auto&#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./rollups/aes.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo-wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"data-ipt"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"getAES();"</span>&gt;</span>AES加密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"getDAes();"</span>&gt;</span>AES解密<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">    加密后的数据:</div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span> = <span class="string">"encrypted"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    解密后的数据:</div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"decrypted"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        function getAesString(data,key,iv)&#123;//加密</span></div><div class="line"><span class="undefined">            var key  = CryptoJS.enc.Hex.parse(key); //由于是16进制密钥，所以需要先解析出来</span></div><div class="line"><span class="undefined">            var iv   = CryptoJS.enc.Utf8.parse(iv);</span></div><div class="line"><span class="undefined">            var encrypted = CryptoJS.AES.encrypt(data,key,</span></div><div class="line"><span class="undefined">                    &#123;</span></div><div class="line"><span class="undefined">                        iv:iv,</span></div><div class="line"><span class="undefined">                        mode:CryptoJS.mode.CBC,</span></div><div class="line"><span class="undefined">                        padding:CryptoJS.pad.Pkcs7</span></div><div class="line"><span class="undefined">                    &#125;);</span></div><div class="line"><span class="undefined">            return encrypted;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        function getDAesString(encrypted,key,iv)&#123;//解密</span></div><div class="line"><span class="undefined">            var key  = CryptoJS.enc.Hex.parse(key);</span></div><div class="line"><span class="undefined">            var iv   = CryptoJS.enc.Utf8.parse(iv);</span></div><div class="line"><span class="undefined">            var decrypted = CryptoJS.AES.decrypt(encrypted,key,</span></div><div class="line"><span class="undefined">                    &#123;</span></div><div class="line"><span class="undefined">                        iv:iv,</span></div><div class="line"><span class="undefined">                        mode:CryptoJS.mode.CBC,</span></div><div class="line"><span class="undefined">                        padding:CryptoJS.pad.Pkcs7</span></div><div class="line"><span class="undefined">                    &#125;);</span></div><div class="line"><span class="undefined">            return decrypted.toString(CryptoJS.enc.Utf8);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        function getAES()&#123; //加密</span></div><div class="line"><span class="undefined">            var data = document.getElementById("data-ipt").value;//明文</span></div><div class="line"><span class="undefined">            var key  = '12345678901234567890123456789012';  //密钥</span></div><div class="line"><span class="undefined">            var iv   = '1234567890123456';</span></div><div class="line"><span class="undefined">            var encrypted = getAesString(data,key,iv); //密文</span></div><div class="line"><span class="undefined">            document.getElementById("encrypted").innerHTML = encrypted;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        function getDAes()&#123;//解密</span></div><div class="line"><span class="undefined">            var encrypted = document.getElementById("encrypted").innerHTML; //密文</span></div><div class="line"><span class="undefined">            var key  = '12345678901234567890123456789012';</span></div><div class="line"><span class="undefined">            var iv   = '1234567890123456';</span></div><div class="line"><span class="undefined">            var decryptedStr = getDAesString(encrypted,key,iv);</span></div><div class="line"><span class="undefined">            document.getElementById("decrypted").innerHTML = decryptedStr;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>参考资料：<br><a href="https://blog.csdn.net/qq_28205153/article/details/55798628" target="_blank" rel="external">AES加密算法的详细介绍与实现</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;对称加密&quot;&gt;&lt;a href=&quot;#对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称加密&quot;&gt;&lt;/a&gt;对称加密&lt;/h3&gt;&lt;p&gt;加密和解密使用同一个密钥的方式成为共享密钥加密（Common key crypto system），也被成为对称密钥加密。&lt;br&gt;以共享的方式加密时必须将密钥也发送给对方。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://damon4u.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="密码学" scheme="https://damon4u.github.io/categories/%E7%AE%97%E6%B3%95/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="算法" scheme="https://damon4u.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>非对称加密与RSA算法</title>
    <link href="https://damon4u.github.io//blog/2018/10/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E4%B8%8ERSA%E7%AE%97%E6%B3%95.html"/>
    <id>https://damon4u.github.io//blog/2018/10/非对称加密与RSA算法.html</id>
    <published>2018-10-16T09:41:50.000Z</published>
    <updated>2018-10-22T14:34:19.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>公开密钥加密使用一对非对称的密钥。一把叫做 <strong>私有密钥</strong>（private key），另一把叫做 <strong>公开密钥</strong>（public key）。<br>顾名思义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。<br>使用公开密钥机密方式，发送密文的一方使用对方的公开密钥进行机密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。利用这种方式，不需要发送用来解密的私有密钥，也不必担心密钥被攻击者窃听而盗走。</p><a id="more"></a><h3 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h3><p>假设一下，我找了两个数字，一个是1，一个是2。我喜欢2这个数字，就保留起来，不告诉你们(私钥），然后我告诉大家，1是我的公钥。</p><p>我有一个文件，不能让别人看，我就用1加密了。别人找到了这个文件，但是他不知道2就是解密的私钥啊，所以他解不开，只有我可以用数字2，就是我的私钥，来解密。这样我就可以保护数据了。</p><p>我的好朋友x用我的公钥1加密了字符a，加密后成了b，放在网上。别人偷到了这个文件，但是别人解不开，因为别人不知道2就是我的私钥，只有我才能解密，解密后就得到a。这样，我们就可以传送加密的数据了。</p><h3 id="私钥签名"><a href="#私钥签名" class="headerlink" title="私钥签名"></a>私钥签名</h3><p>如果我用私钥加密一段数据（当然只有我可以用私钥加密，因为只有我知道2是我的私钥），结果所有的人都看到我的内容了，因为他们都知道我的公钥是1，那么这种加密有什么用处呢？</p><p>但是我的好朋友x说有人冒充我给他发信。怎么办呢？我把我要发的信，内容是c，用我的私钥2，加密，加密后的内容是d，发给x，再告诉他解密看是不是c。他用我的公钥1解密，发现果然是c。<br>这个时候，他会想到，能够用我的公钥解密的数据，必然是用我的私钥加的密。只有我知道我得私钥，因此他就可以确认确实是我发的东西。<br>这样我们就能确认发送方身份了。这个过程叫做数字签名。当然具体的过程要稍微复杂一些。用私钥来加密数据，用途就是数字签名。</p><p><strong>总结：</strong></p><ul><li>公钥和私钥是成对的，它们互相解密。</li><li>公钥加密，私钥解密。</li><li>私钥数字签名，公钥验证。</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>比如有两个用户Alice和Bob，Alice想把一段明文通过双钥加密的技术发送给Bob，Bob有一对公钥和私钥，那么加密解密的过程如下：</p><ol><li>Bob将他的公开密钥传送给Alice。</li><li>Alice用Bob的公开密钥加密她的消息，然后传送给Bob。</li><li>Bob用他的私人密钥解密Alice的消息。</li></ol><p>上面的过程可以用下图表示，Alice使用Bob的公钥进行加密，Bob用自己的私钥进行解密。<br><img src="/images/rsa1.gif" alt=""></p><h3 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h3><p>RSA公钥加密算法是1977年由Ron Rivest、Adi Shamirh和LenAdleman在（美国麻省理工学院）开发的。RSA取名来自开发他们三者的名字。RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。RSA算法基于一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。<br><img src="/images/rsa2.gif" alt=""></p><p>参考资料：<br><a href="https://blog.csdn.net/21aspnet/article/details/7249401#" target="_blank" rel="external">公钥，私钥和数字签名这样最好理解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;非对称加密&quot;&gt;&lt;a href=&quot;#非对称加密&quot; class=&quot;headerlink&quot; title=&quot;非对称加密&quot;&gt;&lt;/a&gt;非对称加密&lt;/h3&gt;&lt;p&gt;公开密钥加密使用一对非对称的密钥。一把叫做 &lt;strong&gt;私有密钥&lt;/strong&gt;（private key），另一把叫做 &lt;strong&gt;公开密钥&lt;/strong&gt;（public key）。&lt;br&gt;顾名思义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。&lt;br&gt;使用公开密钥机密方式，发送密文的一方使用对方的公开密钥进行机密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。利用这种方式，不需要发送用来解密的私有密钥，也不必担心密钥被攻击者窃听而盗走。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://damon4u.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="密码学" scheme="https://damon4u.github.io/categories/%E7%AE%97%E6%B3%95/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="算法" scheme="https://damon4u.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（六）依赖Dependencies</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AD%EF%BC%89%E4%BE%9D%E8%B5%96Dependencies.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（六）依赖Dependencies.html</id>
    <published>2018-10-12T09:41:50.000Z</published>
    <updated>2018-10-12T14:31:38.247Z</updated>
    
    <content type="html"><![CDATA[<p>你的插件可能会依赖其他插件，内置的、第三方的或者你自己的。为了引入这些依赖，需要执行如下步骤：</p><ul><li>如果插件时内置的，那么启动沙箱环境，在里面安装插件。</li><li>在 <strong>IntelliJ Platform SDK</strong> 中添加插件的jar包。打开 <strong>Project Structure</strong> 对话框，选择使用的SDK，点击加号选择要添加的插件jar包。如果是内置插件，那么插件jar包在主安装目录下的<code>plugins/&lt;pluginname&gt;</code>或者<code>plugins/&lt;pluginname&gt;/lib</code>目录下。如果是非内置插件，那么插件jar包在<code>Sandbox Home</code>指定的目录下的<code>config/plugins/&lt;pluginname&gt;</code>或者<code>config/plugins/&lt;pluginname&gt;/lib</code>内。</li><li>添加<code>&lt;depends&gt;</code>标签到<code>plugin.xml</code>中，将插件的ID作为标签值。如果不知道插件的ID，可以到指定插件的<code>plugin.xml</code>中查看。</li></ul><a id="more"></a><p>例如，我们的插件依赖<code>com.intellij.database</code>插件，那么我们需要将jar引入：<br><img src="/images/idea-plugin16.png" alt=""></p><p>然后在<code>plugin.xml</code>中声明：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">depends</span> <span class="attr">optional</span>=<span class="string">"true"</span>&gt;</span>com.intellij.database<span class="tag">&lt;/<span class="name">depends</span>&gt;</span></div></pre></td></tr></table></figure></p><p><code>optional</code>代表如果此插件没有安装，那么可以用，不过可能影响部分功能。</p><p>参考资料：<br><a href="https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_services.html" target="_blank" rel="external">Plugin Services</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你的插件可能会依赖其他插件，内置的、第三方的或者你自己的。为了引入这些依赖，需要执行如下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果插件时内置的，那么启动沙箱环境，在里面安装插件。&lt;/li&gt;
&lt;li&gt;在 &lt;strong&gt;IntelliJ Platform SDK&lt;/strong&gt; 中添加插件的jar包。打开 &lt;strong&gt;Project Structure&lt;/strong&gt; 对话框，选择使用的SDK，点击加号选择要添加的插件jar包。如果是内置插件，那么插件jar包在主安装目录下的&lt;code&gt;plugins/&amp;lt;pluginname&amp;gt;&lt;/code&gt;或者&lt;code&gt;plugins/&amp;lt;pluginname&amp;gt;/lib&lt;/code&gt;目录下。如果是非内置插件，那么插件jar包在&lt;code&gt;Sandbox Home&lt;/code&gt;指定的目录下的&lt;code&gt;config/plugins/&amp;lt;pluginname&amp;gt;&lt;/code&gt;或者&lt;code&gt;config/plugins/&amp;lt;pluginname&amp;gt;/lib&lt;/code&gt;内。&lt;/li&gt;
&lt;li&gt;添加&lt;code&gt;&amp;lt;depends&amp;gt;&lt;/code&gt;标签到&lt;code&gt;plugin.xml&lt;/code&gt;中，将插件的ID作为标签值。如果不知道插件的ID，可以到指定插件的&lt;code&gt;plugin.xml&lt;/code&gt;中查看。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（五）Service</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89Service.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（五）Service.html</id>
    <published>2018-10-12T08:41:50.000Z</published>
    <updated>2018-10-12T14:31:38.246Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA平台提供<code>service</code>的概念。一个<code>Service</code>组件是单例的，使用<code>ServiceManager</code>的<code>getService</code>方法获取。<br><code>Service</code>可以是一个类，也可以是一个接口，但如果是接口，必须有实现类。</p><a id="more"></a><p>有三种类型的service：</p><ul><li>application级别</li><li>project级别</li><li>module级别</li></ul><p>与<code>Action</code>类似新建类时，可以选择模板来创建<code>Service</code>。</p><p>注册：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">"com.intellij"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Declare the application level service --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">applicationService</span> <span class="attr">serviceInterface</span>=<span class="string">"Mypackage.MyApplicationService"</span> <span class="attr">serviceImplementation</span>=<span class="string">"Mypackage.MyApplicationServiceImpl"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Declare the project level service --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">projectService</span> <span class="attr">serviceInterface</span>=<span class="string">"Mypackage.MyProjectService"</span> <span class="attr">serviceImplementation</span>=<span class="string">"Mypackage.MyProjectServiceImpl"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如果不指定<code>serviceInterface</code>，那么跟<code>serviceImplementation</code>一样。<br>获取：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MyApplicationService applicationService = ServiceManager.getService(MyApplicationService.class);</div><div class="line"></div><div class="line">MyProjectService projectService = ServiceManager.getService(project, MyProjectService.class);</div><div class="line"></div><div class="line">MyModuleService moduleService = ModuleServiceManager.getService(<span class="keyword">module</span>, MyModuleService.class);</div></pre></td></tr></table></figure></p><p>参考资料：<br><a href="https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_services.html" target="_blank" rel="external">Plugin Services</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDEA平台提供&lt;code&gt;service&lt;/code&gt;的概念。一个&lt;code&gt;Service&lt;/code&gt;组件是单例的，使用&lt;code&gt;ServiceManager&lt;/code&gt;的&lt;code&gt;getService&lt;/code&gt;方法获取。&lt;br&gt;&lt;code&gt;Service&lt;/code&gt;可以是一个类，也可以是一个接口，但如果是接口，必须有实现类。&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（四）配置持久化</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%E9%85%8D%E7%BD%AE%E6%8C%81%E4%B9%85%E5%8C%96.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（四）配置持久化.html</id>
    <published>2018-10-11T10:41:50.000Z</published>
    <updated>2018-10-12T14:31:38.246Z</updated>
    
    <content type="html"><![CDATA[<p>很多插件都需要提供用户配置参数的入口，这里以<code>free-mybatis-plugin</code>插件为例，我们想要用户配置方法匹配模版，例如dao层中<code>insert</code>，<code>add</code>等关键字开头的方法在mapper中生成<code>insert</code>语句。</p><a id="more"></a><h3 id="创建GUI配置窗口"><a href="#创建GUI配置窗口" class="headerlink" title="创建GUI配置窗口"></a>创建GUI配置窗口</h3><p>IDEA中可以直接创建一个GUI窗口：</p><p><img src="/images/idea-plugin12.png" alt=""></p><p>弹出创建窗口：</p><p><img src="/images/idea-plugin13.png" alt=""></p><p>名字自定，layout默认使用GridLayoutManager即可。<br>然后就可以拖拽编辑UI界面了。<br>第一次用会觉得超级难用！在排版的时候，如果想新加一行或者一列，拖拽组件到原来行的边缘，释放后会自动新增加一行。</p><p><img src="/images/idea-plugin14.png" alt=""></p><p>给需要取值的组件填写<code>filed name</code>属性，这样在生成的类中会包含对应的成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisSettingForm</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> JTextField insertPatternTextField;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> JTextField deletePatternTextField;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> JTextField updatePatternTextField;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> JTextField selectPatternTextField;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> JPanel mainPanel;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> JComboBox modelComboBox;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="添加配置项"><a href="#添加配置项" class="headerlink" title="添加配置项"></a>添加配置项</h3><p>创建完GUI窗口后，需要在IDEA配置窗口中添加入口，那就需要实现<code>SearchableConfigurable</code>接口，并注册到<code>plugin.xml</code>中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfigurable</span> <span class="keyword">implements</span> <span class="title">SearchableConfigurable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 保存全局配置，</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> MybatisSetting mybatisSetting;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * GUI配置窗口</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> MybatisSettingForm mybatisSettingForm;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String separator = <span class="string">";"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Splitter splitter = Splitter.on(separator).omitEmptyStrings().trimResults();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Joiner joiner = Joiner.on(separator);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MybatisConfigurable</span><span class="params">()</span> </span>&#123;</div><div class="line">        mybatisSetting = MybatisSetting.getInstance();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 返回唯一id</span></div><div class="line"><span class="comment">     * 这个id要与xml中的id（如果指定）一致</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Mybatis"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 用户在setting对话框搜索时，启用的动作</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> option</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">enableSearch</span><span class="params">(String option)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 配置项名称</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Nls</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDisplayName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getId();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 帮助文档中的名称</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHelpTopic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getId();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 创建GUI组件</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JComponent <span class="title">createComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == mybatisSettingForm) &#123;</div><div class="line">            <span class="keyword">this</span>.mybatisSettingForm = <span class="keyword">new</span> MybatisSettingForm();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mybatisSettingForm.mainPanel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 判断配置内容有没有修改</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isModified</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mybatisSetting.getStatementGenerateModel().getIdentifier() != mybatisSettingForm.modelComboBox.getSelectedIndex()</div><div class="line">                || !joiner.join(INSERT_GENERATOR.getPatterns()).equals(mybatisSettingForm.insertPatternTextField.getText())</div><div class="line">                || !joiner.join(DELETE_GENERATOR.getPatterns()).equals(mybatisSettingForm.deletePatternTextField.getText())</div><div class="line">                || !joiner.join(UPDATE_GENERATOR.getPatterns()).equals(mybatisSettingForm.updatePatternTextField.getText())</div><div class="line">                || !joiner.join(SELECT_GENERATOR.getPatterns()).equals(mybatisSettingForm.selectPatternTextField.getText());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 用户修改配置后点击确认</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> ConfigurationException</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">()</span> <span class="keyword">throws</span> ConfigurationException </span>&#123;</div><div class="line">        mybatisSetting.setStatementGenerateModel(GenerateModel.getInstance(mybatisSettingForm.modelComboBox.getSelectedIndex()));</div><div class="line">        INSERT_GENERATOR.setPatterns(Sets.newHashSet(splitter.split(mybatisSettingForm.insertPatternTextField.getText())));</div><div class="line">        DELETE_GENERATOR.setPatterns(Sets.newHashSet(splitter.split(mybatisSettingForm.deletePatternTextField.getText())));</div><div class="line">        UPDATE_GENERATOR.setPatterns(Sets.newHashSet(splitter.split(mybatisSettingForm.updatePatternTextField.getText())));</div><div class="line">        SELECT_GENERATOR.setPatterns(Sets.newHashSet(splitter.split(mybatisSettingForm.selectPatternTextField.getText())));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 重置配置</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        mybatisSettingForm.modelComboBox.setSelectedIndex(mybatisSetting.getStatementGenerateModel().getIdentifier());</div><div class="line">        mybatisSettingForm.insertPatternTextField.setText(joiner.join(INSERT_GENERATOR.getPatterns()));</div><div class="line">        mybatisSettingForm.deletePatternTextField.setText(joiner.join(DELETE_GENERATOR.getPatterns()));</div><div class="line">        mybatisSettingForm.updatePatternTextField.setText(joiner.join(UPDATE_GENERATOR.getPatterns()));</div><div class="line">        mybatisSettingForm.selectPatternTextField.setText(joiner.join(SELECT_GENERATOR.getPatterns()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 销毁GUI组件</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disposeUIResources</span><span class="params">()</span> </span>&#123;</div><div class="line">        mybatisSettingForm.mainPanel = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之后在<code>plugin.xml</code>中注册：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">"com.intellij"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 插件配置窗口 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">applicationConfigurable</span> <span class="attr">instance</span>=<span class="string">"com.mybatis.setting.MybatisConfigurable"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- applicationService 这个是插件配置文件的持久化 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">applicationService</span> <span class="attr">serviceInterface</span>=<span class="string">"com.xxx.mybatis.setting.MybatisSetting"</span></span></div><div class="line"><span class="tag">                        <span class="attr">serviceImplementation</span>=<span class="string">"com.xxx.mybatis.setting.MybatisSetting"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></div></pre></td></tr></table></figure></p><p>这样就可以在IDEA setting窗口中见到我们的配置项了：<br><img src="/images/idea-plugin15.png" alt=""></p><h3 id="持久化配置"><a href="#持久化配置" class="headerlink" title="持久化配置"></a>持久化配置</h3><p>上面我们说了如何让用户修改插件配置，那当IDEA重启时，我们想让配置持久化到文件中，可以实现<code>PersistentStateComponent</code>接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@State</span>(</div><div class="line">        name = <span class="string">"MybatisSettings"</span>,</div><div class="line">        storages = <span class="meta">@Storage</span>(<span class="string">"mybatis.xml"</span>))</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisSetting</span> <span class="keyword">implements</span> <span class="title">PersistentStateComponent</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> GenerateModel statementGenerateModel;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> Gson();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Type gsonTypeToken = <span class="keyword">new</span> TypeToken&lt;Set&lt;String&gt;&gt;() &#123;</div><div class="line">    &#125;.getType();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MybatisSetting</span><span class="params">()</span> </span>&#123;</div><div class="line">        statementGenerateModel = GenerateModel.START_WITH_MODEL;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MybatisSetting <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ServiceManager.getService(MybatisSetting.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * IDEA关闭时，将内存中配置持久化到xml中</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Element <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        Element element = <span class="keyword">new</span> Element(<span class="string">"MybatisSettings"</span>);</div><div class="line">        element.setAttribute(INSERT_GENERATOR.getId(), gson.toJson(INSERT_GENERATOR.getPatterns()));</div><div class="line">        element.setAttribute(DELETE_GENERATOR.getId(), gson.toJson(DELETE_GENERATOR.getPatterns()));</div><div class="line">        element.setAttribute(UPDATE_GENERATOR.getId(), gson.toJson(UPDATE_GENERATOR.getPatterns()));</div><div class="line">        element.setAttribute(SELECT_GENERATOR.getId(), gson.toJson(SELECT_GENERATOR.getPatterns()));</div><div class="line">        element.setAttribute(<span class="string">"statementGenerateModel"</span>, String.valueOf(statementGenerateModel.getIdentifier()));</div><div class="line">        <span class="keyword">return</span> element;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * IDEA打开时，从xml中读取配置</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> state</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadState</span><span class="params">(Element state)</span> </span>&#123;</div><div class="line">        loadState(state, INSERT_GENERATOR);</div><div class="line">        loadState(state, DELETE_GENERATOR);</div><div class="line">        loadState(state, UPDATE_GENERATOR);</div><div class="line">        loadState(state, SELECT_GENERATOR);</div><div class="line">        statementGenerateModel = GenerateModel.getInstance(state.getAttributeValue(<span class="string">"statementGenerateModel"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadState</span><span class="params">(Element state, StatementGenerator generator)</span> </span>&#123;</div><div class="line">        String attribute = state.getAttributeValue(generator.getId());</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != attribute) &#123;</div><div class="line">            generator.setPatterns((Set&lt;String&gt;) gson.fromJson(attribute, gsonTypeToken));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> GenerateModel <span class="title">getStatementGenerateModel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> statementGenerateModel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatementGenerateModel</span><span class="params">(GenerateModel statementGenerateModel)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.statementGenerateModel = statementGenerateModel;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中<code>@State</code>注解指明了xml中根元素的名字和xml文件名称。<br>配置文件储存位置：<code>/Library/Caches/IntelliJIdea2018.2/plugins-sandbox/config/options/mybatis.xml</code><br>即在沙箱目录下的<code>/config/options/mybatis.xml</code>中。<br>当然，如果插件正式发布安装后，会保存到正式库目录中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多插件都需要提供用户配置参数的入口，这里以&lt;code&gt;free-mybatis-plugin&lt;/code&gt;插件为例，我们想要用户配置方法匹配模版，例如dao层中&lt;code&gt;insert&lt;/code&gt;，&lt;code&gt;add&lt;/code&gt;等关键字开头的方法在mapper中生成&lt;code&gt;insert&lt;/code&gt;语句。&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（三）扩展点</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%E6%89%A9%E5%B1%95%E7%82%B9.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（三）扩展点.html</id>
    <published>2018-10-11T08:41:50.000Z</published>
    <updated>2018-10-12T14:31:38.245Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA提供扩展点的概念，这样我们可以跟其他插件或者IDEA本身交互，例如对IDEA功能进行扩展。</p><a id="more"></a><h3 id="扩展点Extension-points"><a href="#扩展点Extension-points" class="headerlink" title="扩展点Extension points"></a>扩展点Extension points</h3><p>如果希望你的插件可以被其他插件扩展功能，那么可以在插件中声明<code>extension points</code>。每个扩展点定义一个可以访问它的类或者接口。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">extensionPoints</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">extensionPoint</span> <span class="attr">name</span>=<span class="string">"MyExtensionPoint1"</span> <span class="attr">beanClass</span>=<span class="string">"MyPlugin.MyBeanClass1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">extensionPoint</span> <span class="attr">name</span>=<span class="string">"MyExtensionPoint2"</span> <span class="attr">interface</span>=<span class="string">"MyPlugin.MyInterface"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">extensionPoints</span>&gt;</span></div></pre></td></tr></table></figure></p><ul><li><code>interface</code>属性设置一个接口，扩展时需要实现此接口</li><li><code>beanClass</code>属性设置一个bean类，包含使用<code>@Attribute</code>注解标注的属性。</li></ul><p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanClass1</span> <span class="keyword">extends</span> <span class="title">AbstractExtensionPointBean</span> </span>&#123;</div><div class="line">  <span class="meta">@Attribute</span>(<span class="string">"key"</span>)</div><div class="line">  <span class="keyword">public</span> String key;</div><div class="line"></div><div class="line">  <span class="meta">@Attribute</span>(<span class="string">"implementationClass"</span>)</div><div class="line">  <span class="keyword">public</span> String implementationClass;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> key;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getClass</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> implementationClass;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果要扩展它，需要包含<code>key</code>和<code>implementationClass</code>属性。（见下文）</p><h3 id="扩展Extensions"><a href="#扩展Extensions" class="headerlink" title="扩展Extensions"></a>扩展Extensions</h3><p>如果希望扩展别的插件或者IDEA的功能，那么可以声明<code>extensions</code>。<br>在注册<code>extensions</code>元素时，需要设置<code>defaultExtensionNs</code>属性为如下两个值之一：</p><ul><li><code>com.intellij</code>：扩展IDEA功能</li><li><code>{ID of a plugin}</code>：扩展其他插件的功能</li></ul><p>例如，我们要扩展IDEA的<code>appStarter</code>和<code>applicationConfigurable</code>扩展点，还有上面我们声明的<code>MyExtensionPoint1</code>扩展点：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Declare extensions to access extension points in the IntelliJ Platform.</span></div><div class="line"><span class="comment">     These extension points have been declared using the "interface" attribute.</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">"com.intellij"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">appStarter</span> <span class="attr">implementation</span>=<span class="string">"MyTestPackage.MyTestExtension1"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">applicationConfigurable</span> <span class="attr">implementation</span>=<span class="string">"MyTestPackage.MyTestExtension2"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Declare extensions to access extension points in a custom plugin</span></div><div class="line"><span class="comment">     The MyExtensionPoint1 extension point has been declared using *beanClass* attribute.</span></div><div class="line"><span class="comment">--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">"MyPluginID"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">MyExtensionPoint1</span> <span class="attr">key</span>=<span class="string">"keyValue"</span> <span class="attr">implementationClass</span>=<span class="string">"MyTestPackage.MyClassImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">MyExtensionPoint1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="IDEA扩展点列表"><a href="#IDEA扩展点列表" class="headerlink" title="IDEA扩展点列表"></a>IDEA扩展点列表</h3><ul><li><a href="https://upsource.jetbrains.com/idea-ce/file/idea-ce-d00d8b4ae3ed33097972b8a4286b336bf4ffcfab/platform/platform-resources/src/META-INF/LangExtensionPoints.xml" target="_blank" rel="external">LangExtensionPoints.xml</a></li><li><a href="https://upsource.jetbrains.com/idea-ce/file/idea-ce-d00d8b4ae3ed33097972b8a4286b336bf4ffcfab/platform/platform-resources/src/META-INF/PlatformExtensionPoints.xml" target="_blank" rel="external">PlatformExtensionPoints.xml</a></li><li><a href="https://upsource.jetbrains.com/idea-ce/file/idea-ce-d00d8b4ae3ed33097972b8a4286b336bf4ffcfab/platform/platform-resources/src/META-INF/VcsExtensionPoints.xml" target="_blank" rel="external">VcsExtensionPoints.xml</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDEA提供扩展点的概念，这样我们可以跟其他插件或者IDEA本身交互，例如对IDEA功能进行扩展。&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（二）DOM操作XML文件</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89DOM%E6%93%8D%E4%BD%9CXML%E6%96%87%E4%BB%B6.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（二）DOM操作XML文件.html</id>
    <published>2018-10-10T08:41:50.000Z</published>
    <updated>2018-10-12T14:31:38.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="传统XML读写操作的弊端"><a href="#传统XML读写操作的弊端" class="headerlink" title="传统XML读写操作的弊端"></a>传统XML读写操作的弊端</h3><p>假如我们有一个xml文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">foo</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bar</span>&gt;</span>42<span class="tag">&lt;/<span class="name">bar</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bar</span>&gt;</span>239<span class="tag">&lt;/<span class="name">bar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">foo</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure></p><p>我们想读取第二个bar元素的值239，我们可能会直接这样写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">file.getDocument().getRootTag().findFirstSubTag(<span class="string">"foo"</span>).</div><div class="line">findSubTags(<span class="string">"bar"</span>)[<span class="number">1</span>].getValue().getTrimmedText()</div></pre></td></tr></table></figure></p><p>但这样是很危险的，因为任何一个元素都可能产生空指针。所以需要这样写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">XmlFile file = ...;</div><div class="line"><span class="keyword">final</span> XmlDocument document = file.getDocument();</div><div class="line"><span class="keyword">if</span> (document != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">final</span> XmlTag rootTag = document.getRootTag();</div><div class="line">    <span class="keyword">if</span> (rootTag != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> XmlTag foo = rootTag.findFirstSubTag(<span class="string">"foo"</span>);</div><div class="line">        <span class="keyword">if</span> (foo != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> XmlTag[] bars = foo.findSubTags(<span class="string">"bar"</span>);</div><div class="line">            <span class="keyword">if</span> (bars.length &gt; <span class="number">1</span>) &#123;</div><div class="line">                String s = bars[<span class="number">1</span>].getValue().getTrimmedText();</div><div class="line">                <span class="comment">// do something</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样的写法看起来很臃肿，有一种更好的方案是使用DOM。</p><a id="more"></a><h3 id="使用DOM操作XML"><a href="#使用DOM操作XML" class="headerlink" title="使用DOM操作XML"></a>使用DOM操作XML</h3><p>用 <strong>Document Object Model</strong> (DOM) 来改写上面的写法。<br>首先需要继承<code>DomElement</code>，为每一个xml元素创建接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">com</span>.<span class="title">intellij</span>.<span class="title">util</span>.<span class="title">xml</span>.<span class="title">DomElement</span> </span>&#123;</div><div class="line">    <span class="function">Foo <span class="title">getFoo</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">com</span>.<span class="title">intellij</span>.<span class="title">util</span>.<span class="title">xml</span>.<span class="title">DomElement</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Bar&gt; <span class="title">getBars</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Bar</span> <span class="keyword">extends</span> <span class="title">com</span>.<span class="title">intellij</span>.<span class="title">util</span>.<span class="title">xml</span>.<span class="title">DomElement</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">getValue</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来需要继承<code>DomFileDescription</code>，构造函数中传入根元素名字和根元素接口，并注册到扩展点<code>com.intellij.dom.fileDescription</code>中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDescription</span> <span class="keyword">extends</span> <span class="title">DomFileDescription</span>&lt;<span class="title">Root</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDescription</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Root.class, <span class="string">"root"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注册：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">extensions</span> <span class="attr">defaultExtensionNs</span>=<span class="string">"com.intellij"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dom.fileDescription</span> <span class="attr">implementation</span>=<span class="string">"MyDescription"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></div></pre></td></tr></table></figure></p><p>接下来就可以只用<code>DomManager</code>获取元素了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">DomManager manager = DomManager.getDomManager(project);</div><div class="line">Root root = manager.getFileElement(file).getRootElement();</div><div class="line">List&lt;Bar&gt; bars = root.getFoo().getBars();</div><div class="line"><span class="keyword">if</span> (bars.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">    String s = bars.get(<span class="number">1</span>).getValue();</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>有时候我们想要从项目的xml文件中找到某个<code>DomElement</code>进行操作，可以使用<code>DomService</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &lt;T extends DomElement&gt; <span class="function">Collection&lt;T&gt; <span class="title">findDomElements</span><span class="params">(@NotNull Project project, Class&lt;T&gt; clazz)</span> </span>&#123;</div><div class="line">    GlobalSearchScope scope = GlobalSearchScope.allScope(project);</div><div class="line">    List&lt;DomFileElement&lt;T&gt;&gt; elements = DomService.getInstance().getFileElements(clazz, project, scope);</div><div class="line">    <span class="keyword">return</span> Collections2.transform(elements, DomFileElement::getRootElement);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>参考资料：<br><a href="https://www.jetbrains.org/intellij/sdk/docs/reference_guide/frameworks_and_external_apis/xml_dom_api.html" target="_blank" rel="external">XML DOM API</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;传统XML读写操作的弊端&quot;&gt;&lt;a href=&quot;#传统XML读写操作的弊端&quot; class=&quot;headerlink&quot; title=&quot;传统XML读写操作的弊端&quot;&gt;&lt;/a&gt;传统XML读写操作的弊端&lt;/h3&gt;&lt;p&gt;假如我们有一个xml文件如下：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;root&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;foo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bar&lt;/span&gt;&amp;gt;&lt;/span&gt;42&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bar&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;bar&lt;/span&gt;&amp;gt;&lt;/span&gt;239&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;bar&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;foo&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;root&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们想读取第二个bar元素的值239，我们可能会直接这样写：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;file.getDocument().getRootTag().findFirstSubTag(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;).&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;findSubTags(&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].getValue().getTrimmedText()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但这样是很危险的，因为任何一个元素都可能产生空指针。所以需要这样写：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;XmlFile file = ...;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; XmlDocument document = file.getDocument();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (document != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; XmlTag rootTag = document.getRootTag();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rootTag != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; XmlTag foo = rootTag.findFirstSubTag(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (foo != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; XmlTag[] bars = foo.findSubTags(&lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (bars.length &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                String s = bars[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].getValue().getTrimmedText();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// do something&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样的写法看起来很臃肿，有一种更好的方案是使用DOM。&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（一）环境搭建与第一个工程</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（一）环境搭建与第一个工程.html</id>
    <published>2018-10-09T08:41:50.000Z</published>
    <updated>2018-10-12T14:31:38.264Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>官方推荐使用社区版IDEA开发插件，因为方便调试核心代码。</p><blockquote><p>You may use IntelliJ IDEA Ultimate as an alternative, but debugging the core code will only work with the Community Edition.</p></blockquote><p>我下载的版本是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">IntelliJ IDEA 2018.2.4 (Community Edition)</div><div class="line">Build #IC-182.4505.22, built on September 18, 2018</div></pre></td></tr></table></figure></p><p>那么在<a href="https://github.com/JetBrains/intellij-community/tree/182.4505" target="_blank" rel="external">IntelliJ IDEA Community Edition</a> 下载对应版本的源码，解压后为<code>intellij-community-182.4505</code>。<br><a id="more"></a><br>首先需要创建一个IntelliJ Platform SDK。<br>打开项目配置窗口，<strong>File | Project Structure</strong>，选择SDKs，点击添加按钮，选择IntelliJ Platform Plugin SDK：<br><img src="/images/idea-plugin1.png" alt=""><br>默认使用弹出的IDEA社区版根目录即可，点击打开：<br><img src="/images/idea-plugin2.png" alt=""><br>然后会让选择JDK版本，使用1.8：<br><img src="/images/idea-plugin3.png" alt=""><br>最后给SDK配置源码路径，选择Sourcepath，点击加号添加，选择刚才下载解压的intellij-community-182.4505文件夹，添加全部源码：<br><img src="/images/idea-plugin4.png" alt=""></p><p>这样，开发IDEA插件的SDK环境就创建好了，注意其中有个路径是Sandbox Home，即沙箱位置：/Users/damon4u/Library/Caches/IdeaIC2018.2/plugins-sandbox<br>我们在运行插件时，IDEA会再运行一个沙箱环境IDEA，因为IDEA本身也就是一个java环境，这个路径会存放沙箱环境的配置数据，如果发现调试过程中出现类似缓存现象，新特性不生效，那么可以手动删除这里的数据。</p><h3 id="第一个工程"><a href="#第一个工程" class="headerlink" title="第一个工程"></a>第一个工程</h3><p>创建工程时选择IntelliJ Platform Plugin：<br><img src="/images/idea-plugin5.png" alt=""><br>新创建的工程结构如下：<br><img src="/images/idea-plugin6.png" alt=""><br>src目录下放置源文件，plugin.xml用来注册组件。</p><p>下面创建一个官方给的简单例子，在菜单栏添加一个选项，点击后弹出一个窗口。<br>首先需要创建一个Action，继承<code>AnAction</code>类。通过实现<code>actionPerformed</code>方法实现功能。<br>右键创建一个Action：<br><img src="/images/idea-plugin7.png" alt=""><br>然后输入信息：<br><img src="/images/idea-plugin8.png" alt=""></p><ul><li>Action ID：Action的唯一ID，推荐使用<code>PluginName.ID</code>。</li><li>Class Name：创建的Action类的名字。</li><li>Name：标题栏中选项文案。</li><li>Description：可选，IDEA状态栏的提示文案。</li><li>Add to Group：Groups是Action要放到哪个组里，比如主菜单栏<code>MainMenu</code>，Window下拉菜单栏<code>WindowMenu</code>等。Actions和Anchor配合使用，可以选择放在下拉菜单中的开始，最后，或者某个已有选项的前面或者后面。</li><li>Keyboard Shortcuts：配置快捷键。</li></ul><p>IDEA帮我们创建了一个<code>SayHelloAction</code>，我们需要实现<code>actionPerformed</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHelloAction</span> <span class="keyword">extends</span> <span class="title">AnAction</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(AnActionEvent e)</span> </span>&#123;</div><div class="line">        <span class="comment">// alter to say hello.</span></div><div class="line">        Messages.showMessageDialog(<span class="string">"Hello!"</span>, <span class="string">"Information"</span>, Messages.getInformationIcon());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>IDEA已经帮我们把创建的Action注册到<code>plugin.xml</code>中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">actions</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Add your actions here --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">id</span>=<span class="string">"DemoPlugin.SayHello"</span> <span class="attr">class</span>=<span class="string">"com.damon4u.idea.action.SayHelloAction"</span> <span class="attr">text</span>=<span class="string">"Say Hello!"</span></span></div><div class="line"><span class="tag">          <span class="attr">description</span>=<span class="string">"A demo plugin to say hello."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add-to-group</span> <span class="attr">group-id</span>=<span class="string">"WindowMenu"</span> <span class="attr">anchor</span>=<span class="string">"first"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">actions</span>&gt;</span></div></pre></td></tr></table></figure></p><p>这样第一个工程就写完了。点击运行按钮，启动沙箱环境。<br>在Window下拉菜单中点击我们的Say Hello选项，弹出提示框就算成功了。<br><img src="/images/idea-plugin11.png" alt=""></p><h3 id="关于Mac沙箱环境菜单栏触发问题"><a href="#关于Mac沙箱环境菜单栏触发问题" class="headerlink" title="关于Mac沙箱环境菜单栏触发问题"></a>关于Mac沙箱环境菜单栏触发问题</h3><p>在Mac Mini（macOS High Sierra 10.13.6）运行插件时，点击菜单栏并没有反应，但是在MacBook Pro上运行时就没问题。<br>试着换了一下触发位置，比如绑定到generate弹窗中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">add-to-group</span> <span class="attr">group-id</span>=<span class="string">"GenerateGroup"</span> <span class="attr">anchor</span>=<span class="string">"first"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>也可以触发。<br>后来发现，沙盒环境下自带的菜单栏点击都没有反应。。。后来在<a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/360000005390-Action-is-not-triggered-from-main-menu" target="_blank" rel="external">Action is not triggered from main menu</a> 中找到了答案。<br>在运行沙箱环境时，添加参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Dapple.laf.useScreenMenuBar=false</div></pre></td></tr></table></figure></p><p><img src="/images/idea-plugin9.png" alt=""><br>这个参数是为了让Mac下的Java桌面程序的菜单栏不放到系统顶部，而是在应用自身顶部：<br><img src="/images/idea-plugin10.png" alt=""></p><h3 id="打包插件"><a href="#打包插件" class="headerlink" title="打包插件"></a>打包插件</h3><p>插件开发好后，可以将它打包成jar包或者zip包（包含依赖类库），供别人使用。<br>选择 <strong>Build | Prepare Plugin Module <module name=""> for Deployment</module></strong>.<br>这样就会打包出一个jar包。<br>在插件中选择安装本地插件，就能使用了。</p><p>参考资料<br><a href="https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started.html" target="_blank" rel="external">官方文档Creating Your First Plugin</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;p&gt;官方推荐使用社区版IDEA开发插件，因为方便调试核心代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You may use IntelliJ IDEA Ultimate as an alternative, but debugging the core code will only work with the Community Edition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我下载的版本是&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;IntelliJ IDEA 2018.2.4 (Community Edition)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Build #IC-182.4505.22, built on September 18, 2018&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么在&lt;a href=&quot;https://github.com/JetBrains/intellij-community/tree/182.4505&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IntelliJ IDEA Community Edition&lt;/a&gt; 下载对应版本的源码，解压后为&lt;code&gt;intellij-community-182.4505&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>lambda表达式</title>
    <link href="https://damon4u.github.io//blog/2018/09/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E6%B5%81%E6%93%8D%E4%BD%9C.html"/>
    <id>https://damon4u.github.io//blog/2018/09/lambda表达式和流操作.html</id>
    <published>2018-09-29T08:41:50.000Z</published>
    <updated>2018-09-29T04:47:14.822Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是λ表达式"><a href="#什么是λ表达式" class="headerlink" title="什么是λ表达式"></a>什么是λ表达式</h3><p>λ表达式本质上是一个匿名方法。让我们来看下面这个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>转成λ表达式后是这个样子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y;</div></pre></td></tr></table></figure></p><p>参数类型也可以省略，Java编译器会根据上下文推断出来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回两数之和</span></div><div class="line">(x, y) -&gt; x + y;</div></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//显式指明返回值</span></div><div class="line">(x, y) -&gt; &#123; <span class="keyword">return</span> x + y; &#125;</div></pre></td></tr></table></figure></p><p>可见λ表达式有三部分组成：参数列表，箭头(<code>-&gt;</code>)，以及一个表达式或语句块。<br>下面这个例子里的λ表达式没有参数，也没有返回值（相当于一个方法接受0个参数，返回<code>void</code>，其实就是<code>Runnable</code>里<code>run</code>方法的一个实现）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() -&gt; &#123; System.out.println(<span class="string">"Hello Lambda!"</span>); &#125;</div></pre></td></tr></table></figure></p><p>如果只有一个参数且可以被Java推断出类型，那么参数列表的括号也可以省略：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c -&gt; &#123; <span class="keyword">return</span> c.size(); &#125;</div></pre></td></tr></table></figure></p><a id="more"></a><h3 id="λ表达式的类型（它是Object吗？）"><a href="#λ表达式的类型（它是Object吗？）" class="headerlink" title="λ表达式的类型（它是Object吗？）"></a>λ表达式的类型（它是Object吗？）</h3><p>λ表达式可以被当做是一个<code>Object</code>(注意措辞)。λ表达式的类型，叫做“目标类型(<code>target type</code>)”。λ表达式的目标类型是“函数接口(<code>functional interface</code>)”，这是JDK8新引入的概念。<br>它的定义是：一个接口，如果 <strong>只有一个</strong> 显式声明的抽象方法，那么它就是一个函数接口。 一般用<code>@FunctionalInterface</code>标注出来(也可以不标)。举例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>; &#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123; <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>; &#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActionListener</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>; &#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>; <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>; &#125;</div></pre></td></tr></table></figure></p><p>注意最后这个<code>Comparator</code>接口。它里面声明了两个方法，貌似不符合函数接口的定义，但它的确是函数接口。这是因为<code>equals</code>方法是<code>Object</code>的，所有的接口都会声明<code>Object</code>的<code>public</code>方法——虽然大多是隐式的。<br>所以，<code>Comparator</code>显式的声明了<code>equals</code>不影响它依然是个函数接口。你可以用一个λ表达式为一个函数接口赋值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Runnable r1 = () -&gt; &#123;System.out.println(<span class="string">"Hello Lambda!"</span>);&#125;;</div></pre></td></tr></table></figure></p><p>然后再赋值给一个<code>Object</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object obj = r1;</div></pre></td></tr></table></figure></p><p>但却不能这样干：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ERROR! Object is not a functional interface!</span></div><div class="line">Object obj = () -&gt; &#123;System.out.println(<span class="string">"Hello Lambda!"</span>);&#125;;</div></pre></td></tr></table></figure></p><p>必须显式的转型成一个函数接口才可以：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// correct</span></div><div class="line">Object o = (Runnable) () -&gt; &#123; System.out.println(<span class="string">"hi"</span>); &#125;;</div></pre></td></tr></table></figure></p><p>一个λ表达式只有在转型成一个函数接口后才能被当做<code>Object</code>使用。所以下面这句也不能编译：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//错误! 目标类型不明</span></div><div class="line">System.out.println( () -&gt; &#123;&#125; );</div></pre></td></tr></table></figure></p><p>必须先转型:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确</span></div><div class="line">System.out.println( (Runnable)() -&gt; &#123;&#125; );</div></pre></td></tr></table></figure></p><p>假设你自己写了一个函数接口，长的跟<code>Runnable</code>一模一样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyRunnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>那么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Runnable r1 =    () -&gt; &#123;System.out.println(<span class="string">"Hello Lambda!"</span>);&#125;;</div><div class="line">MyRunnable2 r2 = () -&gt; &#123;System.out.println(<span class="string">"Hello Lambda!"</span>);&#125;;</div></pre></td></tr></table></figure></p><p>都是正确的写法。这说明一个λ表达式可以有多个目标类型（函数接口），只要函数匹配成功即可。但需注意一个λ表达式必须至少有一个目标类型。JDK预定义了很多函数接口以避免用户重复定义。<br>最典型的是<code>Function</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;  </div><div class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个接口代表一个函数，接受一个<code>T</code>类型的参数，并返回一个<code>R</code>类型的返回值。另一个预定义函数接口叫做<code>Consumer</code>，跟<code>Function</code>的唯一不同是它没有返回值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>还有一个<code>Predicate</code>，用来判断某项条件是否满足。经常用来进行筛滤操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>综上所述，一个λ表达式其实就是定义了一个匿名方法，只不过这个方法必须符合至少一个函数接口。</p><h3 id="λ表达式的使用"><a href="#λ表达式的使用" class="headerlink" title="λ表达式的使用"></a>λ表达式的使用</h3><p>λ表达式用在何处<br><strong>λ表达式主要用于替换以前广泛使用的内部匿名类，各种回调，比如事件响应器、传入<code>Thread</code>类的<code>Runnable</code>等。</strong><br>看下面的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Thread oldSchool = <span class="keyword">new</span> Thread( <span class="keyword">new</span> Runnable () &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"This is from an anonymous class."</span>);</div><div class="line">    &#125;</div><div class="line">&#125; );</div><div class="line">Thread gaoDuanDaQiShangDangCi = <span class="keyword">new</span> Thread( () -&gt; &#123;</div><div class="line">    System.out.println(<span class="string">"This is from an anonymous method (lambda exp)."</span>);</div><div class="line">&#125; );</div></pre></td></tr></table></figure></p><p>注意第二个线程里的λ表达式，你并不需要显式地把它转成一个<code>Runnable</code>，因为Java能根据上下文自动推断出来：一个<code>Thread</code>的构造函数接受一个<code>Runnable</code>参数，而传入的λ表达式正好符合其<code>run()</code>函数，所以Java编译器推断它为<code>Runnable</code>。</p><p>从形式上看，λ表达式只是为你节省了几行代码。但将λ表达式引入Java的动机并不仅仅为此。Java8有一个短期目标和一个长期目标。短期目标是：配合“集合类批处理操作”的内部迭代和并行处理(下面将要讲到); 长期目标是将Java向函数式编程语言这个方向引导(并不是要完全变成一门函数式编程语言，只是让它有更多的函数式编程语言的特性)，也正是由于这个原因，Oracle并没有简单地使用内部类去实现λ表达式，而是使用了一种更动态、更灵活、易于将来扩展和改变的策略(<code>invokedynamic</code>)。</p><p>λ表达式与集合类批处理操作(或者叫块操作)<br>集合类的批处理操作是Java8的另一个重要特性，它与λ表达式的配合使用乃是Java8的最主要特性。集合类的批处理操作API的目的是实现集合类的”内部迭代”，并期望充分利用现代多核CPU进行并行计算。</p><p>Java8之前集合类的迭代(<code>Iteration</code>)都是外部的，即客户代码。而内部迭代意味着改由Java类库来进行迭代，而不是客户代码。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 外部迭代</span></div><div class="line"><span class="keyword">for</span>(Object o: list) &#123;</div><div class="line">    System.out.println(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以写成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//forEach函数实现内部迭代</span></div><div class="line">list.forEach(o -&gt; &#123;System.out.println(o);&#125;);</div></pre></td></tr></table></figure></p><p>集合类(包括<code>List</code>)现在都有一个<code>forEach</code>方法，对元素进行迭代(遍历)，所以我们不需要再写<code>for循环</code>了。<code>forEach</code>方法接受一个函数接口<code>Consumer</code>做参数，所以可以使用λ表达式。</p><p>这种内部迭代方法广泛存在于各种语言，如C++的STL算法库、Python、ruby、Scala等。</p><p>Java8为集合类引入了另一个重要概念：流(<code>stream</code>)。一个流通常以一个集合类实例为其数据源，然后在其上定义各种操作。流的API设计使用了管道(<code>pipelines</code>)模式。对流的一次操作会返回另一个流。如同IO的API或者<code>StringBuffer</code>的<code>append</code>方法那样，从而多个不同的操作可以在一个语句里串起来。看下面的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Shape&gt; shapes = ...</div><div class="line">shapes.stream()</div><div class="line">  .filter(s -&gt; s.getColor() == BLUE)</div><div class="line">  .forEach(s -&gt; s.setColor(RED));</div></pre></td></tr></table></figure></p><p>首先调用<code>stream</code>方法，以集合类对象shapes里面的元素为数据源，生成一个流。然后在这个流上调用<code>filter</code>方法，挑出蓝色的，返回另一个流。最后调用<code>forEach</code>方法将这些蓝色的物体喷成红色。(<code>forEach</code>方法不再返回流，而是一个终端方法，类似于<code>StringBuffer</code>在调用若干<code>append</code>之后的那个<code>toString</code>)</p><p><code>filter</code>方法的参数是<code>Predicate</code>类型，<code>forEach</code>方法的参数是<code>Consumer</code>类型，它们都是函数接口，所以可以使用λ表达式。</p><p>还有一个方法叫<code>parallelStream()</code>，顾名思义它和<code>stream()</code>一样，只不过指明要并行处理，以期充分利用现代CPU的多核特性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 或shapes.stream().parallel()</span></div><div class="line">shapes.parallelStream();</div></pre></td></tr></table></figure></p><p>来看更多的例子。下面是典型的大数据处理方法，<code>Filter-Map-Reduce</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出一个String类型的数组，找出其中所有不重复的素数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">distinctPrimary</span><span class="params">(String... numbers)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; l = Arrays.asList(numbers);</div><div class="line">    List&lt;Integer&gt; r = l.stream()</div><div class="line">            .map(e -&gt; <span class="keyword">new</span> Integer(e))</div><div class="line">            .filter(e -&gt; Primes.isPrime(e))</div><div class="line">            .distinct()</div><div class="line">            .collect(Collectors.toList());</div><div class="line">    System.out.println(<span class="string">"distinctPrimary result is: "</span> + r);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>第一步: 传入一系列<code>String</code>(假设都是合法的数字)，转成一个<code>List</code>，然后调用<code>stream()</code>方法生成流。</li><li>第二步: 调用流的<code>map</code>方法把每个元素由<code>String</code>转成<code>Integer</code>，得到一个新的流。<code>map</code>方法接受一个<code>Function</code>类型的参数，上面介绍了，<code>Function</code>是个函数接口，所以这里用λ表达式。</li><li>第三步: 调用流的<code>filter</code>方法，过滤那些不是素数的数字，并得到一个新流。<code>filter</code>方法接受一个<code>Predicate</code>类型的参数，上面介绍了，<code>Predicate</code>是个函数接口，所以这里用λ表达式。</li><li>第四步: 调用流的<code>distinct</code>方法，去掉重复，并得到一个新流。这本质上是另一个<code>filter</code>操作。</li><li>第五步: 用<code>collect</code>方法将最终结果收集到一个<code>List</code>里面去。<code>collect</code>方法接受一个<code>Collector</code>类型的参数，这个参数指明如何收集最终结果。在这个例子中，结果简单地收集到一个<code>List</code>中。我们也可以用<code>Collectors.toMap(e-&gt;e, e-&gt;e)</code>把结果收集到一个<code>Map</code>中，它的意思是：把结果收到一个<code>Map</code>，用这些素数自身既作为键又作为值。<code>toMap</code>方法接受两个<code>Function</code>类型的参数，分别用以生成键和值，<code>Function</code>是个函数接口，所以这里都用λ表达式。</li></ul><p>你可能会觉得在这个例子里，<code>List l</code>被迭代了好多次，<code>map</code>，<code>filter</code>，<code>distinct</code>都分别是一次循环，效率会不好。实际并非如此。这些返回另一个<code>Stream</code>的方法都是“懒(<code>lazy</code>)”的，而最后返回最终结果的<code>collect</code>方法则是“急(<code>eager</code>)”的。在遇到<code>eager</code>方法之前，<code>lazy</code>的方法不会执行。</p><p>当遇到<code>eager</code>方法时，前面的<code>lazy</code>方法才会被依次执行。而且是管道贯通式执行。这意味着每一个元素依次通过这些管道。例如有个元素“3”，首先它被<code>map</code>成整数型3；然后通过<code>filter</code>，发现是素数，被保留下来；又通过<code>distinct</code>，如果已经有一个3了，那么就直接丢弃，如果还没有则保留。这样，3个操作其实只经过了一次循环。</p><p>除<code>collect</code>外其它的<code>eager</code>操作还有<code>forEach</code>，<code>toArray</code>，<code>reduce</code>等。</p><p>下面来看一下也许是最常用的收集器方法，<code>groupingBy</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出一个String类型的数组，找出其中各个素数，并统计其出现次数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">primaryOccurrence</span><span class="params">(String... numbers)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; l = Arrays.asList(numbers);</div><div class="line">    Map&lt;Integer, Integer&gt; r = l.stream()</div><div class="line">        .map(e -&gt; <span class="keyword">new</span> Integer(e))</div><div class="line">        .filter(e -&gt; Primes.isPrime(e))</div><div class="line">        .collect( Collectors.groupingBy(p-&gt;p, Collectors.summingInt(p-&gt;<span class="number">1</span>)) );</div><div class="line">    System.out.println(<span class="string">"primaryOccurrence result is: "</span> + r);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意这一行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Collectors.groupingBy(p-&gt;p, Collectors.summingInt(p-&gt;<span class="number">1</span>))</div></pre></td></tr></table></figure></p><p>它的意思是：把结果收集到一个<code>Map</code>中，用统计到的各个素数自身作为键，其出现次数作为值。</p><p>下面是一个<code>reduce</code>的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出一个String类型的数组，求其中所有不重复素数的和</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">distinctPrimarySum</span><span class="params">(String... numbers)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; l = Arrays.asList(numbers);</div><div class="line">    <span class="keyword">int</span> sum = l.stream()</div><div class="line">        .map(e -&gt; <span class="keyword">new</span> Integer(e))</div><div class="line">        .filter(e -&gt; Primes.isPrime(e))</div><div class="line">        .distinct()</div><div class="line">        .reduce(<span class="number">0</span>, (x,y) -&gt; x+y); <span class="comment">// equivalent to .sum()</span></div><div class="line">    System.out.println(<span class="string">"distinctPrimarySum result is: "</span> + sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>reduce</code>方法用来产生单一的一个最终结果。</p><p>流有很多预定义的<code>reduce</code>操作，如<code>sum()</code>，<code>max()</code>，<code>min()</code>等。</p><p>再举个现实世界里的栗子比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 统计年龄在25-35岁的男女人数、比例</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boysAndGirls</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</div><div class="line">    Map&lt;Integer, Integer&gt; result = persons.parallelStream().filter(p -&gt; p.getAge()&gt;=<span class="number">25</span> &amp;&amp; p.getAge()&lt;=<span class="number">35</span>).</div><div class="line">        collect(</div><div class="line">            Collectors.groupingBy(p-&gt;p.getSex(), Collectors.summingInt(p-&gt;<span class="number">1</span>))</div><div class="line">    );</div><div class="line">    System.out.print(<span class="string">"boysAndGirls result is "</span> + result);</div><div class="line">    System.out.println(<span class="string">", ratio (male : female) is "</span> + (<span class="keyword">float</span>)result.get(Person.MALE)/result.get(Person.FEMALE));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>λ表达式的更多用法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 嵌套的λ表达式</span></div><div class="line">Callable&lt;Runnable&gt; c1 = () -&gt; () -&gt; &#123; System.out.println(<span class="string">"Nested lambda"</span>); &#125;;</div><div class="line">c1.call().run();</div><div class="line"><span class="comment">// 用在条件表达式中</span></div><div class="line">Callable&lt;Integer&gt; c2 = <span class="keyword">true</span> ? (() -&gt; <span class="number">42</span>) : (() -&gt; <span class="number">24</span>);</div><div class="line">System.out.println(c2.call());</div><div class="line"><span class="comment">// 定义一个递归函数，注意须用this限定</span></div><div class="line"><span class="keyword">protected</span> UnaryOperator&lt;Integer&gt; factorial = i -&gt; i == <span class="number">0</span> ? <span class="number">1</span> : i * <span class="keyword">this</span>.factorial.apply( i - <span class="number">1</span> );</div><div class="line">System.out.println(factorial.apply(<span class="number">3</span>));</div></pre></td></tr></table></figure></p><p>在Java中，随声明随调用的方式是不行的，比如下面这样，声明了一个λ表达式<code>(x, y) -&gt; x + y</code>，同时企图通过传入实参<code>(2, 3)</code>来调用它：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> five = ( (x, y) -&gt; x + y ) (<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// ERROR! try to call a lambda in-place</span></div></pre></td></tr></table></figure></p><p>这在C++中是可以的，但Java中不行。Java的λ表达式只能用作赋值、传参、返回值等。</p><h3 id="其它相关概念"><a href="#其它相关概念" class="headerlink" title="其它相关概念"></a>其它相关概念</h3><h4 id="捕获-Capture"><a href="#捕获-Capture" class="headerlink" title="捕获(Capture)"></a>捕获(Capture)</h4><p>捕获的概念在于解决在λ表达式中我们可以使用哪些外部变量(即除了它自己的参数和内部定义的本地变量)的问题。</p><p>与内部类非常相似，但有不同点。不同点在于内部类总是持有一个其外部类对象的引用。而λ表达式呢，除非在它内部用到了其外部类（包围类）对象的方法或者成员，否则它就不持有这个对象的引用。</p><p>在Java8以前，如果要在内部类访问外部对象的一个本地变量，那么这个变量必须声明为<code>final</code>才行。在Java8中，这种限制被去掉了，代之以一个新的概念，<code>effectively final</code>。它的意思是你可以声明为<code>final</code>，也可以不声明<code>final</code>但是按照<code>final</code>来用，也就是一次赋值永不改变。换句话说，保证它加上<code>final</code>前缀后不会出编译错误。</p><p>在Java8中，内部类和λ表达式都可以访问<code>effectively final</code>的本地变量。λ表达式的例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//包围类的成员变量</span></div><div class="line"><span class="keyword">int</span> tmp1 = <span class="number">1</span>;</div><div class="line"><span class="comment">//包围类的静态成员变量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> tmp2 = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCapture</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 没有声明为final，但是effectively final的本地变量</span></div><div class="line">    <span class="keyword">int</span> tmp3 = <span class="number">3</span>;</div><div class="line">    <span class="comment">// 声明为final的本地变量</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> tmp4 = <span class="number">4</span>;</div><div class="line">    <span class="comment">// 普通本地变量</span></div><div class="line">    <span class="keyword">int</span> tmp5 = <span class="number">5</span>;</div><div class="line">    Function&lt;Integer, Integer&gt; f1 = i -&gt; i + tmp1;</div><div class="line">    Function&lt;Integer, Integer&gt; f2 = i -&gt; i + tmp2;</div><div class="line">    Function&lt;Integer, Integer&gt; f3 = i -&gt; i + tmp3;</div><div class="line">    Function&lt;Integer, Integer&gt; f4 = i -&gt; i + tmp4;</div><div class="line">    Function&lt;Integer, Integer&gt; f5 = i -&gt; &#123;</div><div class="line">        <span class="comment">// 编译错！对tmp5赋值导致它不是effectively final的</span></div><div class="line">        tmp5  += i;</div><div class="line">        <span class="keyword">return</span> tmp5;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 编译错！对tmp5赋值导致它不是effectively final的</span></div><div class="line">    tmp5 = <span class="number">9</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Java要求本地变量<code>final</code>或者<code>effectively final</code>的原因是多线程并发问题。内部类、λ表达式都有可能在不同的线程中执行，允许多个线程同时修改一个本地变量不符合Java的设计理念。</p><h4 id="方法引用-Method-reference"><a href="#方法引用-Method-reference" class="headerlink" title="方法引用(Method reference)"></a>方法引用(Method reference)</h4><p>任何一个λ表达式都可以代表某个函数接口的唯一方法的匿名描述符。我们也可以使用某个类的某个具体方法来代表这个描述符，叫做方法引用。 例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Integer::parseInt <span class="comment">//静态方法引用</span></div><div class="line">System.out::print <span class="comment">//实例方法引用</span></div><div class="line">Person::<span class="keyword">new</span>       <span class="comment">//构造器引用</span></div></pre></td></tr></table></figure></p><p>下面是一组例子，教你使用方法引用代替λ表达式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// c1 与 c2 是一样的（静态方法引用）</span></div><div class="line">Comparator&lt;Integer&gt; c2 = (x, y) -&gt; Integer.compare(x, y);</div><div class="line">Comparator&lt;Integer&gt; c1 = Integer::compare;</div><div class="line"><span class="comment">// 下面两句是一样的（实例方法引用1）</span></div><div class="line">persons.forEach(e -&gt; System.out.println(e));</div><div class="line">persons.forEach(System.out::println);</div><div class="line"><span class="comment">// 下面两句是一样的（实例方法引用2）</span></div><div class="line">persons.forEach(person -&gt; person.eat());</div><div class="line">persons.forEach(Person::eat);</div><div class="line"><span class="comment">// 下面两句是一样的（构造器引用）</span></div><div class="line">strList.stream().map(s -&gt; <span class="keyword">new</span> Integer(s));</div><div class="line">strList.stream().map(Integer::<span class="keyword">new</span>);</div></pre></td></tr></table></figure></p><p>使用方法引用，你的程序会变得更短些。现在distinctPrimarySum方法可以改写如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">distinctPrimarySum</span><span class="params">(String... numbers)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; l = Arrays.asList(numbers);</div><div class="line">    <span class="keyword">int</span> sum = l.stream().map(Integer::<span class="keyword">new</span>).filter(Primes::isPrime).distinct().sum();</div><div class="line">    System.out.println(<span class="string">"distinctPrimarySum result is: "</span> + sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="默认方法-Default-method"><a href="#默认方法-Default-method" class="headerlink" title="默认方法(Default method)"></a>默认方法(Default method)</h4><p>Java8中，接口声明里可以有方法实现了，叫做默认方法。在此之前，接口里的方法全部是抽象方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">m1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello default method!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这实际上混淆了接口和抽象类，但一个类仍然可以实现多个接口，而只能继承一个抽象类。</p><p>这么做的原因是：由于<code>Collection</code>库需要为批处理操作添加新的方法，如<code>forEach()</code>，<code>stream()</code>等，但是不能修改现有的<code>Collection</code>接口——如果那样做的话所有的实现类都要进行修改，包括很多客户自制的实现类。所以只好使用这种妥协的办法。</p><p>如此一来，我们就面临一种类似多继承的问题。如果类<code>Sub</code>继承了两个接口，<code>Base1</code>和<code>Base2</code>，而这两个接口恰好具有完全相同的两个默认方法，那么就会产生冲突。这时<code>Sub</code>类就必须通过重载来显式指明自己要使用哪一个接口的实现（或者提供自己的实现）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">implements</span> <span class="title">Base1</span>, <span class="title">Base2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        Base1.<span class="keyword">super</span>.hello(); <span class="comment">//使用Base1的实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>除了默认方法，Java8的接口也可以有静态方法的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterf</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">m1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello default method!"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">m3</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello static method in Interface!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="生成器函数-Generator-function"><a href="#生成器函数-Generator-function" class="headerlink" title="生成器函数(Generator function)"></a>生成器函数(Generator function)</h4><p>有时候一个流的数据源不一定是一个已存在的集合对象，也可能是个“生成器函数”。一个生成器函数会产生一系列元素，供给一个流。 <code>Stream.generate(Supplier s)</code>就是一个生成器函数。其中参数<code>Supplier</code>是一个函数接口，里面有唯一的抽象方法<code>get()</code>。</p><p>下面这个例子生成并打印5个随机数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.generate(Math::random).limit(<span class="number">5</span>).forEach(System.out::println);</div></pre></td></tr></table></figure></p><p>注意这个<code>limit(5)</code>，如果没有这个调用，那么这条语句会永远地执行下去。也就是说这个生成器是无穷的。这种调用叫做终结操作，或者短路(<code>short-circuiting</code>)操作。</p><p>参考资料<br>OpenJdk: <a href="http://openjdk.java.net/projects/lambda/" target="_blank" rel="external">http://openjdk.java.net/projects/lambda/</a><br>ORACLE: <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html</a><br>原文转载自：<a href="http://blog.csdn.net/ioriogami/article/details/12782141/" target="_blank" rel="external">http://blog.csdn.net/ioriogami/article/details/12782141/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是λ表达式&quot;&gt;&lt;a href=&quot;#什么是λ表达式&quot; class=&quot;headerlink&quot; title=&quot;什么是λ表达式&quot;&gt;&lt;/a&gt;什么是λ表达式&lt;/h3&gt;&lt;p&gt;λ表达式本质上是一个匿名方法。让我们来看下面这个例子：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;转成λ表达式后是这个样子：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y) -&amp;gt; x + y;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参数类型也可以省略，Java编译器会根据上下文推断出来：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回两数之和&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(x, y) -&amp;gt; x + y;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//显式指明返回值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(x, y) -&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见λ表达式有三部分组成：参数列表，箭头(&lt;code&gt;-&amp;gt;&lt;/code&gt;)，以及一个表达式或语句块。&lt;br&gt;下面这个例子里的λ表达式没有参数，也没有返回值（相当于一个方法接受0个参数，返回&lt;code&gt;void&lt;/code&gt;，其实就是&lt;code&gt;Runnable&lt;/code&gt;里&lt;code&gt;run&lt;/code&gt;方法的一个实现）：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;() -&amp;gt; &amp;#123; System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello Lambda!&quot;&lt;/span&gt;); &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果只有一个参数且可以被Java推断出类型，那么参数列表的括号也可以省略：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;c -&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; c.size(); &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java包装类</title>
    <link href="https://damon4u.github.io//blog/2018/09/%E5%8C%85%E8%A3%85%E7%B1%BB.html"/>
    <id>https://damon4u.github.io//blog/2018/09/包装类.html</id>
    <published>2018-09-27T08:41:50.000Z</published>
    <updated>2018-09-27T12:57:24.632Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-自动装箱与自动拆箱"><a href="#1-自动装箱与自动拆箱" class="headerlink" title="1. 自动装箱与自动拆箱"></a>1. 自动装箱与自动拆箱</h3><p>那我们来分析<code>Integer i = 5;</code>的过程；<br>在jdk1.5以前，这样的代码是错误的，必须要通过<code>Integer i = new Integer(5);</code>这样的语句实现；<br>而在jdk1.5以后，Java提供了自动装箱的功能，只需<code>Integer i = 5;</code>这样的语句就能实现基本数据类型传给其包装类，JVM为我们执行了<code>Integer i = Integer.valueOf(5);</code>。</p><p>相对应的，把基本数据从对应包装类中取出的过程就是拆箱，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer i = 5；</div><div class="line">int j = i; // 这样的过程就是自动拆箱</div></pre></td></tr></table></figure></p><p>源码方面，装箱过程是通过调用包装器的<code>valueOf</code>方法实现的，而拆箱过程是通过调用包装器的<code>xxxValue</code>方法实现的。（xxx代表对应的基本数据类型）</p><a id="more"></a><h3 id="2-比较大小"><a href="#2-比较大小" class="headerlink" title="2. 比较大小"></a>2. 比较大小</h3><h4 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInteger</span><span class="params">()</span> </span>&#123;</div><div class="line">    Integer n1 = <span class="number">1</span>;</div><div class="line">    Integer n2 = <span class="number">1</span>;</div><div class="line">    Integer n3 = <span class="number">200</span>;</div><div class="line">    Integer n4 = <span class="number">200</span>;</div><div class="line">    assertTrue(n1 == n2);</div><div class="line">    assertTrue(n1.equals(n2));</div><div class="line">    assertFalse(n3 == n4);</div><div class="line">    assertTrue(n3.equals(n4));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于Integer，需要注意它的<code>valueOf</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* This method will always cache values in the range -128 to 127, inclusive, and may cache other values outside of this range.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里引入了<code>IntegerCache</code>，缓存-128到127之间的常用数值，注意，范围外的数值也有可能被缓存。<br>即在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。<br>上面代码中，n1和n2的数值都为1，在缓存范围内，所以引用了同一个对象。</p><p>类似的，Byte、Character、Short、Integer、Long这几个整型包装类都会缓存[-128,127]之间的数值。</p><h4 id="2-2-浮点型"><a href="#2-2-浮点型" class="headerlink" title="2.2 浮点型"></a>2.2 浮点型</h4><p>与整型不同，浮点型包装类Float和Double的valueOf并不会缓存常用值，而是直接新建对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Double(d);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2-3-布尔型"><a href="#2-3-布尔型" class="headerlink" title="2.3 布尔型"></a>2.3 布尔型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBoolean</span><span class="params">()</span> </span>&#123;</div><div class="line">    Boolean b1 = <span class="keyword">true</span>;</div><div class="line">    Boolean b2 = <span class="keyword">true</span>;</div><div class="line">    Boolean b3 = <span class="keyword">false</span>;</div><div class="line">    Boolean b4 = <span class="keyword">false</span>;</div><div class="line">    assertTrue(b1 == b2);</div><div class="line">    assertTrue(b3 == b4);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接下来看布尔类型包装类Boolean的valueOf方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean TRUE = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean FALSE = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看出来，布尔类型的自动装箱会返回两个静态常量值中的一个。</p><h4 id="2-4-类型转换"><a href="#2-4-类型转换" class="headerlink" title="2.4 类型转换"></a>2.4 类型转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCompute</span><span class="params">()</span> </span>&#123;</div><div class="line">    Integer a = <span class="number">1</span>;</div><div class="line">    Integer b = <span class="number">2</span>;</div><div class="line">    Integer c = <span class="number">3</span>;</div><div class="line">    Long g = <span class="number">3L</span>;</div><div class="line">    Long h = <span class="number">2L</span>;</div><div class="line">    assertTrue(c == (a + b));     <span class="comment">// (1)</span></div><div class="line">    assertTrue(c.equals(a + b));  <span class="comment">// (2)</span></div><div class="line">    assertTrue(g == (a + b));     <span class="comment">// (3)</span></div><div class="line">    assertFalse(g.equals(a + b)); <span class="comment">// (4)</span></div><div class="line">    assertTrue(g.equals(a + h));  <span class="comment">// (5)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>a + b 运算符操作，先进行拆箱，计算得到int型的3，然后在进行封箱操作，传入equals方法。</p><p>这里面需要注意的是：</p><ul><li>当 “==” 运算符的两个操作数都是包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会触发自动拆箱的过程）。</li><li>对于包装器类型，equals方法并不会进行类型转换。</li></ul><p>重点看（3）（4）（5）。<br>（1）和（3）由于 a+b 包含了算术运算，因此会触发自动拆箱过程（会调用intValue方法），因此它们比较的是数值是否相等。<br>（2）（4）（5）对于c.equals(a+b)会先触发自动拆箱过程，再触发自动装箱过程，也就是说a+b，会先各自调用intValue方法，得到了加法运算后的数值之后，便调用Integer.valueOf方法，再进行equals比较。如果数值是int类型的，装箱过程调用的是Integer.valueOf；如果是long类型的，装箱调用的Long.valueOf方法。不同类型进行equals方法比较肯定不相等。</p><h3 id="3-空指针"><a href="#3-空指针" class="headerlink" title="3. 空指针"></a>3. 空指针</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>(expected = NullPointerException.class)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNPE</span><span class="params">()</span> </span>&#123;</div><div class="line">    Integer a = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (a &gt; <span class="number">0</span>) &#123; <span class="comment">// NPE</span></div><div class="line">        System.out.println(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在执行<code>a &gt; 0</code>时，需要对a进行拆箱操作，也就是调用a的intValue方法，而a为空，则抛出NPE。<br>因此，对于包装类，需要先进行判空检验。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-自动装箱与自动拆箱&quot;&gt;&lt;a href=&quot;#1-自动装箱与自动拆箱&quot; class=&quot;headerlink&quot; title=&quot;1. 自动装箱与自动拆箱&quot;&gt;&lt;/a&gt;1. 自动装箱与自动拆箱&lt;/h3&gt;&lt;p&gt;那我们来分析&lt;code&gt;Integer i = 5;&lt;/code&gt;的过程；&lt;br&gt;在jdk1.5以前，这样的代码是错误的，必须要通过&lt;code&gt;Integer i = new Integer(5);&lt;/code&gt;这样的语句实现；&lt;br&gt;而在jdk1.5以后，Java提供了自动装箱的功能，只需&lt;code&gt;Integer i = 5;&lt;/code&gt;这样的语句就能实现基本数据类型传给其包装类，JVM为我们执行了&lt;code&gt;Integer i = Integer.valueOf(5);&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;相对应的，把基本数据从对应包装类中取出的过程就是拆箱，如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Integer i = 5；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int j = i; // 这样的过程就是自动拆箱&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;源码方面，装箱过程是通过调用包装器的&lt;code&gt;valueOf&lt;/code&gt;方法实现的，而拆箱过程是通过调用包装器的&lt;code&gt;xxxValue&lt;/code&gt;方法实现的。（xxx代表对应的基本数据类型）&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>云音乐抓取</title>
    <link href="https://damon4u.github.io//blog/2018/09/%E4%BA%91%E9%9F%B3%E4%B9%90%E6%8A%93%E5%8F%96.html"/>
    <id>https://damon4u.github.io//blog/2018/09/云音乐抓取.html</id>
    <published>2018-09-21T08:41:50.000Z</published>
    <updated>2018-09-27T13:12:14.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-初衷"><a href="#1-初衷" class="headerlink" title="1. 初衷"></a>1. 初衷</h3><p>作为云音乐的死忠用户，在大量版权丢失的情况下，依然坚守阵地，除了对UI的喜欢，还有就是歌曲下面精彩的评论信息了。<br>翻过很多热评后，就想把这些数据抓取下来。有了数据，就可以做数据分析。</p><a id="more"></a><h3 id="2-探索抓取方案"><a href="#2-探索抓取方案" class="headerlink" title="2.探索抓取方案"></a>2.探索抓取方案</h3><p>我感兴趣的数据包括歌曲信息、用户信息和评论信息。<br>在web端搜索一首歌曲，例如女友喜欢的《umbrella》：<a href="http://music.163.com/song?id=21563094" target="_blank" rel="external">http://music.163.com/song?id=21563094</a><br>打开开发者选项，抓一下这个接口的返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">        &lt;meta name=&quot;baidu-site-verification&quot; content=&quot;cNhJHKEzsD&quot; /&gt;</div><div class="line">        &lt;meta property=&quot;qc:admins&quot; content=&quot;27354635321361636375&quot; /&gt;</div><div class="line">        &lt;link rel=&quot;canonical&quot; href=&quot;https://music.163.com/song?id=21563094&quot;&gt;</div><div class="line">        &lt;meta name=&quot;applicable-device&quot; content=&quot;pc&quot;&gt;</div><div class="line">        &lt;link rel=&quot;alternate&quot; media=&quot;only screen and (max-width: 640px)&quot; href=&quot;https://music.163.com/m/song?id=21563094&quot;&gt;</div><div class="line">        &lt;meta name=&quot;mobile-agent&quot; content=&quot;format=html5;url=https://music.163.com/m/song?id=21563094&quot;&gt;</div><div class="line">        &lt;title&gt;Umbrella - Rihanna/Jay-Z - 单曲 - 网易云音乐&lt;/title&gt;</div><div class="line">        &lt;meta name=&quot;keywords&quot; content=&quot;Umbrella，Good Girl Gone Bad: Reloaded，Rihanna，Jay-Z&quot; /&gt;</div><div class="line">        &lt;meta name=&quot;description&quot; content=&quot;歌手：Rihanna，Jay-Z。所属专辑：Good Girl Gone Bad: Reloaded。&quot; /&gt;</div><div class="line">        &lt;meta property=&quot;og:title&quot; content=&quot;Umbrella - Rihanna/Jay-Z - 单曲 - 网易云音乐&quot; /&gt;</div><div class="line">        &lt;meta property=&quot;og:type&quot; content=&quot;music.song&quot; /&gt;</div><div class="line">        &lt;meta property=&quot;og:image&quot; content=&quot;http://p1.music.126.net/cSVFVXAwbx-UITEYuW2OCQ==/18923694625892133.jpg&quot; /&gt;</div><div class="line">        &lt;meta property=&quot;og:url&quot; content=&quot;https://music.163.com/song?id=21563094&quot; /&gt;</div><div class="line">        &lt;script type=&quot;application/ld+json&quot;&gt;</div><div class="line">&#123;</div><div class="line">&quot;@context&quot;: &quot;https://ziyuan.baidu.com/contexts/cambrian.jsonld&quot;,</div><div class="line">&quot;@id&quot;: &quot;http://music.163.com/song?id=21563094&quot;,</div><div class="line">&quot;appid&quot;: &quot;1582028769404989&quot;,</div><div class="line">&quot;title&quot;: &quot;Umbrella&quot;,</div><div class="line">&quot;images&quot;: [&quot;http://p1.music.126.net/cSVFVXAwbx-UITEYuW2OCQ==/18923694625892133.jpg&quot;],</div><div class="line">&quot;description&quot;: &quot;歌手：Rihanna，Jay-Z。所属专辑：Good Girl Gone Bad: Reloaded。&quot;,</div><div class="line">&quot;pubDate&quot;: &quot;2008-06-01T00:00:00&quot;</div><div class="line">&#125;</div><div class="line">&lt;!-- ... --&gt;</div></pre></td></tr></table></figure></p><p>这个静态页面包含了我们需要的歌曲信息：歌曲名称，歌手名称，简单描述，封面等。</p><p>过滤一下<code>comment</code>关键字，可以抓到评论接口：<br><a href="http://music.163.com/weapi/v1/resource/comments/R_SO_4_21563094?csrf_token=" target="_blank" rel="external">http://music.163.com/weapi/v1/resource/comments/R_SO_4_21563094?csrf_token=</a><br>观察下这个请求url，发现是<br><a href="http://music.163.com/weapi/v1/resource/comments/R_SO_4_{songId}?csrf_token=" target="_blank" rel="external">http://music.163.com/weapi/v1/resource/comments/R_SO_4_{songId}?csrf_token=</a><br>的规则。<br>但是直接发POST请求拿不到数据，说明这个接口做了权限校验。<br>继续分析这个接口的请求参数，发现Form Data中带了两个参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">params: Tt0vzJun80fPMcJdTIQZjECkfD19yB+85n1n/yHPlpMyRMftbmFja0AccgQjzjJwVBCs/2P8Rv3G2twaIXyxcHHTPinf+r+W3My26Ig+7u4+MFHlt2da1t1mEqXDQFDLRMgQGBrHJ3SQwyL82t+FTpjoVRGVlIKUqT5+k/w9oFoPpCyLzICLhbdK+dHANH6g</div><div class="line">encSecKey: 465fd8f7c29de467d6396e88b8b77d42971cb85134f8da7622925823019ab6774dc4b1cf6da9d39c063cb492e01349ae5801946700bc981b83cd5cddf66229ce794b63b8be99b7e47a88f415f412c6a5bf561a84b4cefb63b9571e05209e024b1e2dea08cbf9d299d11770682fc1f17117c612e0d113a26175f88b2a661bfc32</div></pre></td></tr></table></figure></p><p>我们也加上两个表单参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -X POST \</div><div class="line">  &apos;http://music.163.com/weapi/v1/resource/comments/R_SO_4_21563094/?csrf_token=&apos; \</div><div class="line">  -H &apos;Content-Type: application/x-www-form-urlencoded&apos; \</div><div class="line">  -d &apos;params=idbuC%2BeyC4tyaC8O0b17iPmu76ES3ExK4xUyvEcqLUc4ky04AGkMkKd8Agp1Z46Vh3TMCZUc4aqHdMaQ7MyYj2jzr2v3irkRTalDwLf5Hu4%2B3FrujioedL5Crw8a2G9rcV%2BjdUm7JkZbZ6ubRTl4QlRT2OjNj7DjcBj%2B5nKgH6Z2rGQzoL8XO5HAVED4uRBB&amp;encSecKey=a889c30bc037e06c3cb96d2f694bdec265cda483db3b551d72c9c30d2eb5ee7fac6848cb295fcde522ba0b0ed709ca5f28638353016bad5b4224a76517f2776a8d1bea8e2a9318625b41c73e2aece423e0846bcd54093032287185b1f618fe39163f8df49939abac3f5ae8ebcea87cda6e921b9ba41e0ed33f492b1624a48a92&apos;</div></pre></td></tr></table></figure></p><p>返回结果结构如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"isMusician"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"userId"</span>: <span class="number">-1</span>,</div><div class="line">    <span class="attr">"topComments"</span>: [],</div><div class="line">    <span class="attr">"moreHot"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"hotComments"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"user"</span>: &#123;</div><div class="line">                <span class="attr">"locationInfo"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"vipRights"</span>: &#123;</div><div class="line">                    <span class="attr">"musicPackage"</span>: &#123;</div><div class="line">                        <span class="attr">"vipCode"</span>: <span class="number">200</span>,</div><div class="line">                        <span class="attr">"rights"</span>: <span class="literal">true</span></div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                <span class="attr">"userId"</span>: <span class="number">51494587</span>,</div><div class="line">                <span class="attr">"nickname"</span>: <span class="string">"FireBurning_JASON"</span>,</div><div class="line">                <span class="attr">"expertTags"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"userType"</span>: <span class="number">0</span>,</div><div class="line">                <span class="attr">"authStatus"</span>: <span class="number">0</span>,</div><div class="line">                <span class="attr">"remarkName"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"avatarUrl"</span>: <span class="string">"http://p1.music.126.net/8c28fFk1Yqml-CCulWzioA==/7806532557388357.jpg"</span>,</div><div class="line">                <span class="attr">"experts"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"vipType"</span>: <span class="number">10</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">"beReplied"</span>: [],</div><div class="line">            <span class="attr">"pendantData"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"expressionUrl"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"time"</span>: <span class="number">1424242903947</span>,</div><div class="line">            <span class="attr">"liked"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"likedCount"</span>: <span class="number">14377</span>,</div><div class="line">            <span class="attr">"commentId"</span>: <span class="number">11007152</span>,</div><div class="line">            <span class="attr">"content"</span>: <span class="string">"应该说这首歌才是rir的巅峰吧，然后就一直在巅峰"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"total"</span>: <span class="number">6935</span>,</div><div class="line">    <span class="attr">"more"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个接口就包含我感兴趣的热门评论信息和用户信息。<br>对于简单抓取，这两个接口已经满足我的需求。如果想抓取全部评论，包含分页数据，那么需要分析云音乐的加密算法，其实在混淆后的JS中都有，有专门的文章分析，这里不做过多解释。</p><h3 id="3-代理IP池"><a href="#3-代理IP池" class="headerlink" title="3. 代理IP池"></a>3. 代理IP池</h3><p>有了接口，就可以写代码发送http请求遍历songId进行数据抓取了。<br>但是云音乐做了防刷处理，抓取几万条数据后，开始接口报错，被封了IP。<br>于是想要维护一个代理IP池，每次抓取时从池子中拿一个代理IP进行接口调用，防止IP封禁。</p><h4 id="3-1-代理IP"><a href="#3-1-代理IP" class="headerlink" title="3.1 代理IP"></a>3.1 代理IP</h4><p>来源：可以从淘宝上面买，可以从免费网站抓取。<br>分类：根据匿名程度，可以分为高匿，普通和透明。高匿的代理ip可以屏蔽掉真实IP，目标服务器完全不能感觉到代理IP的存在；普通代理ip能隐藏真实IP，但是目标服务器能感受到代理IP的存在；透明代理IP不能隐藏真实IP。</p><h4 id="3-2-免费代理IP池"><a href="#3-2-免费代理IP池" class="headerlink" title="3.2 免费代理IP池"></a>3.2 免费代理IP池</h4><p>搜索一下代理IP，能找到大量网站提供一些免费代理IP，质量参差不齐，站越大，用的人越多，质量越差。<br>于是搭建免费代理IP池包含两个步骤：<br>（1）从免费代理IP网站抓取代理IP列表<br>（2）验证代理IP可用性<br>不同的代理IP网站抓取和解析的过程也不尽相同，但是不难。<br>验证过程就是使用抓取来的代理IP访问常用网站或者目标网站，如果可用则保留，不可用则丢弃。</p><h3 id="4-实现"><a href="#4-实现" class="headerlink" title="4. 实现"></a>4. 实现</h3><h4 id="4-1-配置文件读取"><a href="#4-1-配置文件读取" class="headerlink" title="4.1 配置文件读取"></a>4.1 配置文件读取</h4><p>项目中使用三个自定义配置参数：请求代理IP列表超时时间，代理IP验证超时时间和真正请求歌曲信息接口超时时间。<br><code>application.yml</code>中配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">app:</span></div><div class="line"><span class="attr">  http:</span></div><div class="line"><span class="attr">    proxyLoadTimeout:</span> <span class="number">10</span></div><div class="line"><span class="attr">    proxyValidateTimeout:</span> <span class="number">8</span></div><div class="line"><span class="attr">    songLoadTimeout:</span> <span class="number">15</span></div></pre></td></tr></table></figure></p><p>这里使用<code>ConfigurationProperties</code>注解读取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> * http配置参数</span></div><div class="line"><span class="comment"> * 修改此类需要maven重新编译，yml里面才能有提示</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"app.http"</span>)</div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> proxyLoadTimeout;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> proxyValidateTimeout;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> songLoadTimeout;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>为了能够在yml配置文件中提示自定义参数，需要引入<code>spring-boot-configuration-processor</code>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>注意每次修改<code>HttpConfig</code>都需要重新maven编译，yml里面才能有提示。</p><h4 id="4-2-使用普通http请求获取动态IP"><a href="#4-2-使用普通http请求获取动态IP" class="headerlink" title="4.2 使用普通http请求获取动态IP"></a>4.2 使用普通http请求获取动态IP</h4><p>网络请求层使用OKHttp + Retrofit2框架。<br>Retrofit2本身是对OKHttp网络请求工具的封装实现，可以方便进行各类HTTP方法请求，对请求参数和返回值进行类型转换。<br>首先引入maven依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- retrofit start --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>retrofit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>converter-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>converter-scalars<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- retrofit end --&gt;</span></div></pre></td></tr></table></figure></p><p><code>retrofit</code>是核心包，<code>converter-jackson</code>和<code>converter-scalars</code>是两个返回值类型转换器，分别对json和普通类型（如string）的返回值进行转换。</p><p>获取动态IP的接口为：<code>https://raw.githubusercontent.com/stamparm/aux/master/fetch-some-list.txt</code><br>返回结果为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"proto"</span>: <span class="string">"http"</span>,</div><div class="line">    <span class="attr">"ip"</span>: <span class="string">"176.62.180.209"</span>,</div><div class="line">    <span class="attr">"country"</span>: <span class="string">"Russian Federation"</span>,</div><div class="line">    <span class="attr">"anonymity"</span>: <span class="string">"high"</span>,</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"elite"</span>,</div><div class="line">    <span class="attr">"port"</span>: <span class="number">63909</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p><p>对于代理IP，统一封装成一个 <code>Proxy</code>实体类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 主键id</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * ip地址或者域名</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String ip;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 端口号</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 协议http、https、socks4等</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String proto;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(String ip, <span class="keyword">int</span> port, String proto)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ip = ip;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">        <span class="keyword">this</span>.proto = proto.toLowerCase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> proto + <span class="string">"://"</span> + ip + <span class="string">":"</span> + port;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先我们封装一个请求client接口，专门负责发起<code>https://raw.githubusercontent.com/</code>域名下的请求，当然，这里我们只有一个普通的GET请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitProxyClient</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取代理IP列表</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/stamparm/aux/master/fetch-some-list.txt"</span>)</div><div class="line">    Call&lt;List&lt;Proxy&gt;&gt; loadProxy();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之后，需要想Spring容器注入bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 网络配置参数</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpConfig httpConfig;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpClientFactory</span><span class="params">(HttpConfig httpConfig)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.httpConfig = httpConfig;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">okHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">                .addInterceptor(<span class="keyword">new</span> HttpHeaderInterceptor())</div><div class="line">                .connectTimeout(httpConfig.getProxyLoadTimeout(), TimeUnit.SECONDS)</div><div class="line">                .readTimeout(httpConfig.getProxyLoadTimeout(), TimeUnit.SECONDS).build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> GitProxyClient <span class="title">gitProxyClient</span><span class="params">()</span> </span>&#123;</div><div class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        <span class="comment">//设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性</span></div><div class="line">        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .addConverterFactory(JacksonConverterFactory.create(mapper))</div><div class="line">                .baseUrl(<span class="string">"https://raw.githubusercontent.com/"</span>)</div><div class="line">                .client(okHttpClient())</div><div class="line">                .build().create(GitProxyClient.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>HttpClientFactory</code>先注册一个<code>OkHttpClient</code>bean，设置了超时时间和拦截器，这个请求并不需要设置代理IP。<br>其中<code>HttpHeaderInterceptor</code>很简单，只是添加一些公共头信息，包括一个随机UA：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHeaderInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Request request = chain.request();</div><div class="line">        Request.Builder builder = request.newBuilder();</div><div class="line">        builder.addHeader(<span class="string">"User-Agent"</span>, UAPool.getUA()); <span class="comment">// 写死一个UA池子，每次随机拿一个，这里就不贴了</span></div><div class="line">        builder.addHeader(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>);</div><div class="line">        <span class="keyword">return</span> chain.proceed(builder.build());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之后注册一个<code>GitProxyClient</code>bean，定制了Jackson反序列化时使用的<code>ObjectMapper</code>，设置了该client的基础域名。<br>接下来就可以使用gitProxyClient发起请求获取动态IP列表了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> GitProxyClient gitProxyClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromGit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 请求</span></div><div class="line">        Response&lt;List&lt;Proxy&gt;&gt; response = gitProxyClient.loadProxy().execute();</div><div class="line">        List&lt;Proxy&gt; proxyList = response.body();</div><div class="line">        <span class="comment">// 过滤</span></div><div class="line">        filterProxy(proxyList);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="4-3-过滤抓取来的代理IP"><a href="#4-3-过滤抓取来的代理IP" class="headerlink" title="4.3 过滤抓取来的代理IP"></a>4.3 过滤抓取来的代理IP</h4><p>从网上抓取来的代理IP一般质量都不高，所以需要进行过滤。<br>常用的方法就是尝试使用代理IP去访问一个常用网站，如百度等，如果在短时间内正常返回则认为可用。<br>开始我也采用了这种方式，访问百度，但是发现可能会出现一种情况，就是百度可以访问，但是访问云音乐接口却出现错误。<br>既然如此，不如一步到位，过滤时就访问歌曲信息接口，如果能正常获取歌曲信息，那么认为代理可用。</p><p>先给出获取歌曲信息的Client：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MusicClient</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取歌曲信息</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> songId 歌曲id</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 页面html</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"song"</span>)</div><div class="line">    <span class="meta">@Headers</span>(<span class="string">"Referer: http://music.163.com/"</span>)</div><div class="line">    <span class="function">Call&lt;String&gt; <span class="title">songInfo</span><span class="params">(@Query(<span class="string">"id"</span>)</span> <span class="keyword">long</span> songId)</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取评论信息</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> songId    歌曲id</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> params    加密params</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> encSecKey 加密encSecKey</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 评论接口返回体</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"weapi/v1/resource/comments/R_SO_4_&#123;songId&#125;/?csrf_token=d2c9e86c94efabcc4b5a1a6d757d417e"</span>)</div><div class="line">    <span class="meta">@FormUrlEncoded</span></div><div class="line">    <span class="meta">@Headers</span>(<span class="string">"Referer: http://music.163.com/"</span>)</div><div class="line">    <span class="function">Call&lt;CommentResponseBody&gt; <span class="title">comment</span><span class="params">(@Path(<span class="string">"songId"</span>)</span> Long songId,</span></div><div class="line"><span class="function">                                      @<span class="title">Field</span><span class="params">(<span class="string">"params"</span>)</span> String params,</span></div><div class="line"><span class="function">                                      @<span class="title">Field</span><span class="params">(<span class="string">"encSecKey"</span>)</span> String encSecKey)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来需要一个定制OkHttp，添加代理IP，这里创建一个工厂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProxyClientFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MusicClient <span class="title">musicClient</span><span class="params">(Proxy proxy, <span class="keyword">int</span> timeoutInSecond)</span> </span>&#123;</div><div class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">                .connectTimeout(timeoutInSecond, TimeUnit.SECONDS)</div><div class="line">                .readTimeout(timeoutInSecond, TimeUnit.SECONDS)</div><div class="line">                .addInterceptor(<span class="keyword">new</span> HttpHeaderInterceptor());</div><div class="line">        addProxy(proxy, builder);</div><div class="line">        OkHttpClient okHttpClient = builder.build();</div><div class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        <span class="comment">//设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性</span></div><div class="line">        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</div><div class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .addConverterFactory(ScalarsConverterFactory.create())</div><div class="line">                .addConverterFactory(JacksonConverterFactory.create(mapper))</div><div class="line">                .baseUrl(<span class="string">"http://music.163.com/"</span>)</div><div class="line">                .client(okHttpClient)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">return</span> retrofit.create(MusicClient.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置代理</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addProxy</span><span class="params">(Proxy proxy, OkHttpClient.Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (proxy != <span class="keyword">null</span>) &#123;</div><div class="line">            String schemeName = proxy.getProto();</div><div class="line">            java.net.Proxy.Type type = java.net.Proxy.Type.HTTP;</div><div class="line">            <span class="keyword">if</span> (schemeName.startsWith(<span class="string">"socks"</span>)) &#123;</div><div class="line">                type = java.net.Proxy.Type.SOCKS;</div><div class="line">            &#125;</div><div class="line">            builder.proxy(<span class="keyword">new</span> java.net.Proxy(type, <span class="keyword">new</span> InetSocketAddress(proxy.getIp(), proxy.getPort())));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>由于每次请求的代理IP都不同，不能直接注入到bean，而是使用工厂方法，每次请求都重新构造一个<code>OkHttpClient</code>，然后生成<code>MusicClient</code>。<br>注意在添加converterFactory时，先添加<code>ScalarsConverterFactory</code>，再<code>JacksonConverterFactory</code>，原因在doc中：</p><blockquote><p>Because Jackson is so flexible in the types it supports, this converter assumes that it can handle all types. If you are mixing JSON serialization with something else (such as protocol buffers), you must add this instance last to allow the other converters a chance to see their types.</p></blockquote><p>接下来就可以使用代理IP请求歌曲信息了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern NAME_PATTERN = Pattern.compile(<span class="string">"&lt;title&gt;(.*) - 网易云音乐&lt;/title&gt;"</span>);</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern DESCRIPTION_PATTERN = Pattern.compile(<span class="string">"&lt;meta name=\"description\" content=\"(.*)\" /&gt;"</span>);</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern IMAGE_PATTERN = Pattern.compile(<span class="string">"&lt;meta property=\"og:image\" content=\"(.*)\" /&gt;"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 获取歌曲信息</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> songId 歌曲id</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到，返回：歌曲名称 - 歌手名称；否则返回null</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> Song <span class="title">getSongInfo</span><span class="params">(<span class="keyword">long</span> songId, Proxy proxy, <span class="keyword">int</span> timeoutInSecond)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Response&lt;String&gt; response = HttpProxyClientFactory.musicClient(proxy, timeoutInSecond)</div><div class="line">            .songInfo(songId).execute();</div><div class="line">    Preconditions.checkNotNull(response);</div><div class="line">    String songInfo = response.body();</div><div class="line">    Preconditions.checkArgument(StringUtils.isNotBlank(songInfo));</div><div class="line">    Matcher nameMatcher = NAME_PATTERN.matcher(songInfo);</div><div class="line">    Matcher descriptionMatcher = DESCRIPTION_PATTERN.matcher(songInfo);</div><div class="line">    Matcher imageMatcher = IMAGE_PATTERN.matcher(songInfo);</div><div class="line">    String name = <span class="string">""</span>;</div><div class="line">    String description = <span class="string">""</span>;</div><div class="line">    String image = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (nameMatcher.find()) &#123;</div><div class="line">        name = nameMatcher.group(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (descriptionMatcher.find()) &#123;</div><div class="line">        description = descriptionMatcher.group(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (imageMatcher.find()) &#123;</div><div class="line">        image = imageMatcher.group(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(name)) &#123;</div><div class="line">        Song song = <span class="keyword">new</span> Song();</div><div class="line">        song.setSongId(songId);</div><div class="line">        song.setName(name);</div><div class="line">        song.setDescription(description);</div><div class="line">        song.setImage(image);</div><div class="line">        song.setCreateTime(<span class="keyword">new</span> Date());</div><div class="line">        logger.info(<span class="string">"song=&#123;&#125;"</span>, song);</div><div class="line">        <span class="keyword">return</span> song;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>剩下的过滤工作也就简单了，对于爬去来的代理IP列表，使用多个线程去过滤一下就好了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">filterProxy</span><span class="params">(List&lt;Proxy&gt; proxyList)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(proxyList)) &#123;</div><div class="line">        <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(proxyList.size());</div><div class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line">        proxyList.forEach(proxy -&gt; executorService.execute(<span class="keyword">new</span> FilterJob(proxy, latch)));</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            latch.await();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            LOGGER.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line">        executorService.shutdownNow();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterJob</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Proxy proxy;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CountDownLatch latch;</div><div class="line"></div><div class="line">    FilterJob(Proxy proxy, CountDownLatch latch) &#123;</div><div class="line">        <span class="keyword">this</span>.proxy = proxy;</div><div class="line">        <span class="keyword">this</span>.latch = latch;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 先只要http类型的</span></div><div class="line">            <span class="keyword">if</span> (proxy.getProto().startsWith(<span class="string">"http"</span>)</div><div class="line">                    &amp;&amp; commentLoader.getSongInfo(<span class="number">209996</span>, proxy, httpConfig.getProxyValidateTimeout()) != <span class="keyword">null</span>) &#123;</div><div class="line">                LOGGER.info(<span class="string">"================&gt; &#123;&#125;"</span>, proxy);</div><div class="line">                proxyDao.save(<span class="keyword">new</span> Proxy(proxy.getIp(), proxy.getPort(), proxy.getProto()));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(e.getMessage());</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            latch.countDown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="4-4-定时抓取"><a href="#4-4-定时抓取" class="headerlink" title="4.4 定时抓取"></a>4.4 定时抓取</h4><p>上面我们实现了一次代理IP抓取，而抓取来的IP也会失效，所以我们需要定时抓取，更新代理IP池。<br>定时任务可以使用Spring的Schedule注解实现，也可以使用quartz，这里使用quartz。<br>引入依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p><code>application.yml</code>添加配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  quartz:</span></div><div class="line"><span class="attr">    properties:</span></div><div class="line"><span class="attr">      org:</span></div><div class="line"><span class="attr">        quartz:</span></div><div class="line"><span class="attr">          scheduler:</span></div><div class="line"><span class="attr">            instanceName:</span> <span class="string">proxyScheduler</span></div><div class="line"><span class="attr">          threadPool:</span></div><div class="line"><span class="attr">            class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></div><div class="line"><span class="attr">            threadCount:</span> <span class="number">10</span></div><div class="line"><span class="attr">            threadPriority:</span> <span class="number">5</span></div><div class="line"><span class="attr">    job-store-type:</span> <span class="string">MEMORY</span></div></pre></td></tr></table></figure></p><p>这里使用简单的内存存储job，也可以使用数据库，配置项会麻烦些。<br>然后创建一个定时任务job，继承<code>QuartzJobBean</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyLoadJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ProxyLoadJob.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ProxyLoader proxyLoader;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"ProxyLoadJob start."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            proxyLoader.loadProxy();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line">        LOGGER.info(<span class="string">"ProxyLoadJob end."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>有了任务，还要将它调度起来，我想20分钟跑一次：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobScheduler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JOB_NAME_PROXY_LOAD = <span class="string">"proxyLoadJob"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_NAME_PROXY = <span class="string">"proxyLoadGroup"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">proxyJob</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> JobBuilder.newJob(ProxyLoadJob.class)</div><div class="line">                .withIdentity(JOB_NAME_PROXY_LOAD, GROUP_NAME_PROXY)</div><div class="line">                .storeDurably()</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">proxyJobTrigger</span><span class="params">()</span> </span>&#123;</div><div class="line">        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"0 0/20 * * * ?"</span>);</div><div class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</div><div class="line">                .withSchedule(scheduleBuilder)</div><div class="line">                .withIdentity(JOB_NAME_PROXY_LOAD, GROUP_NAME_PROXY)</div><div class="line">                .forJob(proxyJob())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里我们先注册一个<code>JobDetail</code>，需要一个名字和分组，然后设置为durably，即没有trigger指向时，也保留。<br>接下来注册一个trigger去触发上面的job，设置cron表达式，绑定job即可。</p><h4 id="4-5-定时删除失效IP"><a href="#4-5-定时删除失效IP" class="headerlink" title="4.5 定时删除失效IP"></a>4.5 定时删除失效IP</h4><p>上面我们实现了定时抓取新代理IP的功能，接下来还需要定时从库中删除失效的代理IP，不能光等到使用时再删除。<br>方法是从库中读取所有代理IP（如果代理IP量很大，可以分页处理），然后启动多个任务去校验代理IP有效性，将无效的删除：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateFromDb</span><span class="params">()</span> </span>&#123;</div><div class="line">      List&lt;Proxy&gt; allProxy = proxyDao.getAllProxy();</div><div class="line">      <span class="keyword">if</span> (CollectionUtils.isNotEmpty(allProxy)) &#123;</div><div class="line">          <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(allProxy.size());</div><div class="line">          ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line">          allProxy.forEach(proxy -&gt; executorService.execute(<span class="keyword">new</span> ValidateJob(proxy, latch)));</div><div class="line">          <span class="keyword">for</span> (Proxy proxy : allProxy) &#123;</div><div class="line">              executorService.execute(<span class="keyword">new</span> ValidateJob(proxy, latch));</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              latch.await();</div><div class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">              LOGGER.error(e.getMessage());</div><div class="line">          &#125;</div><div class="line">          executorService.shutdownNow();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ValidateJob</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">private</span> Proxy proxy;</div><div class="line"></div><div class="line">      <span class="keyword">private</span> CountDownLatch latch;</div><div class="line"></div><div class="line">      ValidateJob(Proxy proxy, CountDownLatch latch) &#123;</div><div class="line">          <span class="keyword">this</span>.proxy = proxy;</div><div class="line">          <span class="keyword">this</span>.latch = latch;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              <span class="keyword">if</span> (commentLoader.getSongInfo(<span class="number">209996</span>, proxy, httpConfig.getProxyValidateTimeout()) == <span class="keyword">null</span>) &#123;</div><div class="line">                  proxyDao.delete(proxy.getId());</div><div class="line">                  LOGGER.error(<span class="string">"disable proxy=&#123;&#125;"</span>, proxy);</div><div class="line">              &#125;</div><div class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">              LOGGER.error(e.getMessage());</div><div class="line">          &#125; <span class="keyword">finally</span> &#123;</div><div class="line">              latch.countDown();</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>同样需要一个定时任务，15分钟执行一次即可，代码与上面抓取代理任务类似。</p><h4 id="4-6-使用代理IP获取歌曲信息"><a href="#4-6-使用代理IP获取歌曲信息" class="headerlink" title="4.6 使用代理IP获取歌曲信息"></a>4.6 使用代理IP获取歌曲信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CommentLoader.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern NAME_PATTERN = Pattern.compile(<span class="string">"&lt;title&gt;(.*) - 网易云音乐&lt;/title&gt;"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern DESCRIPTION_PATTERN = Pattern.compile(<span class="string">"&lt;meta name=\"description\" content=\"(.*)\" /&gt;"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern IMAGE_PATTERN = Pattern.compile(<span class="string">"&lt;meta property=\"og:image\" content=\"(.*)\" /&gt;"</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> SongDao songDao;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> UserDao userDao;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> CommentDao commentDao;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> ProxyDao proxyDao;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HttpConfig httpConfig;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取歌曲和评论信息</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> start 歌曲id起始</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> end 歌曲id结束</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadSongs</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> songId = start; songId &lt;= end; songId++) &#123;</div><div class="line">            Proxy proxy = getRandomProxy();</div><div class="line">            Song songInfo = getSongInfo(songId, proxy, httpConfig.getSongLoadTimeout());</div><div class="line">            <span class="keyword">if</span> (songInfo == <span class="keyword">null</span>) &#123; <span class="comment">// 重试一次</span></div><div class="line">                proxyDao.delete(proxy.getId());</div><div class="line">                proxy = getRandomProxy();</div><div class="line">                songInfo = getSongInfo(songId, proxy, httpConfig.getSongLoadTimeout());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (songInfo == <span class="keyword">null</span>) &#123; <span class="comment">// 重试一次</span></div><div class="line">                proxyDao.delete(proxy.getId());</div><div class="line">                proxy = getRandomProxy();</div><div class="line">                songInfo = getSongInfo(songId, proxy, httpConfig.getSongLoadTimeout());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (songInfo == <span class="keyword">null</span>) &#123;</div><div class="line">                proxyDao.delete(proxy.getId());</div><div class="line">                logger.error(<span class="string">"songInfo is null. songId=&#123;&#125;"</span>, songId);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (songInfo != <span class="keyword">null</span>) &#123;</div><div class="line">                loadCommentInfo(songInfo, proxy);</div><div class="line">            &#125;</div><div class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">50</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取歌曲信息</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> songId 歌曲id</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 如果找到，返回：歌曲名称 - 歌手名称；否则返回null</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Song <span class="title">getSongInfo</span><span class="params">(<span class="keyword">long</span> songId, Proxy proxy, <span class="keyword">int</span> timeoutInSecond)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Response&lt;String&gt; response = HttpProxyClientFactory.musicClient(proxy, timeoutInSecond)</div><div class="line">                .songInfo(songId).execute();</div><div class="line">        Preconditions.checkNotNull(response);</div><div class="line">        String songInfo = response.body();</div><div class="line">        Preconditions.checkArgument(StringUtils.isNotBlank(songInfo));</div><div class="line">        Matcher nameMatcher = NAME_PATTERN.matcher(songInfo);</div><div class="line">        Matcher descriptionMatcher = DESCRIPTION_PATTERN.matcher(songInfo);</div><div class="line">        Matcher imageMatcher = IMAGE_PATTERN.matcher(songInfo);</div><div class="line">        String name = <span class="string">""</span>;</div><div class="line">        String description = <span class="string">""</span>;</div><div class="line">        String image = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (nameMatcher.find()) &#123;</div><div class="line">            name = nameMatcher.group(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (descriptionMatcher.find()) &#123;</div><div class="line">            description = descriptionMatcher.group(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (imageMatcher.find()) &#123;</div><div class="line">            image = imageMatcher.group(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(name)) &#123;</div><div class="line">            Song song = <span class="keyword">new</span> Song();</div><div class="line">            song.setSongId(songId);</div><div class="line">            song.setName(name);</div><div class="line">            song.setDescription(description);</div><div class="line">            song.setImage(image);</div><div class="line">            song.setCreateTime(<span class="keyword">new</span> Date());</div><div class="line">            logger.info(<span class="string">"song=&#123;&#125;"</span>, song);</div><div class="line">            <span class="keyword">return</span> song;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取歌曲评论</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> song  歌曲信息</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadCommentInfo</span><span class="params">(Song song, Proxy proxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Long songId = song.getSongId();</div><div class="line">        String params = <span class="string">"flQdEgSsTmFkRagRN2ceHMwk6lYVIMro5auxLK/JywlqdjeNvEtiWDhReFI+QymePGPLvPnIuVi3dfsDuqEJW204VdwvX+gr3uiRBeSFuOm1VUSJ1HqOc+nJCh0j6WGUbWuJC5GaHTEE4gcpWXX36P4Eu4djoQBzoqdsMbCwoolb2/WrYw/N2hehuwBHO4Oz"</span>;</div><div class="line">        String encSecKey = <span class="string">"0263b1cd3b0a9b621a819b73e588e1cc5709349b21164dc45ab760e79858bb712986ea064dbfc41669e527b767f02da7511ac862cbc54ea7d164fc65e0359962273616e68e694453fb6820fa36dd9915b2b0f60dadb0a6022b2187b9ee011b35d82a1c0ed8ba0dceb877299eca944e80b1e74139f0191adf71ca536af7d7ec25"</span>;</div><div class="line">        Response&lt;CommentResponseBody&gt; response = HttpProxyClientFactory.musicClient(proxy, httpConfig.getSongLoadTimeout()).comment(songId, params, encSecKey).execute();</div><div class="line">        <span class="keyword">long</span> commentCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</div><div class="line">            CommentResponseBody commentResponseBody = response.body();</div><div class="line">            <span class="keyword">if</span> (commentResponseBody != <span class="keyword">null</span>) &#123;</div><div class="line">                commentCount = commentResponseBody.getTotal();</div><div class="line">                List&lt;CommentResponse&gt; hotComments = commentResponseBody.getHotComments();</div><div class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(hotComments)) &#123;</div><div class="line">                    <span class="keyword">for</span> (CommentResponse commentResponse : hotComments) &#123;</div><div class="line">                        Long userId = <span class="number">0L</span>;</div><div class="line">                        User user = commentResponse.getUser();</div><div class="line">                        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</div><div class="line">                            userId = user.getUserId();</div><div class="line">                            userDao.save(user);</div><div class="line">                        &#125;</div><div class="line">                        Long beRepliedUserId = <span class="number">0L</span>;</div><div class="line">                        String beRepliedContent = <span class="string">""</span>;</div><div class="line">                        List&lt;CommentReplied&gt; beRepliedList = commentResponse.getBeReplied();</div><div class="line">                        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(beRepliedList)) &#123;</div><div class="line">                            CommentReplied commentReplied = beRepliedList.get(<span class="number">0</span>);</div><div class="line">                            User repliedUser = commentReplied.getUser();</div><div class="line">                            <span class="keyword">if</span> (repliedUser != <span class="keyword">null</span>) &#123;</div><div class="line">                                beRepliedUserId = repliedUser.getUserId();</div><div class="line">                                userDao.save(repliedUser);</div><div class="line">                            &#125;</div><div class="line">                            beRepliedContent = commentReplied.getContent();</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (commentCount &gt; <span class="number">1000</span>) &#123;</div><div class="line">                            <span class="comment">// 总评论数少于1000的歌曲就扔掉了</span></div><div class="line">                            Comment comment = <span class="keyword">new</span> Comment();</div><div class="line">                            comment.setCommentId(commentResponse.getCommentId());</div><div class="line">                            comment.setSongId(songId);</div><div class="line">                            comment.setLikedCount(commentResponse.getLikedCount());</div><div class="line">                            comment.setContent(commentResponse.getContent());</div><div class="line">                            comment.setUserId(userId);</div><div class="line">                            comment.setBeRepliedUserId(beRepliedUserId);</div><div class="line">                            comment.setBeRepliedContent(beRepliedContent);</div><div class="line">                            comment.setCommentTime(<span class="keyword">new</span> Date(commentResponse.getTime()));</div><div class="line">                            comment.setCreateTime(<span class="keyword">new</span> Date());</div><div class="line">                            commentDao.save(comment);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        song.setCommentCount(commentCount);</div><div class="line">        songDao.save(song);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 查询一个随机代理</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Proxy <span class="title">getRandomProxy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = proxyDao.count();</div><div class="line">        <span class="keyword">return</span> proxyDao.getByIndex(ThreadLocalRandom.current().nextInt(count));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-初衷&quot;&gt;&lt;a href=&quot;#1-初衷&quot; class=&quot;headerlink&quot; title=&quot;1. 初衷&quot;&gt;&lt;/a&gt;1. 初衷&lt;/h3&gt;&lt;p&gt;作为云音乐的死忠用户，在大量版权丢失的情况下，依然坚守阵地，除了对UI的喜欢，还有就是歌曲下面精彩的评论信息了。&lt;br&gt;翻过很多热评后，就想把这些数据抓取下来。有了数据，就可以做数据分析。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://damon4u.github.io/categories/java/spring/"/>
    
    
      <category term="spring" scheme="https://damon4u.github.io/tags/spring/"/>
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>BigDecimal精度</title>
    <link href="https://damon4u.github.io//blog/2018/09/BigDecimal%E7%B2%BE%E5%BA%A6.html"/>
    <id>https://damon4u.github.io//blog/2018/09/BigDecimal精度.html</id>
    <published>2018-09-12T08:41:50.000Z</published>
    <updated>2018-09-13T14:15:58.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-构造函数的坑"><a href="#1-构造函数的坑" class="headerlink" title="1. 构造函数的坑"></a>1. 构造函数的坑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">      <span class="keyword">double</span> number = <span class="number">6302079.05</span>;</div><div class="line">      BigDecimal bigDecimalFromDouble = <span class="keyword">new</span> BigDecimal(number);</div><div class="line">      LOGGER.info(<span class="string">"bigDecimalFromDouble=&#123;&#125;"</span>, bigDecimalFromDouble);</div><div class="line">      BigDecimal bigDecimalFromString = <span class="keyword">new</span> BigDecimal(String.valueOf(number)) ;</div><div class="line">      LOGGER.info(<span class="string">"bigDecimalFromString=&#123;&#125;"</span>, bigDecimalFromString);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalFromDouble=6302079.049999999813735485076904296875</div><div class="line">bigDecimalFromString=6302079.05</div></pre></td></tr></table></figure></p><p>可以看到，直接使用double作为参数构造BigDecimal时，会丢失精度。<br>所以推荐的是先将double转化为字符串，然后赋值给构造函数。</p><a id="more"></a><h3 id="2-数值计算丢失精度"><a href="#2-数值计算丢失精度" class="headerlink" title="2. 数值计算丢失精度"></a>2. 数值计算丢失精度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDecimalCompute</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalFromString = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString=&#123;&#125;"</span>, bigDecimalFromString);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString floatValue=&#123;&#125;"</span>, bigDecimalFromString.floatValue());</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString floatValue*100=&#123;&#125;"</span>, (<span class="keyword">int</span>) (bigDecimalFromString.floatValue() * <span class="number">100</span>));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString doubleValue=&#123;&#125;"</span>, bigDecimalFromString.doubleValue());</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString doubleValue*100=&#123;&#125;"</span>, (<span class="keyword">int</span>) (bigDecimalFromString.doubleValue() * <span class="number">100</span>));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString multiply(100)=&#123;&#125;"</span>, bigDecimalFromString.multiply(<span class="keyword">new</span> BigDecimal(<span class="string">"100"</span>)).intValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bigDecimalFromString=6302079.05</div><div class="line">bigDecimalFromString floatValue=6302079.0</div><div class="line">bigDecimalFromString floatValue*100=630207872</div><div class="line">bigDecimalFromString doubleValue=6302079.05</div><div class="line">bigDecimalFromString doubleValue*100=630207905</div><div class="line">bigDecimalFromString multiply(100)=630207905</div></pre></td></tr></table></figure></p><p>尝试调用<code>floatValue()</code>方法获取浮点值时，内部其实会将double转化为float，导致精度丢失。<br>所以要求使用BigDecimal提供的计算方法做四则运算，最后将结果返回指定数值类型。</p><h3 id="3-四舍五入"><a href="#3-四舍五入" class="headerlink" title="3. 四舍五入"></a>3. 四舍五入</h3><h4 id="3-1-ROUND-UP"><a href="#3-1-ROUND-UP" class="headerlink" title="3.1 ROUND_UP"></a>3.1 ROUND_UP</h4><blockquote><p>Rounding mode to round away from zero. Always increments the digit prior to a nonzero discarded fraction.</p></blockquote><p>不关心正负的无脑向上取整，远离0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_UP=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_UP));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_UP=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_UP));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_UP=6302079.1</div><div class="line">bigDecimalNegative ROUND_UP=-6302079.1</div></pre></td></tr></table></figure></p><h4 id="3-2-ROUND-DOWN"><a href="#3-2-ROUND-DOWN" class="headerlink" title="3.2 ROUND_DOWN"></a>3.2 ROUND_DOWN</h4><blockquote><p>Rounding mode to round towards zero. Never increments the digit prior to a discarded fraction (i.e., truncates).</p></blockquote><p>不关心正负的无脑向下取整，靠近0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_DOWN=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_DOWN));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_DOWN=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_DOWN));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_DOWN=6302079.0</div><div class="line">bigDecimalNegative ROUND_DOWN=-6302079.0</div></pre></td></tr></table></figure></p><h4 id="3-3-ROUND-CEILING"><a href="#3-3-ROUND-CEILING" class="headerlink" title="3.3 ROUND_CEILING"></a>3.3 ROUND_CEILING</h4><blockquote><p>Rounding mode to round towards positive infinity. If the BigDecimal is positive, behaves as for ROUND_UP; if negative, behaves as for ROUND_DOWN.</p></blockquote><p>向正无穷取整，如果是正值，那么表现跟ROUND_UP一样，如果是负值，那么表现跟ROUND_DOWN一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_CEILING=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_CEILING));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_CEILING=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_CEILING));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_CEILING=6302079.1</div><div class="line">bigDecimalNegative ROUND_CEILING=-6302079.0</div></pre></td></tr></table></figure></p><h4 id="3-4-ROUND-FLOOR"><a href="#3-4-ROUND-FLOOR" class="headerlink" title="3.4 ROUND_FLOOR"></a>3.4 ROUND_FLOOR</h4><blockquote><p>Rounding mode to round towards negative infinity. If the BigDecimal is positive, behave as for ROUND_DOWN; if negative, behave as for ROUND_UP.</p></blockquote><p>向负无穷取整，如果是正值，那么表现跟ROUND_DOWN一样，如果是负值，那么表现跟ROUND_UP一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_FLOOR=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_FLOOR));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_FLOOR=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_FLOOR));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_FLOOR=6302079.0</div><div class="line">bigDecimalNegative ROUND_FLOOR=-6302079.1</div></pre></td></tr></table></figure></p><h4 id="3-5-ROUND-HALF-UP"><a href="#3-5-ROUND-HALF-UP" class="headerlink" title="3.5 ROUND_HALF_UP"></a>3.5 ROUND_HALF_UP</h4><blockquote><p>Rounding mode to round towards “nearest neighbor” unless both neighbors are equidistant, in which case round up. Behaves as for ROUND_UP if the discarded fraction is ≥ 0.5; otherwise, behaves as for ROUND_DOWN.</p></blockquote><p>不关心正负的无脑四舍五入，如果是5，那么进位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_HALF_UP=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_UP));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_HALF_UP=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_UP));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_HALF_UP=6302079.1</div><div class="line">bigDecimalNegative ROUND_HALF_UP=-6302079.1</div></pre></td></tr></table></figure></p><h4 id="3-6-ROUND-HALF-DOWN"><a href="#3-6-ROUND-HALF-DOWN" class="headerlink" title="3.6 ROUND_HALF_DOWN"></a>3.6 ROUND_HALF_DOWN</h4><blockquote><p>Rounding mode to round towards “nearest neighbor” unless both neighbors are equidistant, in which case round down. Behaves as for ROUND_UP if the discarded fraction is &gt; 0.5; otherwise, behaves as for ROUND_DOWN.</p></blockquote><p>不关心正负的无脑四舍五入，如果是5，那么舍掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_DOWN));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_DOWN));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_HALF_DOWN=6302079.0</div><div class="line">bigDecimalNegative ROUND_HALF_DOWN=-6302079.0</div></pre></td></tr></table></figure></p><h4 id="3-7-ROUND-HALF-EVEN"><a href="#3-7-ROUND-HALF-EVEN" class="headerlink" title="3.7 ROUND_HALF_EVEN"></a>3.7 ROUND_HALF_EVEN</h4><blockquote><p>Rounding mode to round towards the “nearest neighbor” unless both neighbors are equidistant, in which case, round towards the even neighbor. Behaves as for ROUND_HALF_UP if the digit to the left of the discarded fraction is odd; behaves as for ROUND_HALF_DOWN if it’s even.</p></blockquote><p>不关心正负的无脑四舍五入，如果是5，那么看左边数字奇偶性，如果左边数字是奇数，那么进位，如果是偶数，那么舍掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    <span class="comment">// 最后一位的前一位是偶数，那么ROUND_HALF_EVEN等同与ROUND_HALF_DOWN</span></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_EVEN));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_EVEN));</div><div class="line"></div><div class="line">    <span class="comment">// 将最后一位的前一位变成奇数，那么ROUND_HALF_EVEN等同与ROUND_HALF_UP</span></div><div class="line">    bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.15"</span>);</div><div class="line">    bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.15"</span>);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_EVEN));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_EVEN));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_HALF_DOWN=6302079.0</div><div class="line">bigDecimalNegative ROUND_HALF_DOWN=-6302079.0</div><div class="line">bigDecimalPositive ROUND_HALF_DOWN=6302079.2</div><div class="line">bigDecimalNegative ROUND_HALF_DOWN=-6302079.2</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-构造函数的坑&quot;&gt;&lt;a href=&quot;#1-构造函数的坑&quot; class=&quot;headerlink&quot; title=&quot;1. 构造函数的坑&quot;&gt;&lt;/a&gt;1. 构造函数的坑&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BigDecimalTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;6302079.05&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      BigDecimal bigDecimalFromDouble = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigDecimal(number);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      LOGGER.info(&lt;span class=&quot;string&quot;&gt;&quot;bigDecimalFromDouble=&amp;#123;&amp;#125;&quot;&lt;/span&gt;, bigDecimalFromDouble);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      BigDecimal bigDecimalFromString = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigDecimal(String.valueOf(number)) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      LOGGER.info(&lt;span class=&quot;string&quot;&gt;&quot;bigDecimalFromString=&amp;#123;&amp;#125;&quot;&lt;/span&gt;, bigDecimalFromString);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bigDecimalFromDouble=6302079.049999999813735485076904296875&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bigDecimalFromString=6302079.05&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，直接使用double作为参数构造BigDecimal时，会丢失精度。&lt;br&gt;所以推荐的是先将double转化为字符串，然后赋值给构造函数。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>git配置信息管理</title>
    <link href="https://damon4u.github.io//blog/2018/09/git%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86.html"/>
    <id>https://damon4u.github.io//blog/2018/09/git配置信息管理.html</id>
    <published>2018-09-11T08:41:50.000Z</published>
    <updated>2018-09-11T14:41:01.020Z</updated>
    
    <content type="html"><![CDATA[<p>查看git全局设置信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config -l</div></pre></td></tr></table></figure></p><p>设置配置信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global user.name=&quot;Your Name&quot;</div></pre></td></tr></table></figure></p><p>这里的<code>--global</code>参数表示示你这台机器上所有的Git仓库都会使用用这个配置,当然也可以对某个仓库指定不同的用用户名和Email地址。</p><p>配置别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git config --global alias.st status</div><div class="line">git config --global alias.co checkout</div><div class="line">git config --global alias.ci commit</div><div class="line">git config --global alias.br branch</div><div class="line">git config --global alias.unstage &apos;reset HEAD&apos;</div><div class="line">git config --global alias.last &apos;log -1&apos;</div><div class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看git全局设置信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="git" scheme="https://damon4u.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://damon4u.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git远程仓库管理</title>
    <link href="https://damon4u.github.io//blog/2018/09/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86.html"/>
    <id>https://damon4u.github.io//blog/2018/09/git远程仓库管理.html</id>
    <published>2018-09-11T08:41:50.000Z</published>
    <updated>2018-09-11T14:39:45.501Z</updated>
    
    <content type="html"><![CDATA[<p>查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote -v</div></pre></td></tr></table></figure></p><p>添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:michaelliao/learngit.git</div></pre></td></tr></table></figure></p><p>修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin git@github.com:michaelliao/learngit.git</div></pre></td></tr></table></figure></p><p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote rm origin</div><div class="line">git remote add origin git@...git</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div 
      
    
    </summary>
    
      <category term="git" scheme="https://damon4u.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://damon4u.github.io/tags/git/"/>
    
  </entry>
  
</feed>
