<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>是五月呀！</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://damon4u.github.io/"/>
  <updated>2018-08-15T13:38:12.455Z</updated>
  <id>https://damon4u.github.io/</id>
  
  <author>
    <name>五月y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>maven版本控制插件</title>
    <link href="https://damon4u.github.io//blog/2018/08/maven%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%8F%92%E4%BB%B6.html"/>
    <id>https://damon4u.github.io//blog/2018/08/maven版本控制插件.html</id>
    <published>2018-08-15T08:41:50.000Z</published>
    <updated>2018-08-15T13:38:12.455Z</updated>
    
    <content type="html"><![CDATA[<p>versions-maven-plugin插件可以用来方便的管理父子模块的版本。</p><p>参考Versions Maven Plugin Doc <a href="https://www.mojohaus.org/versions-maven-plugin/usage.html" target="_blank" rel="external">Versions Maven Plugin</a></p><a id="more"></a><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h3><p>项目中经常会出现父子项目：<br>父pom<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact.parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>artifact.child1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>artifact.child2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div></pre></td></tr></table></figure></p><p>然后可能会有很多子module，<br>子模块1的pom<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact.parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact.child1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div></pre></td></tr></table></figure></p><p>子模块2的pom<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact.parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact.child2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div></pre></td></tr></table></figure></p><p>当项目版本升级时，需要修改父pom和所有子pom的版本，很繁琐。</p><p>versions-maven-plugin这个插件可以帮我们完成版本控制。</p><h3 id="2-引入插件"><a href="#2-引入插件" class="headerlink" title="2.引入插件"></a>2.引入插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;plugins&gt;</div><div class="line">    &lt;plugin&gt;</div><div class="line">        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;versions-maven-plugin&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;2.3&lt;/version&gt;</div><div class="line">    &lt;/plugin&gt;</div><div class="line">&lt;/plugins&gt;</div></pre></td></tr></table></figure><h3 id="3-升级版本"><a href="#3-升级版本" class="headerlink" title="3.升级版本"></a>3.升级版本</h3><p>使用<code>versions:set</code>命令，修改项目版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn versions:set -DnewVersion=1.0.1-SNAPSHOT</div></pre></td></tr></table></figure></p><p>或者在IDEA中双击，然后在运行界面输入新版本号。<br>此时会在项目中生成多个<code>pom.xml.versionBackup</code>文件。这些文件是用来回滚的。</p><h3 id="4-提交升级"><a href="#4-提交升级" class="headerlink" title="4.提交升级"></a>4.提交升级</h3><p>如果升级版本没有问题，使用<code>versions:commit</code>命令确认，会删除生成的多个<code>pom.xml.versionBackup</code>文件。<br>注意，执行这个命令后，就不能使用下面的回滚命令回滚到最初的版本了。</p><h3 id="5-回滚版本"><a href="#5-回滚版本" class="headerlink" title="5.回滚版本"></a>5.回滚版本</h3><p>使用<code>versions:revert</code>命令，回滚到备份中的版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn versions:revert</div></pre></td></tr></table></figure></p><p>或者在IDEA中双击即可，之前生成的<code>pom.xml.versionBackup</code>文件也会被删掉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;versions-maven-plugin插件可以用来方便的管理父子模块的版本。&lt;/p&gt;
&lt;p&gt;参考Versions Maven Plugin Doc &lt;a href=&quot;https://www.mojohaus.org/versions-maven-plugin/usage.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Versions Maven Plugin&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="maven" scheme="https://damon4u.github.io/categories/maven/"/>
    
    
      <category term="maven" scheme="https://damon4u.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>事务隔离性</title>
    <link href="https://damon4u.github.io//blog/2018/08/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E6%80%A7.html"/>
    <id>https://damon4u.github.io//blog/2018/08/事务隔离性.html</id>
    <published>2018-08-14T08:41:50.000Z</published>
    <updated>2018-08-14T13:48:18.069Z</updated>
    
    <content type="html"><![CDATA[<p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><a id="more"></a><h3 id="1-四种隔离级别"><a href="#1-四种隔离级别" class="headerlink" title="1. 四种隔离级别"></a>1. 四种隔离级别</h3><p>MySQL/InnoDB提供SQL标准所描述的所有四个事务隔离级别：</p><ul><li>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据</li><li>提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)</li><li>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，<strong>InnoDB默认级别</strong>。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读</li><li>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞</li></ul><p>按照SQL:1992 事务隔离级别，InnoDB默认是可重复读的（REPEATABLE READ）。</p><h3 id="2-设置和查看mysql的隔离级别"><a href="#2-设置和查看mysql的隔离级别" class="headerlink" title="2. 设置和查看mysql的隔离级别"></a>2. 设置和查看mysql的隔离级别</h3><p>可以在命令行用–transaction-isolation选项，或在选项文件里，为所有连接设置默认隔离级别。</p><p>例如，可以在my.inf文件的[mysqld]节里类似如下设置该选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transaction-isolation = &#123;READ-UNCOMMITTED | READ-COMMITTED | REPEATABLE-READ | SERIALIZABLE&#125;</div></pre></td></tr></table></figure></p><p>用户可以用SET TRANSACTION语句改变单个会话或者所有新进连接的隔离级别。它的语法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> [<span class="keyword">SESSION</span> | <span class="keyword">GLOBAL</span>] <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> &#123;<span class="keyword">READ</span> UNCOMMITTED | <span class="keyword">READ</span> COMMITTED | REPEATABLE <span class="keyword">READ</span> | <span class="keyword">SERIALIZABLE</span>&#125;</div></pre></td></tr></table></figure></p><p>注意：默认的行为（不带session和global）是为下一个（未开始）事务设置隔离级别。如果你使用GLOBAL关键字，语句在全局对从那点开始创建的所有新连接（除了不存在的连接）设置默认事务级别。你需要SUPER权限来做这个。使用SESSION 关键字为将来在当前连接上执行的事务设置默认事务级别。 任何客户端都能自由改变会话隔离级别（甚至在事务的中间），或者为下一个事务设置隔离级别。</p><p>可以用下列语句查询全局和会话事务隔离级别：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> @@global.tx_isolation;</div><div class="line"><span class="keyword">SELECT</span> @@session.tx_isolation;</div><div class="line"><span class="keyword">SELECT</span> @@tx_isolation;</div></pre></td></tr></table></figure></p><h3 id="3-事务隔离性相关的问题"><a href="#3-事务隔离性相关的问题" class="headerlink" title="3. 事务隔离性相关的问题"></a>3. 事务隔离性相关的问题</h3><h4 id="3-1-脏读"><a href="#3-1-脏读" class="headerlink" title="3.1 脏读"></a>3.1 脏读</h4><p>脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。<br>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。<br>session 1:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@global.tx_isolation;</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| @@global.tx_isolation |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| REPEATABLE-READ       |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">select</span> @@session.tx_isolation;</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| REPEATABLE-READ       |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into ttd values(1);</div><div class="line">Query OK, 1 row affected (0.05 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p><p>session 2:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| REPEATABLE-READ        |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">select</span> @@global.tx_isolation;</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| @@global.tx_isolation |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| REPEATABLE-READ   |        <span class="comment">--------该隔离级别下(除了 read uncommitted)</span></div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> ttd;</div><div class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)         <span class="comment">--------不会出现脏读</span></div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| READ-UNCOMMITTED       |   <span class="comment">--------该隔离级别下</span></div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |                     <span class="comment">--------出现脏读</span></div><div class="line"></div><div class="line">+<span class="comment">------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p><p>结论:session 2 在READ-UNCOMMITTED 下读取到session 1 中未提交事务修改的数据.</p><h4 id="3-2-不可重复读"><a href="#3-2-不可重复读" class="headerlink" title="3.2 不可重复读"></a>3.2 不可重复读</h4><p>是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。<br>不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。<br>session 1:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| READ-COMMITTED         |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p><p>session 2 :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| REPEATABLE-READ        |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">insert</span> <span class="keyword">into</span> ttd <span class="keyword">values</span>(<span class="number">2</span>);  <span class="comment">------也可以更新数据</span></div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |</div><div class="line">|    2 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">commit</span>;</div><div class="line">Query OK, 0 rows affected (0.02 sec)</div></pre></td></tr></table></figure></p><p>session 2 提交后,查看session 1 的结果;</p><p>session 1:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |                          <span class="comment">--------和第一次的结果不一样,READ-COMMITTED 级别出现了不重复读</span></div><div class="line">|    2 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p><h4 id="3-3-可重复读"><a href="#3-3-可重复读" class="headerlink" title="3.3 可重复读"></a>3.3 可重复读</h4><p>session 1:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| REPEATABLE-READ        |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |</div><div class="line">|    2 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p><p>session 2 :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| REPEATABLE-READ        |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into ttd values(3);</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; commit;</div><div class="line">Query OK, 0 rows affected (0.03 sec)</div></pre></td></tr></table></figure></p><p>session 2 提交后,查看session 1 的结果;</p><p>session 1:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |    <span class="comment">--------和第一次的结果一样,REPEATABLE-READ级别没出现重复读</span></div><div class="line">|    2 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">(<span class="keyword">commit</span> <span class="keyword">session</span> <span class="number">1</span> 之后 再<span class="keyword">select</span> * <span class="keyword">from</span> ttd 可以看到<span class="keyword">session</span> <span class="number">2</span> 插入的数据<span class="number">3</span>)</div></pre></td></tr></table></figure></p><h4 id="3-4-幻读"><a href="#3-4-幻读" class="headerlink" title="3.4 幻读"></a>3.4 幻读</h4><p>第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mysql&gt;CREATE TABLE `t_bitfly` (</div><div class="line">`id` bigint(20) NOT NULL default '0',</div><div class="line">`value` varchar(32) default NULL,</div><div class="line">PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB</div><div class="line"></div><div class="line">mysql&gt; select @@global.tx_isolation, @@tx_isolation;</div><div class="line">+<span class="comment">-----------------------+-----------------+</span></div><div class="line">| @@global.tx_isolation | @@tx_isolation  |</div><div class="line">+<span class="comment">-----------------------+-----------------+</span></div><div class="line">| REPEATABLE-READ       | REPEATABLE-READ |</div><div class="line">+<span class="comment">-----------------------+-----------------+</span></div></pre></td></tr></table></figure><p>实验一：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">t Session A                   Session B</div><div class="line">|</div><div class="line">| <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;          <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| empty <span class="keyword">set</span></div><div class="line">|                             <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_bitfly</div><div class="line">|                             <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'a'</span>);</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| empty <span class="keyword">set</span></div><div class="line">|                             <span class="keyword">COMMIT</span>;</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| empty <span class="keyword">set</span></div><div class="line">|</div><div class="line">| <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_bitfly <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'a'</span>);</div><div class="line">| ERROR 1062 (23000):</div><div class="line">| Duplicate entry '1' for key 1</div><div class="line">v (shit, 刚刚明明告诉我没有这条记录的)</div></pre></td></tr></table></figure></p><p>如此就出现了幻读，以为表里没有数据，其实数据已经存在了，傻乎乎的提交后，才发现数据冲突了。</p><p>实验二：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">t Session A                  Session B</div><div class="line">|</div><div class="line">| <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;         <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| | id   | value |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| |    1 | a     |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">|                            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_bitfly</div><div class="line">|                            <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'b'</span>);</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| | id   | value |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| |    1 | a     |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">|                            <span class="keyword">COMMIT</span>;</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| | id   | value |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| |    1 | a     |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">|</div><div class="line">| <span class="keyword">UPDATE</span> t_bitfly <span class="keyword">SET</span> <span class="keyword">value</span>=<span class="string">'z'</span>;</div><div class="line">| Rows matched: 2  Changed: 2  Warnings: 0</div><div class="line">| (怎么多出来一行)</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| | id   | value |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| |    1 | z     |</div><div class="line">| |    2 | z     |</div><div class="line">| +<span class="comment">------+-------+</span></div></pre></td></tr></table></figure></p><p>本事务中第一次读取出一行，做了一次更新后，另一个事务里提交的数据就出现了。也可以看做是一种幻读。<br><strong>当隔离级别是可重复读，且禁用innodb_locks_unsafe_for_binlog的情况下，在搜索和扫描index的时候使用的next-key locks可以避免幻读。</strong></p><h3 id="4-生产环境遇到的问题"><a href="#4-生产环境遇到的问题" class="headerlink" title="4. 生产环境遇到的问题"></a>4. 生产环境遇到的问题</h3><h4 id="4-1-事务未提交导致数据读取失败"><a href="#4-1-事务未提交导致数据读取失败" class="headerlink" title="4.1 事务未提交导致数据读取失败"></a>4.1 事务未提交导致数据读取失败</h4><p>背景：项目做了读写分离，事务标注的方法会使用主库进行写操作。项目中将缓存管理抽离出来，例如UserManager，其中使用单独的读库配置来加载数据到缓存。<br>在用户注册逻辑中，最外层有事务注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">  <span class="comment">// 1. 保存到数据库中</span></div><div class="line">  userDao.save(userName);</div><div class="line">  <span class="comment">// 2. 预热缓存，并从缓存中读取数据，这里读取到的user未空</span></div><div class="line">  User user = userManager.get(userName);</div><div class="line">  <span class="comment">// 3. 使用user，报错NPE</span></div><div class="line">  user.getUserName();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>方法使用事务注解，将使用主库进行数据写操作。当事务还没有被提交时，userManager尝试读取从库中的数据到缓存，是读取不到的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。&lt;/p&gt;
&lt;p&gt;即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://damon4u.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://damon4u.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>貂蝉</title>
    <link href="https://damon4u.github.io//blog/2018/08/%E8%B2%82%E8%9D%89.html"/>
    <id>https://damon4u.github.io//blog/2018/08/貂蝉.html</id>
    <published>2018-08-10T09:41:50.000Z</published>
    <updated>2018-08-10T09:20:38.151Z</updated>
    
    <content type="html"><![CDATA[<p>貂蝉。</p><p><code>今夜我就是你的圣诞礼物，喜欢吗</code></p><p><img src="/images/wzry8.gif" alt=""></p><a id="more"></a><p>1、今夜我就是你的圣诞礼物，喜欢吗</p><p>2、圣诞快乐</p><p>3、平安夜，想要和你一起度过</p><p>4、叮叮当，叮叮当，铃儿响叮当</p><p>5、子龙哥哥，纵使天各一方，小蝉依然～～</p><p>6、糖果和我，谁更甜蜜?</p><p>7、有你的陪伴，一点都不冷哦~</p><p>8、去吧，怒放吧，花开咯</p><p>9、又欺负人呀</p><p>10、来打雪仗吧</p><p>11、平安夜的邂逅，可怜的家伙，果然一生孤独</p><p>翻盘<br><img src="/images/wzry9.gif" alt=""></p><p>双排<br><img src="/images/wzry10.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;貂蝉。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;今夜我就是你的圣诞礼物，喜欢吗&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wzry8.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
  </entry>
  
  <entry>
    <title>阿轲</title>
    <link href="https://damon4u.github.io//blog/2018/08/%E9%98%BF%E8%BD%B2.html"/>
    <id>https://damon4u.github.io//blog/2018/08/阿轲.html</id>
    <published>2018-08-10T08:41:50.000Z</published>
    <updated>2018-08-14T15:54:09.541Z</updated>
    
    <content type="html"><![CDATA[<p>阿轲。</p><p><code>致命芳华</code></p><p><img src="/images/wzry3.jpeg" alt=""></p><a id="more"></a><p>1、不是你记忆中的荆轲，但致命的程度，没两样</p><p>2、我，是你惹不起的</p><p>3、非死不可</p><p>4、不知道你的名字，但清楚你的死期</p><p>5、你已经死了</p><p>6、没我快</p><p>7、只相信本能</p><p>8、想叫就叫吧，反正是最后一声了</p><p>第一次五杀<br><img src="/images/wzry6.gif" alt=""></p><p>开黑时带躺<br><img src="/images/wzry7.gif" alt=""></p><p>第一次大神推荐<br><img src="/images/wzry4.png" alt=""></p><p>第一次单排上王者<br><img src="/images/wzry5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿轲。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;致命芳华&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wzry3.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
  </entry>
  
  <entry>
    <title>元歌</title>
    <link href="https://damon4u.github.io//blog/2018/08/%E5%85%83%E6%AD%8C.html"/>
    <id>https://damon4u.github.io//blog/2018/08/元歌.html</id>
    <published>2018-08-10T03:41:50.000Z</published>
    <updated>2018-08-15T01:39:24.274Z</updated>
    
    <content type="html"><![CDATA[<p>元歌。</p><p><code>1433223</code></p><p><img src="/images/wzry2.gif" alt=""></p><a id="more"></a><p>1、幸福令人畏惧，更钟情绝望的美学</p><p>2、为战斗加点品味，加点恶作剧，嗯——会很有趣！</p><p>3、无间道的游戏，可以很有趣的哦——</p><p>4、人生如戏——全靠演技——</p><p>5、追随！阿亮的追随——</p><p>6、法则和禁忌存在的意义不就是被打破吗？</p><p>7、美是致命的愉悦！</p><p>8、命运这种事，无法拒绝呀——</p><p>9、随指尖而舞</p><p>10、据说文案已想不出更美妙的语言，来赞美我的杰作和你的死亡。</p><p>11、好像听到了阿亮的呼唤，嗯，哼哼哼……嗯嘻，背负起这罪孽与你同行！</p><p>12、操纵木偶和操纵心灵是同样的艺术</p><p>13、得偿所愿——</p><p>14、喧哗与骚动</p><p>15、哼，本就没什么永恒，又何必在乎后悔</p><p>16、生得渺小，死得精彩</p><p>17、我生命的提线，掌握在你手中</p><p>18、生命绽放于战场，璀璨，却仅限于你的眼中</p><p>19、栩栩如生的死亡</p><p>20、嘻，抛弃一切，站在你身边</p><p>21、去吧，哈哈哈……</p><p>22、做个安静的美男子</p><p>23、无欲无求，笑口常开</p><p>24、哪一个才是真正的我，我自己也不太明白</p><p><img src="/images/wzry1.gif" alt=""></p><p><img src="/images/wzry11.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;元歌。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1433223&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wzry2.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
  </entry>
  
  <entry>
    <title>maven依赖传递性</title>
    <link href="https://damon4u.github.io//blog/2018/08/maven%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E6%80%A7.html"/>
    <id>https://damon4u.github.io//blog/2018/08/maven依赖传递性.html</id>
    <published>2018-08-08T09:41:50.000Z</published>
    <updated>2018-08-14T13:48:18.069Z</updated>
    
    <content type="html"><![CDATA[<p>参考Maven Doc <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" target="_blank" rel="external">Introduction to the Dependency Mechanism</a></p><a id="more"></a><h3 id="1-Transitive-Dependencies（依赖传递性）"><a href="#1-Transitive-Dependencies（依赖传递性）" class="headerlink" title="1.Transitive Dependencies（依赖传递性）"></a>1.Transitive Dependencies（依赖传递性）</h3><p>依赖传递这种特性可以帮助我们自动引入依赖包所需要的类，递归的。</p><ul><li>依赖机制：当项目中的依赖有多个版本（间接依赖）时，maven会使用“最短引用原则”决定最终使用哪个版本。如果引用树深度一样，那么会使用先声明的那个。</li><li>dependencyManagement：直接管理项目中依赖的版本，直接依赖或者间接依赖。</li><li>scope：这个字段允许指定依赖的作用范围。</li><li>exclusions：如果项目x依赖项目y，项目y依赖项目z，那么项目x的拥有者可以显示的排除项目z。</li><li>optional：如果项目y依赖项目z，项目y可以将对z的引用标识为optional，这样，当项目x引用项目y时，项目x就不会引入项目z。<strong>可以将optional理解为默认excluded。</strong></li></ul><h3 id="2-Dependency-Scope（依赖作用域）"><a href="#2-Dependency-Scope（依赖作用域）" class="headerlink" title="2.Dependency Scope（依赖作用域）"></a>2.Dependency Scope（依赖作用域）</h3><p>首先说一下classpath分类：</p><ul><li>compile classpath</li><li>test classpath</li><li>runtime classpath</li></ul><h4 id="2-1-complie"><a href="#2-1-complie" class="headerlink" title="2.1 complie"></a>2.1 complie</h4><p>默认就是compile。compile表示被依赖项目需要参与当前项目的编译，当然后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去。</p><h4 id="2-2-provided"><a href="#2-2-provided" class="headerlink" title="2.2 provided"></a>2.2 provided</h4><p>provided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是在打包阶段做了exclude的动作。<br>例如servlet，tomcat等web容易会提供。还有lombok，它在运行期不需要。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servletapi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="2-3-runtime"><a href="#2-3-runtime" class="headerlink" title="2.3 runtime"></a>2.3 runtime</h4><p>runtime表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。<br>例如slf4j，运行期依赖。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="2-4-test"><a href="#2-4-test" class="headerlink" title="2.4 test"></a>2.4 test</h4><p>scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。<br>比较典型的如junit。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="2-5-system"><a href="#2-5-system" class="headerlink" title="2.5 system"></a>2.5 system</h4><p>从参与度来说，也provided相同，不过被依赖项不会从maven仓库抓，而是从本地文件系统拿，一定需要配合<code>systemPath</code>属性使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考Maven Doc &lt;a href=&quot;https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to the Dependency Mechanism&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="maven" scheme="https://damon4u.github.io/categories/maven/"/>
    
    
      <category term="maven" scheme="https://damon4u.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>IDEA重写toString()模板</title>
    <link href="https://damon4u.github.io//blog/2018/07/IDEA%E9%87%8D%E5%86%99toString()%E6%A8%A1%E6%9D%BF.html"/>
    <id>https://damon4u.github.io//blog/2018/07/IDEA重写toString()模板.html</id>
    <published>2018-07-13T09:41:50.000Z</published>
    <updated>2018-08-10T06:11:00.805Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA中默认生成的toString()方法使用加号拼接，并且加号在每一行的末尾，导致checkstyle检查不通过，并且，如果频繁打印日志，也会产生大量字符串常量。<br>下面通过重写toString()方法，将其改为StringBuilder拼接Json。</p><a id="more"></a><p>首先在某个类中输入快捷键<code>Ctrl+Enter</code>，弹出的Generate对话框中选择toString()，然后选择Settings：<br><img src="/images/idea1.jpeg" alt=""><br>在模板中点击新增：<br><img src="/images/idea2.jpeg" alt=""><br>名字随便起，内容填写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> java.lang.<span class="function">String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">final</span> java.lang.StringBuilder sb = <span class="keyword">new</span> java.lang.StringBuilder(<span class="string">"$classname&#123;"</span>);</div><div class="line">#set ($i = 0)</div><div class="line">#foreach ($member in $members)#if ($i == 0)</div><div class="line">sb.append(<span class="string">"#####</span></div><div class="line"><span class="string">#else</span></div><div class="line">sb.append(",####</div><div class="line">#end#if ($member.string || $member.date)</div><div class="line">\<span class="string">"$member.name\":\""</span>)</div><div class="line">#else</div><div class="line">\<span class="string">"$member.name\":"</span>)</div><div class="line">#end#if ($member.primitiveArray || $member.objectArray)</div><div class="line">.append(java.util.Arrays.toString($member.name));</div><div class="line">#elseif ($member.string || $member.date)</div><div class="line">.append($member.accessor).append(<span class="string">'\"'</span>);</div><div class="line">#else</div><div class="line">.append($member.accessor);</div><div class="line">#end#set ($i = $i + 1)</div><div class="line">#end</div><div class="line">sb.append(<span class="string">'&#125;'</span>);</div><div class="line"><span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDEA中默认生成的toString()方法使用加号拼接，并且加号在每一行的末尾，导致checkstyle检查不通过，并且，如果频繁打印日志，也会产生大量字符串常量。&lt;br&gt;下面通过重写toString()方法，将其改为StringBuilder拼接Json。&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg常用操作</title>
    <link href="https://damon4u.github.io//blog/2018/07/ffmpeg.html"/>
    <id>https://damon4u.github.io//blog/2018/07/ffmpeg.html</id>
    <published>2018-07-06T09:41:50.000Z</published>
    <updated>2018-08-10T07:49:13.870Z</updated>
    
    <content type="html"><![CDATA[<p>在做直播相关工作的过程中，经常会使用ffmpeg这一音视频处理工具，它能够帮助我们完成很多有趣的任务。</p><a id="more"></a><h3 id="1-提取mp3"><a href="#1-提取mp3" class="headerlink" title="1. 提取mp3"></a>1. 提取mp3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i av.flv -f mp3 av.mp3</div></pre></td></tr></table></figure><h3 id="2-将点播文件转推"><a href="#2-将点播文件转推" class="headerlink" title="2. 将点播文件转推"></a>2. 将点播文件转推</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -timeout 3000000 -re -i $fileUrl -c copy -f flv $pushUrl</div></pre></td></tr></table></figure><p>这里简单的使用-c copy模式，即音视频按照原始码率推出去。如果是mp4格式，需要h264编码。<br>如果需要转码，那么可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -timeout 3000000 -re -i $fileUrl -acodec copy -vcodec libx264 -s 1280x720 -b:v 1000k -f flv $pushUrl</div></pre></td></tr></table></figure></p><h3 id="3-拉流转推"><a href="#3-拉流转推" class="headerlink" title="3. 拉流转推"></a>3. 拉流转推</h3><p>一般拉流地址有两种，一种是常用的rtmp协议，那么命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i &quot;$outerUrl&quot; -c copy -f flv &quot;$pushUrl&quot;</div></pre></td></tr></table></figure></p><p>第二种是flv格式的http协议流，那么命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i &quot;$outerUrl live=1&quot; -c copy -f flv &quot;$pushUrl&quot;</div></pre></td></tr></table></figure></p><p>这里<code>live=1</code>表示实时拉流。</p><h3 id="4-拉流截图"><a href="#4-拉流截图" class="headerlink" title="4. 拉流截图"></a>4. 拉流截图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -timeout 3000000 -v error -i &quot;$pullUrl&quot; -vframes 1 -f image2 -y $outputFile</div></pre></td></tr></table></figure><h3 id="5-视频转gif"><a href="#5-视频转gif" class="headerlink" title="5. 视频转gif"></a>5. 视频转gif</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -ss 25 -t 10 -i xxx.mp4 -f gif -r 15 -s 540x300 xxx.gif</div></pre></td></tr></table></figure><p>-ss 指定从第25秒开始<br>-t 指定播放10秒<br>-f 指定输出格式为gif<br>-r 指定帧率为15fps<br>-s 指定分辨率为540x300</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做直播相关工作的过程中，经常会使用ffmpeg这一音视频处理工具，它能够帮助我们完成很多有趣的任务。&lt;/p&gt;
    
    </summary>
    
      <category term="ffmpeg" scheme="https://damon4u.github.io/categories/ffmpeg/"/>
    
    
      <category term="ffmpeg" scheme="https://damon4u.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>使用checkstyle进行代码检查</title>
    <link href="https://damon4u.github.io//blog/2018/06/checkstyle.html"/>
    <id>https://damon4u.github.io//blog/2018/06/checkstyle.html</id>
    <published>2018-06-29T09:41:50.000Z</published>
    <updated>2018-07-11T13:18:11.171Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Leave the campground cleaner than you found it. (要让离开时的营地比进入时更加干净。)</p></blockquote><p>作为一名程序员，对代码格式要有一些基本的要求，比如命名规范，空格等。<br>良好的代码规范不仅能让项目看起来干净，还能够减少低级错误，提高代码质量。<br>目前普遍认同阿里巴巴提供的代码规范<a href="https://102.alibaba.com/downloadFile.do?file=1528269849853/Java_manual.pdf" target="_blank" rel="external">阿里巴巴Java开发手册</a></p><p>在团队中口头要求可能达不到约束的作用，checkstyle配合IDEA插件可以在编译器做静态代码检查。</p><a id="more"></a><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1. 配置"></a>1. 配置</h3><p>首先安装IDEA插件<code>CheckStyle-IDEA</code>:<br><img src="/images/checkstyle1.jpeg" alt=""><br>重启IDEA后，底部工具拦会出现CheckStyle窗口，点开可以看到相关功能：</p><p><img src="/images/checkstyle2.jpeg" alt=""></p><ol><li>切换检查模版文件</li><li>对当前文件进行检查</li><li>对当前module进行检查</li><li>对当前项目进行检查</li></ol><p>其中插件自带两个模板文件，一个是Sun公司提供的，一个是Google提供的，这两个检查相对严格，不建议直接使用。<br>这里我们自己添加一个模版文件，只做必要的检查：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE module PUBLIC</span></div><div class="line"><span class="meta">    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"</span></div><div class="line"><span class="meta">    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd"&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"Checker"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 检查文件是否以一个空行结束 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NewlineAtEndOfFile"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 文件长度不超过1500行 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"FileLength"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"1500"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 每个java文件一个语法树 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TreeWalker"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- import检查--&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 避免使用* --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AvoidStarImport"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"excludes"</span> <span class="attr">value</span>=<span class="string">"java.io,java.net,java.lang.Math"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 实例；import java.util.*;.--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowClassImports"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 实例 ；import static org.junit.Assert.*;--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowStaticMemberImports"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查是否从非法的包中导入了类 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"IllegalImport"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查是否导入了多余的包 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RedundantImport"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 没用的import检查，比如：1.没有被用到2.重复的3.import java.lang的4.import 与该类在同一个package的 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"UnusedImports"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 注释检查 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查构造函数的javadoc --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"JavadocType"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"allowUnknownTags"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"javadoc.missing"</span> <span class="attr">value</span>=<span class="string">"类注释：缺少Javadoc注释。"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 命名检查 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 局部的final变量，包括catch中的参数的检查 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LocalFinalVariableName"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 局部的非final型的变量，包括catch中的参数的检查 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LocalVariableName"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 包名的检查（只允许小写字母），默认^[a-z]+(\.[a-zA-Z_][a-zA-Z_0-9_]*)*$ --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;module name="PackageName"&gt;</span></div><div class="line"><span class="comment">            &lt;property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" /&gt;</span></div><div class="line"><span class="comment">            &lt;message key="name.invalidPattern" value="包名 ''&#123;0&#125;'' 要符合 ''&#123;1&#125;''格式."/&gt;</span></div><div class="line"><span class="comment">        &lt;/module&gt; --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 仅仅是static型的变量（不包括static final型）的检查 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"StaticVariableName"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Class或Interface名检查，默认^[A-Z][a-zA-Z0-9]*$--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TypeName"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"severity"</span> <span class="attr">value</span>=<span class="string">"warning"</span>/&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">"name.invalidPattern"</span> <span class="attr">value</span>=<span class="string">"名称 ''&#123;0&#125;'' 要符合 ''&#123;1&#125;''格式."</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 非static型变量的检查 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MemberName"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 方法名的检查 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MethodName"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 方法的参数名 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ParameterName "</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 常量名的检查（只允许大写），默认^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$ --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ConstantName"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 定义检查 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查数组类型定义的样式 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ArrayTypeStyle"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查long型定义是否有大写的“L” --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"UpperEll"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 长度检查 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 每行不超过140个字符 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LineLength"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"140"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 方法不超过50行 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MethodLength"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"METHOD_DEF"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"60"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 方法的参数个数不超过5个。 并且不对构造方法进行检查--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ParameterNumber"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreOverriddenMethods"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"METHOD_DEF"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 空格检查--&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 方法名后跟左圆括号"(" --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MethodParamPad"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 在类型转换时，不允许左圆括号右边有空格，也不允许与右圆括号左边有空格 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"TypecastParenPad"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查在某个特定关键字之后应保留空格 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NoWhitespaceAfter"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查在某个特定关键字之前应保留空格 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NoWhitespaceBefore"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 操作符换行策略检查 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"OperatorWrap"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 圆括号空白 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ParenPad"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查分隔符是否在空白之后 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"WhitespaceAfter"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查分隔符周围是否有空白 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"WhitespaceAround"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 修饰符检查 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查修饰符的顺序是否遵照java语言规范，默认public、protected、private、abstract、static、final、transient、volatile、synchronized、native、strictfp --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"ModifierOrder"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查接口和annotation中是否有多余修饰符，如接口方法不必使用public --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RedundantModifier"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 代码块检查 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查是否有嵌套代码块 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"AvoidNestedBlocks"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查是否有空代码块 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EmptyBlock"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查左大括号位置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"LeftCurly"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查代码块是否缺失&#123;&#125; --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NeedBraces"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查右大括号位置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"RightCurly"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 代码检查 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查空的代码段 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EmptyStatement"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查在重写了equals方法后是否重写了hashCode方法 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"EqualsHashCode"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查局部变量或参数是否隐藏了类中的变量 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"HiddenField"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tokens"</span> <span class="attr">value</span>=<span class="string">"VARIABLE_DEF"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查子表达式中是否有赋值操作 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"InnerAssignment"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查是否有"魔术"数字 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MagicNumber"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreNumbers"</span> <span class="attr">value</span>=<span class="string">"0, 1"</span>/&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreAnnotation"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查switch语句是否有default --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"MissingSwitchDefault"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查是否有过度复杂的布尔表达式 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SimplifyBooleanExpression"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查是否有过于复杂的布尔返回代码段 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SimplifyBooleanReturn"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 类设计检查 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查类是否为扩展设计l --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查只有private构造函数的类是否声明为final --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"FinalClass"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查接口是否仅定义类型 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"InterfaceIsType"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查类成员的可见度 检查类成员的可见性。只有static final 成员是public的</span></div><div class="line"><span class="comment">        除非在本检查的protectedAllowed和packagedAllowed属性中进行了设置--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"VisibilityModifier"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packageAllowed"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"protectedAllowed"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 语法 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- String的比较不能用!= 和 == --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"StringLiteralEquality"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 限制for循环最多嵌套2层 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NestedForDepth"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- if最多嵌套3层 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NestedIfDepth"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 检查未被注释的main方法,排除以Appllication结尾命名的类 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"UncommentedMain"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"excludedClasses"</span> <span class="attr">value</span>=<span class="string">".*[Application,Test]$"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 禁止使用System.out.println --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"Regexp"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format"</span> <span class="attr">value</span>=<span class="string">"System\.out\.println"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"illegalPattern"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- return个数 3个--&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;module name="ReturnCount"&gt;</span></div><div class="line"><span class="comment">            &lt;property name="max" value="3"/&gt;</span></div><div class="line"><span class="comment">        &lt;/module&gt; --&gt;</span></div><div class="line">        <span class="comment">&lt;!--try catch 异常处理数量 3--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"NestedTryDepth "</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"max"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- clone方法必须调用了super.clone() --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SuperClone"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- finalize 必须调用了super.finalize() --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">"SuperFinalize"</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></div></pre></td></tr></table></figure></p><p>新建一个文件，命名可以任意，然后在插件配置中，添加该模板文件即可：<br><img src="/images/checkstyle3.jpeg" alt=""></p><h3 id="2-常见的代码规范"><a href="#2-常见的代码规范" class="headerlink" title="2. 常见的代码规范"></a>2. 常见的代码规范</h3><h4 id="2-1-命名风格"><a href="#2-1-命名风格" class="headerlink" title="2.1 命名风格"></a>2.1 命名风格</h4><ol><li>代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</li><li>类名使用<code>UpperCamelCase</code>风格。</li><li>方法名、参数名、成员变量、局部变量都统一使用<code>lowerCamelCase</code>风格，必须遵从 驼峰形式。</li><li>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</li><li>POJO 类中布尔类型的变量，都不要加<code>is</code>前缀，否则部分框架解析会引起序列化错误。<br>反例:定义为基本数据类型Boolean isDeleted的属性，它的方法也是isDeleted()，RPC框架在反向解析的时候，“误以为”对应的属性名称是 deleted，导致属性获取不到，进而抛出异常。</li><li>包名尽量使用小写，但有时会出现多个单词组合的情况，那么也使用<code>lowerCamelCase</code>风格即可。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</li><li>接口类中的方法和属性不要加任何修饰符号(public也不要加)，保持代码的简洁性，并加上有效的<code>Javadoc</code>注释。尽量不要在接口里定义变量，如果一定要定义变量，肯定是与接口方法相关，并且是整个应用的基础常量。</li><li>【参考】Service/DAO层方法命名规约:<blockquote><ul><li>获取单个对象的方法用get做前缀。</li><li>获取多个对象的方法用list做前缀，复数形式结尾如:listObjects。</li><li>获取统计值的方法用count做前缀。</li><li>插入的方法用save/insert做前缀。</li><li>删除的方法用remove/delete做前缀。</li><li>修改的方法用update做前缀。</li></ul></blockquote></li></ol><h4 id="2-2-常量定义"><a href="#2-2-常量定义" class="headerlink" title="2.2 常量定义"></a>2.2 常量定义</h4><ol><li>不允许任何魔法值(即未经预先定义的常量)直接出现在代码中。</li><li>在 long 或者 Long 赋值时，数值后使用大写的 L，不能是小写的 l，小写容易跟数字 1 混淆，造成误解。</li><li>不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。</li><li>如果变量值仅在一个固定范围内变化用 enum 类型来定义。</li></ol><h4 id="2-3-代码格式"><a href="#2-3-代码格式" class="headerlink" title="2.3 代码格式"></a>2.3 代码格式</h4><ol><li><p>基本的格式示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">// 缩进 4 个空格. 注释的双斜线与注释内容之间有且仅有一个空格。</span></div><div class="line">    String say = <span class="string">"hello"</span>;</div><div class="line">    <span class="comment">// 运算符的左右必须有一个空格</span></div><div class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格</span></div><div class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</div><div class="line">        System.out.println(say);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 左大括号前加空格且不换行;左大括号后换行</span></div><div class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</div><div class="line">        System.out.println(<span class="string">"world"</span>);</div><div class="line">    <span class="comment">// 右大括号前换行，右大括号后有 else，不用换行</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(<span class="string">"ok"</span>);</div><div class="line">    <span class="comment">// 在右大括号后直接结束，则必须换行</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>单行字符数限制不超过 120 个，超出需要换行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line"><span class="comment">// 超过 120 个字符的情况下，换行缩进 4 个空格，点号和方法名称一起换行</span></div><div class="line">sb.append(<span class="string">"zi"</span>).append(<span class="string">"xin"</span>)...</div><div class="line">    .append(<span class="string">"huang"</span>)...</div><div class="line">    .append(<span class="string">"huang"</span>)...</div><div class="line">    .append(<span class="string">"huang"</span>);</div></pre></td></tr></table></figure></li><li><p>方法参数在定义和传入时，多个参数逗号后边必须加空格。</p></li><li>【推荐】单个方法的总行数不超过 80 行。</li><li>【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</li></ol><h4 id="2-4-OOP-规约"><a href="#2-4-OOP-规约" class="headerlink" title="2.4 OOP 规约"></a>2.4 OOP 规约</h4><ol><li>所有的覆写方法，必须加@Override 注解。</li><li>Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。如<code>&quot;test&quot;.equals(object);</code></li><li>所有的相同类型的包装类对象之间值的比较，全部使用<code>equals</code>方法比较。对于 <code>Integer var = ?</code> 在-128 至 127 范围内的赋值，Integer 对象是在 IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行 判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑， 推荐使用 equals 方法进行判断。</li><li>关于基本数据类型与包装数据类型的使用标准如下:<blockquote><ul><li>【强制】所有的POJO类属性必须使用包装数据类型。POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何NPE 问题，或者入库检查，都由使用者来保证。数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</li><li>【强制】RPC方法的返回值和参数必须使用包装数据类型。</li><li>【推荐】所有的局部变量使用基本数据类型。</li></ul></blockquote></li><li>定义 DO/DTO/VO 等 POJO 类时，不要设定任何属性默认值。POJO 类的 createTime 默认值为 new Date()，但是这个属性在数据提取时并没有置入具体值，在更新其它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</li><li>POJO 类必须写 toString 方法。使用 IDE 中的工具:source&gt; generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString。不要使用JSON工具类实现，因为json序列化有性能消耗。</li></ol><h4 id="2-5-日志"><a href="#2-5-日志" class="headerlink" title="2.5 日志"></a>2.5 日志</h4><p>调试时使用的日志，上线前必须删除。<br>关键逻辑必须记录日志，并包含相关参数信息。写下这条日志时，要清楚其作用，怎么定位，能用来挽救谁的性命。<br>日志需要控制级别，大量地输出无效日志，不利于系统性能提升，也不利于快速定位错误点。<br>统一使用slf4j日志框架，不要使用加号拼接参数，而是使用占位符。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logger.debug(<span class="string">"Processing trade with id: &#123;&#125; and symbol : &#123;&#125; "</span>, id, symbol);</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Leave the campground cleaner than you found it. (要让离开时的营地比进入时更加干净。)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一名程序员，对代码格式要有一些基本的要求，比如命名规范，空格等。&lt;br&gt;良好的代码规范不仅能让项目看起来干净，还能够减少低级错误，提高代码质量。&lt;br&gt;目前普遍认同阿里巴巴提供的代码规范&lt;a href=&quot;https://102.alibaba.com/downloadFile.do?file=1528269849853/Java_manual.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里巴巴Java开发手册&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在团队中口头要求可能达不到约束的作用，checkstyle配合IDEA插件可以在编译器做静态代码检查。&lt;/p&gt;
    
    </summary>
    
      <category term="checkstyle" scheme="https://damon4u.github.io/categories/checkstyle/"/>
    
    
      <category term="checkstyle" scheme="https://damon4u.github.io/tags/checkstyle/"/>
    
  </entry>
  
  <entry>
    <title>第一个DUBBO例子</title>
    <link href="https://damon4u.github.io//blog/2017/12/dubbo.html"/>
    <id>https://damon4u.github.io//blog/2017/12/dubbo.html</id>
    <published>2017-12-20T09:41:50.000Z</published>
    <updated>2017-12-21T07:06:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近dubbo项目重新维护，让人忍不住想了解一下。</p><p>本文参考<a href="https://github.com/alibaba/dubbo/tree/master/dubbo-demo" target="_blank" rel="external">dubbo官方实例</a>实现了一个简单的demo。使用Spring配置文件，zookeeper作为注册器。</p><a id="more"></a><h3 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1. 项目结构"></a>1. 项目结构</h3><p><img src="/images/dubbo1.jpg" width="400" height="200"></p><ul><li><code>hello-dubbo-api</code>: 公共api接口，provider暴露此接口，consumer调用此接口</li><li><code>hello-dubbo-provider</code>: 实现api中的接口，对外提供服务</li><li><code>hello-dubbo-consumer</code>: 调用api中的接口</li></ul><h3 id="2-父pom依赖管理"><a href="#2-父pom依赖管理" class="headerlink" title="2.父pom依赖管理"></a>2.父pom依赖管理</h3><p>首先在父pom中引入dependencyManagement和公共依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.damon4u.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>hello-dubbo-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>hello-dubbo-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>hello-dubbo-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java-version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">java-version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">org.slf4j.version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">org.slf4j.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.0.13<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- spring start --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-framework-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 注意：import scope只能用在dependencyManagement里面 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- spring end --&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- log start --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- log end --&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- test start --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- test end --&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- log start --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- log end --&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- test start --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- test end --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>hello-dubbo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">debug</span>&gt;</span>true<span class="tag">&lt;/<span class="name">debug</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="3-dubbo-api"><a href="#3-dubbo-api" class="headerlink" title="3. dubbo-api"></a>3. dubbo-api</h3><p>新建子模块，作为api，不需要特别的pom依赖引入，只是定义一个简单的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * sayHello</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="4-dubbo-provider"><a href="#4-dubbo-provider" class="headerlink" title="4. dubbo-provider"></a>4. dubbo-provider</h3><p>新建子模块，作为服务提供者。<br>首先引入api，dubbo和zookeeper依赖，注意解决日志冲突：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- api start --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.damon4u.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- api end --&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- dubbo start --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- dubbo end --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p><p>其中dubbo的依赖中包含了相关的Spring依赖，如果项目本身使用Spring容器，推荐单独指定Spring依赖。</p><p>provider需要实现api接口，对外提供服务：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DemoServiceImpl.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"["</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()) + <span class="string">"] Hello "</span> + name + <span class="string">", request from consumer: "</span> + RpcContext.getContext().getRemoteAddress());</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">", response form provider: "</span> + RpcContext.getContext().getLocalAddress();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来是dubbo相关的Spring配置文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></div><div class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"hello-dubbo-provider"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露发现服务地址 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://10.235.132.202:2181"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 和本地bean一样实现服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">class</span>=<span class="string">"com.damon4u.demo.dubbo.provider.DemoServiceImpl"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.damon4u.demo.dubbo.api.DemoService"</span> <span class="attr">ref</span>=<span class="string">"demoService"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p><p>dubbo默认使用log4j作为日志输出，此处我们想使用slf4j代替，需要在<code>dubbo.properties</code>中指定日志类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dubbo.application.logger=slf4j</div></pre></td></tr></table></figure></p><p>然后添加logback.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Target</span>&gt;</span>System.out<span class="tag">&lt;/<span class="name">Target</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%date [%level] [%thread] %logger&#123;80&#125; [%file : %line] %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"info"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.connection"</span> <span class="attr">level</span>=<span class="string">"OFF"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache"</span> <span class="attr">level</span>=<span class="string">"error"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.resultset"</span> <span class="attr">level</span>=<span class="string">"OFF"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"info"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.audit"</span> <span class="attr">level</span>=<span class="string">"OFF"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.sqlonly"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.sqltiming"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.quartz.simpl"</span> <span class="attr">level</span>=<span class="string">"error"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.alibaba.dubbo"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>最后是一个启动类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Provider.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">                <span class="keyword">new</span> String[] &#123;<span class="string">"dubbo-provider.xml"</span>&#125;);</div><div class="line">        context.start();</div><div class="line">        logger.info(<span class="string">"Provider Running..."</span>);</div><div class="line">        System.in.read(); <span class="comment">// press any key to exit</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="5-dubbo-consumer"><a href="#5-dubbo-consumer" class="headerlink" title="5. dubbo-consumer"></a>5. dubbo-consumer</h3><p>新建子模块，作为api接口调用者。同样导入dubbo-provider中的pom依赖，dubbo.properties和logback.xml。<br>然后是dubbo相关的Spring配置文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></div><div class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"hello-dubbo-consumer"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 使用zookeeper注册中心暴露发现服务地址 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://10.235.132.202:2181"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"demoService"</span> <span class="attr">check</span>=<span class="string">"false"</span> <span class="attr">interface</span>=<span class="string">"com.damon4u.demo.dubbo.api.DemoService"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p><p>最后是启动类，像使用本地service服务一样，调用api接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Consumer.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="keyword">new</span> String[]&#123;<span class="string">"dubbo-consumer.xml"</span>&#125;);</div><div class="line">        context.start();</div><div class="line">        DemoService demoService = (DemoService) context.getBean(<span class="string">"demoService"</span>); <span class="comment">// get remote service proxy</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">                String hello = demoService.sayHello(<span class="string">"world"</span>); <span class="comment">// call remote method</span></div><div class="line">                System.out.println(hello); <span class="comment">// get result</span></div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line">                throwable.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h3><p>我们首先启动一台provider和一台consumer，可以看到两者正常调用。</p><p>这时，我们更换provider的端口到20881再启动一台provider，可以看到，consumer收到一个notify，zookeeper中注册的地址多了，部分请求被分发到新的节点。</p><p>然后我们再启动两台consumer，模拟多个调用者，可以看到请求被分发到两个provider上。</p><p>负载均衡的策略还没有研究。</p><p>本项目使用zookeeper作为注册中心，此时zookeeper注册节点情况如下（图中使用的工具是ZooInspector.jar）：<br><img src="/images/dubbo2.jpg" alt=""></p><p>当增删节点时，都会有notify通知，提供服务发现。</p><p>完整的项目代码在github上：<a href="https://github.com/damon4u/hello-dubbo" target="_blank" rel="external">hello-dubbo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近dubbo项目重新维护，让人忍不住想了解一下。&lt;/p&gt;
&lt;p&gt;本文参考&lt;a href=&quot;https://github.com/alibaba/dubbo/tree/master/dubbo-demo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dubbo官方实例&lt;/a&gt;实现了一个简单的demo。使用Spring配置文件，zookeeper作为注册器。&lt;/p&gt;
    
    </summary>
    
      <category term="dubbo" scheme="https://damon4u.github.io/categories/dubbo/"/>
    
    
      <category term="dubbo" scheme="https://damon4u.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>包规范</title>
    <link href="https://damon4u.github.io//blog/2017/12/%E5%8C%85%E8%A7%84%E8%8C%83.html"/>
    <id>https://damon4u.github.io//blog/2017/12/包规范.html</id>
    <published>2017-12-20T03:41:50.000Z</published>
    <updated>2017-12-20T14:34:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章的主要目的是为了规范之后git项目的包结构。<br>截止到现在，每次新建项目pom时，都会纠结包名和目录结构，而心中没有一个统一的规范，这样就显得很杂乱无章。</p><p>无规矩不成方圆。</p><a id="more"></a><p>看一下Spring的包规范：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p><p>仿照这种形式，制定以下规约：</p><ul><li>练手项目：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;groupId&gt;com.damon4u.demo&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;hello-xxx&lt;/artifactId&gt;</div></pre></td></tr></table></figure><ul><li>工具项目：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;groupId&gt;com.damon4u.util&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;commons-xxx&lt;/artifactId&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写这篇文章的主要目的是为了规范之后git项目的包结构。&lt;br&gt;截止到现在，每次新建项目pom时，都会纠结包名和目录结构，而心中没有一个统一的规范，这样就显得很杂乱无章。&lt;/p&gt;
&lt;p&gt;无规矩不成方圆。&lt;/p&gt;
    
    </summary>
    
      <category term="文档" scheme="https://damon4u.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="文档" scheme="https://damon4u.github.io/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>date_format函数</title>
    <link href="https://damon4u.github.io//blog/2017/12/mysql-dateformat.html"/>
    <id>https://damon4u.github.io//blog/2017/12/mysql-dateformat.html</id>
    <published>2017-12-19T09:41:50.000Z</published>
    <updated>2017-12-20T14:37:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-定义和用法"><a href="#1-定义和用法" class="headerlink" title="1.定义和用法"></a>1.定义和用法</h3><p><code>DATE_FORMAT()</code>函数用于以不同的格式显示日期/时间数据。</p><a id="more"></a><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DATE_FORMAT(date,format)</div></pre></td></tr></table></figure><p><code>date</code>参数是合法的日期。<code>format</code>规定日期/时间的输出格式。</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%Y</td><td>年，4 位</td></tr><tr><td>%y</td><td>年，2 位</td></tr><tr><td>%m</td><td>月，数值(00-12)</td></tr><tr><td>%b</td><td>缩写月名(Dec)</td></tr><tr><td>%c</td><td>月，数值</td></tr><tr><td>%D</td><td>带有英文前缀的月中的天</td></tr><tr><td>%d</td><td>月的天，数值(00-31)</td></tr><tr><td>%e</td><td>月的天，数值(0-31)</td></tr><tr><td>%j</td><td>年的天 (001-366)</td></tr><tr><td>%H</td><td>小时 (00-23)</td></tr><tr><td>%h</td><td>小时 (01-12)</td></tr><tr><td>%I</td><td>小时 (01-12)</td></tr><tr><td>%k</td><td>小时 (0-23)</td></tr><tr><td>%l</td><td>小时 (1-12)</td></tr><tr><td>%i</td><td>分钟，数值(00-59)</td></tr><tr><td>%S</td><td>秒(00-59)</td></tr><tr><td>%s</td><td>秒(00-59)</td></tr><tr><td>%f</td><td>微秒</td></tr><tr><td>%U</td><td>周 (00-53) 星期日是一周的第一天</td></tr><tr><td>%u</td><td>周 (00-53) 星期一是一周的第一天</td></tr><tr><td>%p</td><td>AM 或 PM</td></tr><tr><td>%a</td><td>缩写星期名</td></tr></tbody></table><h3 id="3-使用实例"><a href="#3-使用实例" class="headerlink" title="3.使用实例"></a>3.使用实例</h3><p>统计每天0点到1点的数量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select date(create_time),count(1) from live where date_format(create_time, &apos;%H:%i:%S&apos;)&gt;&apos;00:00:00&apos; and date_format(create_time, &apos;%H:%i:%S&apos;)&lt;&apos;01:00:00&apos; group by date(create_time) order by create_time desc;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-定义和用法&quot;&gt;&lt;a href=&quot;#1-定义和用法&quot; class=&quot;headerlink&quot; title=&quot;1.定义和用法&quot;&gt;&lt;/a&gt;1.定义和用法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;DATE_FORMAT()&lt;/code&gt;函数用于以不同的格式显示日期/时间数据。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://damon4u.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://damon4u.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://damon4u.github.io//blog/2017/12/hello-world.html"/>
    <id>https://damon4u.github.io//blog/2017/12/hello-world.html</id>
    <published>2017-12-18T14:47:57.000Z</published>
    <updated>2017-12-18T14:47:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="文字" scheme="https://damon4u.github.io/categories/%E6%96%87%E5%AD%97/"/>
    
    
      <category term="日常" scheme="https://damon4u.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="随笔" scheme="https://damon4u.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
