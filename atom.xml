<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>是五月呀！</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://damon4u.github.io/"/>
  <updated>2018-11-29T05:47:42.936Z</updated>
  <id>https://damon4u.github.io/</id>
  
  <author>
    <name>五月y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shiro开发（七）过滤器机制</title>
    <link href="https://damon4u.github.io//blog/2018/11/shiro%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%83%EF%BC%89%E8%BF%87%E6%BB%A4%E5%99%A8%E6%9C%BA%E5%88%B6.html"/>
    <id>https://damon4u.github.io//blog/2018/11/shiro开发（七）过滤器机制.html</id>
    <published>2018-11-29T09:41:50.000Z</published>
    <updated>2018-11-29T05:47:42.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="过滤器介绍"><a href="#过滤器介绍" class="headerlink" title="过滤器介绍"></a>过滤器介绍</h3><p>Shiro过滤器的基础类图：</p><p><img src="/images/shiro2.png" alt=""></p><a id="more"></a><p>（1）OncePerRequestFilter<br>OncePerRequestFilter用于防止多次执行Filter的；也就是说一次请求只会走一次过滤器链；另外提供enabled属性，表示是否开启该过滤器实例，默认enabled=true表示开启，如果不想让某个过滤器工作，可以设置为false即可。</p><p>（2）ShiroFilter<br>ShiroFilter是整个Shiro的入口点，用于拦截需要安全控制的请求进行处理。</p><p>（3）AdviceFilter<br>AdviceFilter提供了AOP风格的支持，类似于SpringMVC中的Interceptor：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(ServletRequest request, ServletResponse response, Exception exception)</span> <span class="keyword">throws</span> Exception</span>;</div></pre></td></tr></table></figure></p><ul><li><code>preHandler</code>：类似于AOP中的前置增强；在过滤器链执行之前执行；如果返回true则继续过滤器链；否则中断后续的过滤器链的执行直接返回；进行预处理（如基于表单的身份验证、授权）；</li><li><code>postHandle</code>：类似于AOP中的后置返回增强；在过滤器链执行完成后执行；进行后处理（如记录执行时间之类的）；</li><li><code>afterCompletion</code>：类似于AOP中的后置最终增强；即不管有没有异常都会执行；可以进行清理资源（如接触Subject与线程的绑定之类的）；</li></ul><p>（4）PathMatchingFilter<br>PathMatchingFilter提供了基于Ant风格的请求路径匹配功能及过滤器参数解析的功能，如“roles[admin,user]”自动根据“，”分割解析到一个路径参数配置并绑定到相应的路径：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">pathsMatch</span><span class="params">(String path, ServletRequest request)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">onPreHandle</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception</span>;</div></pre></td></tr></table></figure></p><ul><li><code>pathsMatch</code>：该方法用于path与请求路径进行匹配的方法；如果匹配返回true；</li><li><code>onPreHandle</code>：在preHandle中，当pathsMatch匹配一个路径后，会调用opPreHandler方法并将路径绑定参数配置传给mappedValue；然后可以在这个方法中进行一些验证（如角色授权），如果验证失败可以返回false中断流程；默认返回true；也就是说子类可以只实现onPreHandle即可，无须实现preHandle。如果没有path与请求路径匹配，默认是通过的（即preHandle返回true）。</li></ul><p>（5）AccessControlFilter<br>AccessControlFilter提供了访问控制的基础功能；比如是否允许访问/当访问拒绝时如何处理等：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception</span>;  </div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception</span>;  </div><div class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</div></pre></td></tr></table></figure></p><ul><li><code>isAccessAllowed</code>：表示是否允许访问；mappedValue就是[urls]配置中过滤器参数部分，如果允许访问返回true，否则false；</li><li><code>onAccessDenied</code>：表示当访问拒绝时是否已经处理了；如果返回true表示需要继续处理；如果返回false表示该过滤器实例已经处理了，将直接返回即可。</li></ul><p><code>onPreHandle</code>会自动调用这两个方法决定是否继续处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">onPreHandle</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception </span>&#123;  </div><div class="line">    <span class="keyword">return</span> isAccessAllowed(request, response, mappedValue) || onAccessDenied(request, response, mappedValue);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>另外<code>AccessControlFilter</code>还提供了如下方法用于处理如登录成功后/重定向到上一个请求：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLoginUrl</span><span class="params">(String loginUrl)</span></span>; <span class="comment">//身份验证时使用，默认/login.jsp  </span></div><div class="line"><span class="function">String <span class="title">getLoginUrl</span><span class="params">()</span></span>;  </div><div class="line"><span class="function">Subject <span class="title">getSubject</span><span class="params">(ServletRequest request, ServletResponse response)</span></span>; <span class="comment">//获取Subject实例  </span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isLoginRequest</span><span class="params">(ServletRequest request, ServletResponse response)</span></span>; <span class="comment">//当前请求是否是登录请求  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveRequestAndRedirectToLogin</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException</span>; <span class="comment">//将当前请求保存起来并重定向到登录页面  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveRequest</span><span class="params">(ServletRequest request)</span></span>; <span class="comment">//将请求保存起来，如登录成功后再重定向回该请求  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">redirectToLogin</span><span class="params">(ServletRequest request, ServletResponse response)</span></span>; <span class="comment">//重定向到登录页面</span></div></pre></td></tr></table></figure></p><p>比如基于表单的身份验证就需要使用这些功能。</p><p>到此基本的过滤器就完事了，如果我们想进行访问访问的控制就可以继承<code>AccessControlFilter</code>；如果我们要添加一些通用数据我们可以直接继承<code>PathMatchingFilter</code>。</p><h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><p>Shiro对Servlet容器的<code>FilterChain</code>进行了代理，即<code>ShiroFilter</code>在继续Servlet容器的Filter链的执行之前，通过<code>ProxiedFilterChain</code>对Servlet容器的<code>FilterChain</code>进行了代理；<br>即先走Shiro自己的Filter体系，然后才会委托给Servlet容器的<code>FilterChain</code>进行Servlet容器级别的Filter链执行；<br>Shiro的<code>ProxiedFilterChain</code>执行流程：</p><ol><li>先执行Shiro自己的Filter链；</li><li>再执行Servlet容器的Filter链（即原始的Filter）。</li></ol><p>而<code>ProxiedFilterChain</code>是通过<code>FilterChainResolver</code>根据配置文件中[urls]部分是否与请求的URL是否匹配解析得到的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">FilterChain <span class="title">getChain</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain originalChain)</span></span>;</div></pre></td></tr></table></figure></p><p>即传入原始的chain得到一个代理的chain。</p><p>Shiro内部提供了一个路径匹配的<code>FilterChainResolver</code>实现：<code>PathMatchingFilterChainResolver</code>，其根据<code>[urls]</code>中配置的url模式（默认Ant风格）=过滤器链和请求的url是否匹配来解析得到配置的过滤器链的；而<code>PathMatchingFilterChainResolver</code>内部通过<code>FilterChainManager</code>维护着过滤器链，比如<code>DefaultFilterChainManager</code>实现维护着url模式与过滤器链的关系。<br>因此我们可以通过<code>FilterChainManager</code>进行动态动态增加url模式与过滤器链的关系。<br><code>DefaultFilterChainManager</code>会默认添加<code>org.apache.shiro.web.filter.mgt.DefaultFilter</code>中声明的过滤器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> DefaultFilter &#123;  </div><div class="line">    anon(AnonymousFilter.class),  </div><div class="line">    authc(FormAuthenticationFilter.class),  </div><div class="line">    authcBasic(BasicHttpAuthenticationFilter.class),  </div><div class="line">    logout(LogoutFilter.class),  </div><div class="line">    noSessionCreation(NoSessionCreationFilter.class),  </div><div class="line">    perms(PermissionsAuthorizationFilter.class),  </div><div class="line">    port(PortFilter.class),  </div><div class="line">    rest(HttpMethodPermissionFilter.class),  </div><div class="line">    roles(RolesAuthorizationFilter.class),  </div><div class="line">    ssl(SslFilter.class),  </div><div class="line">    user(UserFilter.class);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>身份验证相关的：</p><ul><li>anon：匿名过滤器，即不需要登录即可访问；一般用于静态资源过滤；示例<code>/static/**=anon</code>；</li><li>user：用户过滤器，用户已经身份验证/记住我登录的都可；<code>示例“/**=user</code></li><li>authc：基于表单的过滤器；如<code>/**=authc</code>，如果没有登录会跳到相应的登录页面登录；主要属性：<code>usernameParam</code>：表单提交的用户名参数名（username）；<code>passwordParam</code>：表单提交的密码参数名（password）； <code>rememberMeParam</code>：表单提交的密码参数名（rememberMe）；<code>loginUrl</code>：登录页面地址（/login.jsp）；<code>successUrl</code>：登录成功后的默认重定向地址；<code>failureKeyAttribute</code>：登录失败后错误信息存储key（shiroLoginFailure）；</li><li>authcBasic：Basic HTTP身份验证过滤器，主要属性： <code>applicationName</code>：弹出登录框显示的信息（application）；</li><li>logout：退出过滤器，主要属性：<code>redirectUrl</code>：退出成功后重定向的地址（/）;示例<code>/logout=logout</code>；</li></ul><p>授权相关的：</p><ul><li>perms：权限授权过滤器，验证用户是否拥有所有权限；属性和roles一样；示例<code>/user/**=perms[&quot;user:create&quot;]</code></li><li>roles：角色授权过滤器，验证用户是否拥有所有角色；主要属性： <code>loginUrl</code>：登录页面地址（/login.jsp）；<code>unauthorizedUrl</code>：未授权后重定向的地址；示例<code>/admin/**=roles[admin]</code></li><li>port：端口过滤器，主要属性：<code>port</code>（80）：可以通过的端口；示例<code>/test= port[80]</code>，如果用户访问该页面是非80，将自动将请求端口改为80并重定向到该80端口，其他路径/参数等都一样</li><li>rest：rest风格过滤器，自动根据请求方法构建权限字符串（GET=read, POST=create,PUT=update,DELETE=delete,HEAD=read,TRACE=read,OPTIONS=read, MKCOL=create）构建权限字符串；示例<code>/users=rest[user]</code>，会自动拼出“user:read,user:create,user:update,user:delete”权限字符串进行权限匹配（所有都得匹配，isPermittedAll）；</li><li>ssl：SSL过滤器，只有请求协议是https才能通过；否则自动跳转会https端口（443）；其他和port过滤器一样；</li></ul><p>会话相关的：</p><ul><li>noSessionCreation：不创建会话过滤器，调用<code>subject.getSession(false)</code>不会有什么问题，但是如果<code>subject.getSession(true)</code>将抛出<code>DisabledSessionException</code>异常；</li></ul><p>参考：<br><a href="http://jinnianshilongnian.iteye.com/blog/2025656" target="_blank" rel="external">第八章 拦截器机制——《跟我学Shiro》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;过滤器介绍&quot;&gt;&lt;a href=&quot;#过滤器介绍&quot; class=&quot;headerlink&quot; title=&quot;过滤器介绍&quot;&gt;&lt;/a&gt;过滤器介绍&lt;/h3&gt;&lt;p&gt;Shiro过滤器的基础类图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/shiro2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="shiro" scheme="https://damon4u.github.io/categories/shiro/"/>
    
    
      <category term="shiro" scheme="https://damon4u.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>shiro开发（六）缓存机制</title>
    <link href="https://damon4u.github.io//blog/2018/11/shiro%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AD%EF%BC%89%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html"/>
    <id>https://damon4u.github.io//blog/2018/11/shiro开发（六）缓存机制.html</id>
    <published>2018-11-29T08:41:50.000Z</published>
    <updated>2018-11-29T05:47:06.402Z</updated>
    
    <content type="html"><![CDATA[<p>Shiro提供了类似于Spring的Cache抽象，即Shiro本身不实现Cache，但是对Cache进行了又抽象，方便更换不同的底层Cache实现。</p><p>Shiro提供的<code>Cache</code>接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;  </div><div class="line">    <span class="comment">//根据Key获取缓存中的值  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> <span class="keyword">throws</span> CacheException</span>;  </div><div class="line">    <span class="comment">//往缓存中放入key-value，返回缓存中之前的值  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> <span class="keyword">throws</span> CacheException</span>;   </div><div class="line">    <span class="comment">//移除缓存中key对应的值，返回该值  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(K key)</span> <span class="keyword">throws</span> CacheException</span>;  </div><div class="line">    <span class="comment">//清空整个缓存  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="keyword">throws</span> CacheException</span>;  </div><div class="line">    <span class="comment">//返回缓存大小  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;  </div><div class="line">    <span class="comment">//获取缓存中所有的key  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keys</span><span class="params">()</span></span>;  </div><div class="line">    <span class="comment">//获取缓存中所有的value  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><p>Shiro提供的<code>CacheManager</code>接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CacheManager</span> </span>&#123;  </div><div class="line">    <span class="comment">//根据缓存名字获取一个Cache  </span></div><div class="line">    <span class="keyword">public</span> &lt;K, V&gt; <span class="function">Cache&lt;K, V&gt; <span class="title">getCache</span><span class="params">(String name)</span> <span class="keyword">throws</span> CacheException</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Shiro还提供了<code>CacheManagerAware</code>用于注入<code>CacheManager</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CacheManagerAware</span> </span>&#123;  </div><div class="line">    <span class="comment">//注入CacheManager  </span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCacheManager</span><span class="params">(CacheManager cacheManager)</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Shiro内部相应的组件（<code>DefaultSecurityManager</code>）会自动检测相应的对象（如<code>Realm</code>，<code>SessionManager</code>）是否实现了<code>CacheManagerAware</code>并自动注入相应的<code>CacheManager</code>。</p><h3 id="Realm缓存"><a href="#Realm缓存" class="headerlink" title="Realm缓存"></a>Realm缓存</h3><p>Shiro提供了<code>CachingRealm</code>，其实现了<code>CacheManagerAware</code>接口，提供了缓存的一些基础实现；<br>另外<code>AuthenticatingRealm</code>及<code>AuthorizingRealm</code>分别提供了对<code>AuthenticationInfo</code>和<code>AuthorizationInfo</code>信息的缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">userRealm=com.xxx.UserRealm  </div><div class="line">userRealm.cachingEnabled=true  </div><div class="line">userRealm.authenticationCachingEnabled=true  </div><div class="line">userRealm.authenticationCacheName=authenticationCache  </div><div class="line">userRealm.authorizationCachingEnabled=true  </div><div class="line">userRealm.authorizationCacheName=authorizationCache  </div><div class="line">securityManager.realms=$userRealm</div><div class="line"></div><div class="line">cacheManager=org.apache.shiro.cache.ehcache.EhCacheManager  </div><div class="line">cacheManager.cacheManagerConfigFile=classpath:shiro-ehcache.xml  </div><div class="line">securityManager.cacheManager=$cacheManager</div></pre></td></tr></table></figure><ul><li><code>userRealm.cachingEnabled</code>：启用缓存，默认false；</li><li><code>userRealm.authenticationCachingEnabled</code>：启用身份验证缓存，即缓存<code>AuthenticationInfo</code>信息，默认false；</li><li><code>userRealm.authenticationCacheName</code>：缓存<code>AuthenticationInfo</code>信息的缓存名称；</li><li><code>userRealm.authorizationCachingEnabled</code>：启用授权缓存，即缓存<code>AuthorizationInfo</code>信息，默认false；</li><li><code>userRealm. authorizationCacheName</code>：缓存<code>AuthorizationInfo</code>信息的缓存名称；</li></ul><h3 id="Session缓存"><a href="#Session缓存" class="headerlink" title="Session缓存"></a>Session缓存</h3><p>当我们设置了SecurityManager的CacheManager时，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sessionManager=org.apache.shiro.session.mgt.DefaultSessionManager  </div><div class="line">securityManager.sessionManager=$sessionManager</div><div class="line">securityManager.cacheManager=$cacheManager</div></pre></td></tr></table></figure></p><p>如<code>securityManager</code>实现了<code>SessionsSecurityManager</code>，其会自动判断<code>SessionManager</code>是否实现了<code>CacheManagerAware</code>接口，如果实现了会把<code>CacheManager</code>设置给它。<br>然后<code>sessionManager</code>会判断相应的<code>sessionDAO</code>（如继承自<code>CachingSessionDAO</code>）是否实现了<code>CacheManagerAware</code>，如果实现了会把<code>CacheManager</code>设置给它；其会先查缓存，如果找不到才查数据库。</p><p>参考：<br><a href="http://jinnianshilongnian.iteye.com/blog/2029217" target="_blank" rel="external">第十一章 缓存机制——《跟我学Shiro》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Shiro提供了类似于Spring的Cache抽象，即Shiro本身不实现Cache，但是对Cache进行了又抽象，方便更换不同的底层Cache实现。&lt;/p&gt;
&lt;p&gt;Shiro提供的&lt;code&gt;Cache&lt;/code&gt;接口：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Cache&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//根据Key获取缓存中的值  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(K key)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; CacheException&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//往缓存中放入key-value，返回缓存中之前的值  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;title&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(K key, V value)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; CacheException&lt;/span&gt;;   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//移除缓存中key对应的值，返回该值  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; V &lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(K key)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; CacheException&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//清空整个缓存  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; CacheException&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//返回缓存大小  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取缓存中所有的key  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Set&amp;lt;K&amp;gt; &lt;span class=&quot;title&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//获取缓存中所有的value  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Collection&amp;lt;V&amp;gt; &lt;span class=&quot;title&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="shiro" scheme="https://damon4u.github.io/categories/shiro/"/>
    
    
      <category term="shiro" scheme="https://damon4u.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>shiro开发（五）会话管理</title>
    <link href="https://damon4u.github.io//blog/2018/11/shiro%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86.html"/>
    <id>https://damon4u.github.io//blog/2018/11/shiro开发（五）会话管理.html</id>
    <published>2018-11-28T08:41:50.000Z</published>
    <updated>2018-11-29T05:47:06.401Z</updated>
    
    <content type="html"><![CDATA[<p>Shiro提供了完整的企业级会话管理功能，不依赖于底层容器（如web容器tomcat），不管JavaSE还是JavaEE环境都可以使用，提供了会话管理、会话事件监听、会话存储/持久化、容器无关的集群、失效/过期支持、对Web的透明支持、SSO单点登录的支持等特性。即直接使用Shiro的会话管理可以直接替换如Web容器的会话管理。</p><h3 id="会话（session）"><a href="#会话（session）" class="headerlink" title="会话（session）"></a>会话（session）</h3><p>所谓会话，即用户访问应用时保持的连接关系，在多次交互中应用能够识别出当前访问的用户是谁，且可以在多次交互中保存一些数据。<br>如访问一些网站时登录成功后，网站可以记住用户，且在退出之前都可以识别当前用户是谁。</p><a id="more"></a><p>Shiro的会话支持不仅可以在普通的JavaSE应用中使用，也可以在JavaEE应用中使用，如web应用。且使用方式是一致的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">login(<span class="string">"classpath:shiro.ini"</span>, <span class="string">"zhang"</span>, <span class="string">"123"</span>);  </div><div class="line">Subject subject = SecurityUtils.getSubject();  </div><div class="line">Session session = subject.getSession();</div></pre></td></tr></table></figure></p><p>登录成功后使用<code>Subject.getSession()</code>即可获取会话；其等价于<code>Subject.getSession(true)</code>，即如果当前没有创建Session对象会创建一个；另外<code>Subject.getSession(false)</code>，如果当前没有创建Session则返回null（不过默认情况下如果启用会话存储功能的话在创建Subject时会主动创建一个Session）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取当前会话的唯一标识</span></div><div class="line">session.getId();  </div><div class="line"></div><div class="line"><span class="comment">// 获取当前Subject的主机地址，该地址是通过HostAuthenticationToken.getHost()提供的</span></div><div class="line">session.getHost();  </div><div class="line"></div><div class="line"><span class="comment">// 获取/设置当前Session的过期时间；如果不设置默认是会话管理器的全局过期时间</span></div><div class="line">session.getTimeout();  </div><div class="line">session.setTimeout(毫秒);   </div><div class="line"></div><div class="line"><span class="comment">// 获取会话的启动时间及最后访问时间；如果是JavaSE应用需要自己定期调用session.touch()去更新最后访问时间；</span></div><div class="line"><span class="comment">// 如果是Web应用，每次进入ShiroFilter都会自动调用session.touch()来更新最后访问时间</span></div><div class="line">session.getStartTimestamp();  </div><div class="line">session.getLastAccessTime();  </div><div class="line"></div><div class="line"><span class="comment">// 更新会话最后访问时间及销毁会话；</span></div><div class="line"><span class="comment">// 当Subject.logout()时会自动调用stop方法来销毁会话。</span></div><div class="line"><span class="comment">// 如果在web中，调用javax.servlet.http.HttpSession.invalidate()也会自动调用Shiro Session.stop方法进行销毁Shiro的会话</span></div><div class="line">session.touch();  </div><div class="line">session.stop();   </div><div class="line"></div><div class="line"><span class="comment">// 设置/获取/删除会话属性；在整个会话范围内都可以对这些属性进行操作</span></div><div class="line">session.setAttribute(<span class="string">"key"</span>, <span class="string">"123"</span>);  </div><div class="line">Assert.assertEquals(<span class="string">"123"</span>, session.getAttribute(<span class="string">"key"</span>));  </div><div class="line">session.removeAttribute(<span class="string">"key"</span>);</div></pre></td></tr></table></figure></p><h3 id="会话管理器"><a href="#会话管理器" class="headerlink" title="会话管理器"></a>会话管理器</h3><p>会话管理器管理着应用中所有<code>Subject</code>的会话的创建、维护、删除、失效、验证等工作，是Shiro的核心组件。<br>顶层组件<code>SecurityManager</code>直接继承了<code>SessionManager</code>，且提供了<code>SessionsSecurityManager</code>实现直接把会话管理委托给相应的<code>SessionManager</code>。<br><code>DefaultSecurityManager</code>及<code>DefaultWebSecurityManager</code>都继承了<code>SessionsSecurityManager</code>。<br>SecurityManager提供了如下接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">Session <span class="title">start</span><span class="params">(SessionContext context)</span></span>; <span class="comment">//启动会话  </span></div><div class="line"><span class="function">Session <span class="title">getSession</span><span class="params">(SessionKey key)</span> <span class="keyword">throws</span> SessionException</span>; <span class="comment">//根据会话Key获取会话</span></div></pre></td></tr></table></figure></p><p>另外用于Web环境的WebSessionManager又提供了如下接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isServletContainerSessions</span><span class="params">()</span></span>;<span class="comment">//是否使用Servlet容器的会话</span></div></pre></td></tr></table></figure></p><p>Shiro还提供了ValidatingSessionManager用于验资并过期会话：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">validateSessions</span><span class="params">()</span></span>;<span class="comment">//验证所有会话是否过期</span></div></pre></td></tr></table></figure></p><p>Shiro提供了三个默认实现：</p><ul><li><code>DefaultSessionManager</code>：使用的默认实现，用于JavaSE环境；</li><li><code>ServletContainerSessionManager</code>：使用的默认实现，用于Web环境，其直接使用Servlet容器的会话；</li><li><code>DefaultWebSessionManager</code>：用于Web环境的实现，可以替代<code>ServletContainerSessionManager</code>，自己维护着会话，直接废弃了Servlet容器的会话管理。</li></ul><p>在Servlet容器中，默认使用<code>JSESSIONID</code> Cookie维护会话，且会话默认是跟容器绑定的；<br>在某些情况下可能需要使用自己的会话机制，此时我们可以使用<code>DefaultWebSessionManager</code>来维护会话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sessionIdCookie=org.apache.shiro.web.servlet.SimpleCookie  </div><div class="line">sessionIdCookie.name=sid  </div><div class="line">#sessionIdCookie.domain=sishuok.com  </div><div class="line">#sessionIdCookie.path=  </div><div class="line">sessionIdCookie.maxAge=1800  </div><div class="line">sessionIdCookie.httpOnly=true  </div><div class="line">sessionManager=org.apache.shiro.web.session.mgt.DefaultWebSessionManager</div><div class="line">sessionManager.sessionIdCookie=$sessionIdCookie  </div><div class="line">sessionManager.sessionIdCookieEnabled=true  </div><div class="line">securityManager.sessionManager=$sessionManager</div></pre></td></tr></table></figure></p><ul><li><code>sessionIdCookie</code>是sessionManager创建会话Cookie的模板：</li><li><code>sessionIdCookie.name</code>：设置Cookie名字，默认为 <strong>JSESSIONID</strong>；</li><li><code>sessionIdCookie.domain</code>：设置Cookie的域名，默认空，即当前访问的域名；</li><li><code>sessionIdCookie.path</code>：设置Cookie的路径，默认空，即存储在域名根下；</li><li><code>sessionIdCookie.maxAge</code>：设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie；</li><li><code>sessionIdCookie.httpOnly</code>：如果设置为true，则客户端不会暴露给客户端脚本代码，使用<code>HttpOnly cookie</code>有助于减少某些类型的跨站点脚本攻击；此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持；</li><li><code>sessionManager.sessionIdCookieEnabled</code>：是否启用/禁用<code>Session Id Cookie</code>，默认是启用的；如果禁用后将不会设置<code>Session Id Cookie</code>，即默认使用了Servlet容器的JSESSIONID，且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id。</li></ul><h3 id="会话存储-持久化"><a href="#会话存储-持久化" class="headerlink" title="会话存储/持久化"></a>会话存储/持久化</h3><p>Shiro提供<code>SessionDAO</code>用于会话的CRUD，即DAO（Data Access Object）模式实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如DefaultSessionManager在创建完session后会调用该方法；如保存到关系数据库/文件系统/NoSQL数据库；即可以实现会话的持久化；返回会话ID；主要此处返回的ID.equals(session.getId())；  </span></div><div class="line"><span class="function">Serializable <span class="title">create</span><span class="params">(Session session)</span></span>;  </div><div class="line"><span class="comment">//根据会话ID获取会话  </span></div><div class="line"><span class="function">Session <span class="title">readSession</span><span class="params">(Serializable sessionId)</span> <span class="keyword">throws</span> UnknownSessionException</span>;  </div><div class="line"><span class="comment">//更新会话；如更新会话最后访问时间/停止会话/设置超时时间/设置移除属性等会调用  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Session session)</span> <span class="keyword">throws</span> UnknownSessionException</span>;  </div><div class="line"><span class="comment">//删除会话；当会话过期/会话停止（如用户退出时）会调用  </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Session session)</span></span>;  </div><div class="line"><span class="comment">//获取当前所有活跃用户，如果用户量多此方法影响性能  </span></div><div class="line"><span class="function">Collection&lt;Session&gt; <span class="title">getActiveSessions</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p><p>Shiro内嵌了如下<code>SessionDAO</code>实现：</p><p><img src="/images/shiro1.png" alt=""></p><ul><li><code>AbstractSessionDAO</code>：提供了<code>SessionDAO</code>的基础实现，如生成会话ID等；</li><li><code>MemorySessionDAO</code>：直接在内存中进行会话维护；</li><li><code>CachingSessionDAO</code>：提供了对开发者透明的会话缓存的功能，只需要设置相应的<code>CacheManager</code>即可；</li><li><code>EnterpriseCacheSessionDAO</code>：继承自<code>CachingSessionDAO</code>，设置了<code>CacheManager</code>，提供了缓存功能的会话维护。默认情况下使用<code>MapCache</code>实现，内部使用<code>ConcurrentHashMap</code>保存缓存的会话。</li></ul><p>Shiro提供了使用Ehcache进行会话存储，Ehcache可以配合TerraCotta实现容器无关的分布式集群。<br>首先在pom.xml里添加如下依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>接着配置shiro-web.ini文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sessionDAO=org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO  </div><div class="line">sessionDAO.activeSessionsCacheName=shiro-activeSessionCache  </div><div class="line">sessionManager.sessionDAO=$sessionDAO  </div><div class="line">cacheManager=org.apache.shiro.cache.ehcache.EhCacheManager  </div><div class="line">cacheManager.cacheManagerConfigFile=classpath:ehcache.xml  </div><div class="line">securityManager.cacheManager = $cacheManager</div></pre></td></tr></table></figure></p><ul><li><code>sessionDAO.activeSessionsCacheName</code>：设置Session缓存名字，默认就是shiro-activeSessionCache；</li><li><code>cacheManager</code>：缓存管理器，用于管理缓存的，此处使用Ehcache实现；</li><li><code>cacheManager.cacheManagerConfigFile</code>：设置ehcache缓存的配置文件；</li><li><code>securityManager.cacheManager</code>：设置SecurityManager的cacheManager，<strong>会自动设置实现了CacheManagerAware接口的相应对象，如SessionDAO的cacheManager</strong>；</li></ul><p>然后配置ehcache.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"shiro-activeSessionCache"</span>  </span></div><div class="line"><span class="tag">       <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"10000"</span>  </span></div><div class="line"><span class="tag">       <span class="attr">overflowToDisk</span>=<span class="string">"false"</span>  </span></div><div class="line"><span class="tag">       <span class="attr">eternal</span>=<span class="string">"false"</span>  </span></div><div class="line"><span class="tag">       <span class="attr">diskPersistent</span>=<span class="string">"false"</span>  </span></div><div class="line"><span class="tag">       <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span>  </span></div><div class="line"><span class="tag">       <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span>  </span></div><div class="line"><span class="tag">       <span class="attr">statistics</span>=<span class="string">"true"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>Cache的名字为shiro-activeSessionCache，即设置的sessionDAO的activeSessionsCacheName属性值。</p><p>如果自定义实现SessionDAO，继承CachingSessionDAO即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySessionDAO</span> <span class="keyword">extends</span> <span class="title">CachingSessionDAO</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate = JdbcTemplateUtils.jdbcTemplate();  </div><div class="line">    <span class="function"><span class="keyword">protected</span> Serializable <span class="title">doCreate</span><span class="params">(Session session)</span> </span>&#123;  </div><div class="line">        Serializable sessionId = generateSessionId(session);  </div><div class="line">        assignSessionId(session, sessionId);  </div><div class="line">        String sql = <span class="string">"insert into sessions(id, session) values(?,?)"</span>;  </div><div class="line">        jdbcTemplate.update(sql, sessionId, SerializableUtils.serialize(session));  </div><div class="line">        <span class="keyword">return</span> session.getId();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doUpdate</span><span class="params">(Session session)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span>(session <span class="keyword">instanceof</span> ValidatingSession &amp;&amp; !((ValidatingSession)session).isValid()) &#123;  </div><div class="line">            <span class="keyword">return</span>; <span class="comment">//如果会话过期/停止 没必要再更新了  </span></div><div class="line">        &#125;  </div><div class="line">        String sql = <span class="string">"update sessions set session=? where id=?"</span>;  </div><div class="line">        jdbcTemplate.update(sql, SerializableUtils.serialize(session), session.getId());  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(Session session)</span> </span>&#123;  </div><div class="line">        String sql = <span class="string">"delete from sessions where id=?"</span>;  </div><div class="line">        jdbcTemplate.update(sql, session.getId());  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">protected</span> Session <span class="title">doReadSession</span><span class="params">(Serializable sessionId)</span> </span>&#123;  </div><div class="line">        String sql = <span class="string">"select session from sessions where id=?"</span>;  </div><div class="line">        List&lt;String&gt; sessionStrList = jdbcTemplate.queryForList(sql, String.class, sessionId);  </div><div class="line">        <span class="keyword">if</span>(sessionStrList.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">return</span> SerializableUtils.deserialize(sessionStrList.get(<span class="number">0</span>));  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>doCreate/doUpdate/doDelete/doReadSession分别代表创建/修改/删除/读取会话；此处通过把会话序列化后存储到数据库实现。<br>其他设置和之前一样，因为继承了CachingSessionDAO，所有在读取时会先查缓存中是否存在，如果找不到才到数据库中查找。</p><h3 id="会话验证"><a href="#会话验证" class="headerlink" title="会话验证"></a>会话验证</h3><p>Shiro提供了会话验证调度器，用于定期的验证会话是否已过期，如果过期将停止会话；出于性能考虑，一般情况下都是获取会话时来验证会话是否过期并停止会话的；但是如在web环境中，如果用户不主动退出是不知道会话是否过期的，因此需要定期的检测会话是否过期，Shiro提供了会话验证调度器SessionValidationScheduler来做这件事情。<br>可以通过如下ini配置开启会话验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sessionValidationScheduler=org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler  </div><div class="line">sessionValidationScheduler.interval = 3600000  </div><div class="line">sessionValidationScheduler.sessionManager=$sessionManager  </div><div class="line">sessionManager.globalSessionTimeout=1800000  </div><div class="line">sessionManager.sessionValidationSchedulerEnabled=true  </div><div class="line">sessionManager.sessionValidationScheduler=$sessionValidationScheduler</div></pre></td></tr></table></figure></p><ul><li><code>sessionValidationScheduler</code>：会话验证调度器，sessionManager默认就是使用ExecutorServiceSessionValidationScheduler，其使用JDK的ScheduledExecutorService进行定期调度并验证会话是否过期；</li><li><code>sessionValidationScheduler.interval</code>：设置调度时间间隔，单位毫秒，默认就是1小时；</li><li><code>sessionValidationScheduler.sessionManager</code>：设置会话验证调度器进行会话验证时的会话管理器；</li><li><code>sessionManager.globalSessionTimeout</code>：设置全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期；</li><li><code>sessionManager.sessionValidationSchedulerEnabled</code>：是否开启会话验证器，默认是开启的；</li><li><code>sessionManager.sessionValidationScheduler</code>：设置会话验证调度器，默认就是使用ExecutorServiceSessionValidationScheduler。</li></ul><p>Shiro也提供了使用Quartz会话验证调度器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sessionValidationScheduler=org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler  </div><div class="line">sessionValidationScheduler.sessionValidationInterval = 3600000  </div><div class="line">sessionValidationScheduler.sessionManager=$sessionManager</div></pre></td></tr></table></figure></p><p>使用时需要导入shiro-quartz依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如上会话验证调度器实现都是直接调用AbstractValidatingSessionManager 的validateSessions方法进行验证，其直接调用SessionDAO的getActiveSessions方法获取所有会话进行验证，如果会话比较多，会影响性能；<br>可以考虑如分页获取会话并进行验证：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//分页获取会话并验证  </span></div><div class="line">String sql = <span class="string">"select session from sessions limit ?,?"</span>;  </div><div class="line"><span class="keyword">int</span> start = <span class="number">0</span>; <span class="comment">//起始记录  </span></div><div class="line"><span class="keyword">int</span> size = <span class="number">20</span>; <span class="comment">//每页大小  </span></div><div class="line">List&lt;String&gt; sessionList = jdbcTemplate.queryForList(sql, String.class, start, size);  </div><div class="line"><span class="keyword">while</span>(sessionList.size() &gt; <span class="number">0</span>) &#123;  </div><div class="line">    <span class="keyword">for</span>(String sessionStr : sessionList) &#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            Session session = SerializableUtils.deserialize(sessionStr);  </div><div class="line">            Method validateMethod =   </div><div class="line">            ReflectionUtils.findMethod(AbstractValidatingSessionManager.class,<span class="string">"validate"</span>, Session.class, SessionKey.class);  </div><div class="line">            validateMethod.setAccessible(<span class="keyword">true</span>);  </div><div class="line">            ReflectionUtils.invokeMethod(validateMethod,   </div><div class="line">            sessionManager, session, <span class="keyword">new</span> DefaultSessionKey(session.getId()));  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">          <span class="comment">//ignore  </span></div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    start = start + size;  </div><div class="line">    sessionList = jdbcTemplate.queryForList(sql, String.class, start, size);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其直接改造自<code>ExecutorServiceSessionValidationScheduler</code>，如上代码是验证的核心代码，可以根据自己的需求改造此验证调度器器；ini的配置和之前的类似。</p><p>参考：<br><a href="http://jinnianshilongnian.iteye.com/blog/2028675" target="_blank" rel="external">第十章 会话管理——《跟我学Shiro》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Shiro提供了完整的企业级会话管理功能，不依赖于底层容器（如web容器tomcat），不管JavaSE还是JavaEE环境都可以使用，提供了会话管理、会话事件监听、会话存储/持久化、容器无关的集群、失效/过期支持、对Web的透明支持、SSO单点登录的支持等特性。即直接使用Shiro的会话管理可以直接替换如Web容器的会话管理。&lt;/p&gt;
&lt;h3 id=&quot;会话（session）&quot;&gt;&lt;a href=&quot;#会话（session）&quot; class=&quot;headerlink&quot; title=&quot;会话（session）&quot;&gt;&lt;/a&gt;会话（session）&lt;/h3&gt;&lt;p&gt;所谓会话，即用户访问应用时保持的连接关系，在多次交互中应用能够识别出当前访问的用户是谁，且可以在多次交互中保存一些数据。&lt;br&gt;如访问一些网站时登录成功后，网站可以记住用户，且在退出之前都可以识别当前用户是谁。&lt;/p&gt;
    
    </summary>
    
      <category term="shiro" scheme="https://damon4u.github.io/categories/shiro/"/>
    
    
      <category term="shiro" scheme="https://damon4u.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>java序列化和serialVersionUID</title>
    <link href="https://damon4u.github.io//blog/2018/11/java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CserialVersionUID.html"/>
    <id>https://damon4u.github.io//blog/2018/11/java序列化和serialVersionUID.html</id>
    <published>2018-11-27T08:41:50.000Z</published>
    <updated>2018-11-27T14:57:08.391Z</updated>
    
    <content type="html"><![CDATA[<p>关于jdk的序列化，可以参考<code>java.io.Serializable</code>中的javadoc，这里摘取翻译一部分：</p><p>类通过实现 java.io.Serializable 接口以启用其序列化功能。<br>未实现此接口的类将无法使其任何状态序列化或反序列化。<br>可序列化类的所有子类型本身都是可序列化的。因为实现接口也是间接的等同于继承。</p><a id="more"></a><p>关于<code>serialVersionUID</code>的描述<br>序列化运行时使用一个称为<code>serialVersionUID</code>的版本号与每个可序列化类相关联，该序列号在反序列化过程中用于验证序列化对象的发送者和接收者是否为该对象加载了与序列化兼容的类。<br>如果接收者加载的该对象的类的<code>serialVersionUID</code>与对应的发送者的类的版本号不同，则反序列化将会导致<code>InvalidClassException</code>。可序列化类可以通过声明名为<code>serialVersionUID</code>的字段（该字段必须是静态 (static)、最终 (final) 的 long 型字段）显式声明其自己的<code>serialVersionUID</code>：</p><p>如果可序列化类未显式声明<code>serialVersionUID</code>，则序列化运行时将基于该类的各个方面计算该类的默认<code>serialVersionUID</code>值，如“Java(TM) 对象序列化规范”中所述。不过，强烈建议 <strong>所有可序列化类都显式声明 <code>serialVersionUID</code>值</strong>，原因是计算默认的<code>serialVersionUID</code>对类的详细信息具有较高的敏感性，根据编译器实现的不同可能千差万别，这样在反序列化过程中可能会导致意外的<code>InvalidClassException</code>。因此，为保证 <code>serialVersionUID</code>值跨不同java编译器实现的一致性，序列化类必须声明一个明确的<code>serialVersionUID</code>值。还强烈建议使用<code>private</code>修饰符显示声明<code>serialVersionUID</code>（如果可能），原因是 <strong>这种声明仅应用于直接声明类 – <code>serialVersionUID</code> 字段作为继承成员没有用处</strong> 。数组类不能声明一个明确的<code>serialVersionUID</code>，因此它们总是具有默认的计算值，但是数组类没有匹配<code>serialVersionUID</code>值的要求。</p><p>之前有一种蠢写法，先创建一个<code>BaseEntity</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后认为子类也会包含<code>serialVersionUID</code>，但是javadoc中说的很清楚，<code>serialVersionUID</code>在继承的时候没有用。<br>所以这种写法是错误的。</p><p>参考：<br><a href="https://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it" target="_blank" rel="external">What is a serialVersionUID and why should I use it?</a><br><a href="https://blog.csdn.net/qq_27093465/article/details/78544505" target="_blank" rel="external">Java 之 Serializable 序列化和反序列化的概念,作用的通俗易懂的解释</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jdk的序列化，可以参考&lt;code&gt;java.io.Serializable&lt;/code&gt;中的javadoc，这里摘取翻译一部分：&lt;/p&gt;
&lt;p&gt;类通过实现 java.io.Serializable 接口以启用其序列化功能。&lt;br&gt;未实现此接口的类将无法使其任何状态序列化或反序列化。&lt;br&gt;可序列化类的所有子类型本身都是可序列化的。因为实现接口也是间接的等同于继承。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>BeanPostProcessor中autowired导致AOP失效</title>
    <link href="https://damon4u.github.io//blog/2018/11/BeanPostProcessor%E4%B8%ADautowired%E5%AF%BC%E8%87%B4AOP%E5%A4%B1%E6%95%88.html"/>
    <id>https://damon4u.github.io//blog/2018/11/BeanPostProcessor中autowired导致AOP失效.html</id>
    <published>2018-11-26T09:41:50.000Z</published>
    <updated>2018-11-26T10:42:21.113Z</updated>
    
    <content type="html"><![CDATA[<p>在使用SpringBoot集成shiro时，遇到过一个问题，在启动时，shiroFilter中使用的bean都报WARN异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">trationDelegate$BeanPostProcessorChecker : Bean &apos;adminService&apos; of type [com.mypackage.service.AdminService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</div><div class="line">trationDelegate$BeanPostProcessorChecker : Bean &apos;sessionManager&apos; of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</div><div class="line">trationDelegate$BeanPostProcessorChecker : Bean &apos;securityManager&apos; of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</div><div class="line">...</div></pre></td></tr></table></figure></p><a id="more"></a><p>其中shiroFilter使用一般的配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">    ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</div><div class="line">    shiroFilterFactoryBean.setSecurityManager(securityManager());</div><div class="line">    shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</div><div class="line">    shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/"</span>);</div><div class="line">    Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">    filterChainDefinitionMap.put(<span class="string">"/login"</span>, <span class="string">"authc"</span>);</div><div class="line">    filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"user"</span>);</div><div class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</div><div class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</div><div class="line">    securityManager.setRealm(shiroDbRealm());</div><div class="line">    securityManager.setCacheManager(shiroRedisCacheManager());</div><div class="line">    securityManager.setSessionManager(sessionManager());</div><div class="line">    <span class="keyword">return</span> securityManager;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// shiroDbRealm，shiroRedisCacheManager，sessionManager 等</span></div></pre></td></tr></table></figure></p><p>shiroDbRealm使用<code>@autowired</code>注入了<code>AdminService</code>，它使用Spring AOP实现了动态数据源切换，根据WARN日志提示，该bean不能被aop增强，测试发现动态数据源确实不成功切换。</p><p>这是为什么呢？</p><p>搜索到答案是，<code>ShiroFilterFactoryBean</code>实现了<code>BeanPostProcessor</code>，而Spring AOP是用<code>BeanPostProcessor</code>实现的，所以其他<code>BeanPostProcessor</code>及其引用的bean都不能被aop增强。</p><blockquote><p>Classes that implement the <code>BeanPostProcessor</code> interface are special, and so they are treated differently by the container. All <code>BeanPostProcessors</code> and their <strong>directly referenced beans</strong> will be instantiated on startup, as part of the special startup phase of the <code>ApplicationContext</code>, then all those <code>BeanPostProcessors</code> will be registered in a sorted fashion - and applied to all further beans. Since AOP auto-proxying is implemented as a <code>BeanPostProcessor</code> itself, no <code>BeanPostProcessors</code> or directly referenced beans are eligible for auto-proxying (and thus will not have aspects ‘woven’ into them. <br><br>For any such bean, you should see an info log message: “Bean ‘foo’ is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)”.</p></blockquote><p>但是realm中一定要使用数据库查询进行认证和鉴权，我这里改成了使用一个实现了<code>ApplicationContextAware</code>的<code>SpringContextUtil</code>中拿。</p><p>参考：<br><a href="https://stackoverflow.com/questions/1201726/tracking-down-cause-of-springs-not-eligible-for-auto-proxying" target="_blank" rel="external">Tracking down cause of Spring’s “not eligible for auto-proxying”</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用SpringBoot集成shiro时，遇到过一个问题，在启动时，shiroFilter中使用的bean都报WARN异常：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;trationDelegate$BeanPostProcessorChecker : Bean &amp;apos;adminService&amp;apos; of type [com.mypackage.service.AdminService] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;trationDelegate$BeanPostProcessorChecker : Bean &amp;apos;sessionManager&amp;apos; of type [org.apache.shiro.web.session.mgt.DefaultWebSessionManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;trationDelegate$BeanPostProcessorChecker : Bean &amp;apos;securityManager&amp;apos; of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="https://damon4u.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://damon4u.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot中BeanPostProcessor注册</title>
    <link href="https://damon4u.github.io//blog/2018/11/SpringBoot%E4%B8%ADBeanPostProcessor%E6%B3%A8%E5%86%8C.html"/>
    <id>https://damon4u.github.io//blog/2018/11/SpringBoot中BeanPostProcessor注册.html</id>
    <published>2018-11-26T08:41:50.000Z</published>
    <updated>2018-11-26T10:46:40.800Z</updated>
    
    <content type="html"><![CDATA[<p>在使用SpringBoot集成shiro时，遇到过一个问题，shiro需要注册一个<code>LifecycleBeanPostProcessor</code>，用来调用内部的<code>init()</code>和<code>destroy()</code>方法。<br>一般在Configuration中注册：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringServiceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> SpringDataSourceConfig springDataSourceConfig;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SpringRedisConfig springRedisConfig;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringServiceConfig</span><span class="params">(SpringRedisConfig springRedisConfig)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.springRedisConfig = springRedisConfig;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//sessionManager securityManager realm...</span></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@DependsOn</span>(&#123;<span class="string">"lifecycleBeanPostProcessor"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">advisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</div><div class="line">        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</div><div class="line">        defaultAdvisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">return</span> defaultAdvisorAutoProxyCreator;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><p>在这个<code>Configuration</code>中，使用<code>@Autowired</code>注入会失败！<br>如果是在属性上使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> SpringDataSourceConfig springDataSourceConfig;</div></pre></td></tr></table></figure></p><p>使用时发现springDataSourceConfig为空；<br>如果用构造器注入：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> SpringRedisConfig springRedisConfig;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringServiceConfig</span><span class="params">(SpringRedisConfig springRedisConfig)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.springRedisConfig = springRedisConfig;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">No default constructor found;</div></pre></td></tr></table></figure></p><p>网上搜索后找到答案，原因是<code>LifecycleBeanPostProcessor</code>集成了<code>BeanPostProcessor</code>，而在Spring声明周期中，<code>BeanPostProcessor</code>和<code>BeanFactoryPostProcessor</code>的初始化是优先于bean的初始化的：</p><p><img src="/images/spring0.png" alt=""></p><p><img src="/images/spring1.png" alt=""></p><p>因此，如果一个<code>@Configuration</code>标注的类中返回了<code>BeanPostProcessor</code>或者<code>BeanFactoryPostProcessor</code>，那么无法使用<code>@Autowired</code>进行注入。<br><code>@Bean</code>注解的javadoc中也有说明：</p><blockquote><p>BeanFactoryPostProcessor-returning <code>@Bean</code> methods <br><br>Special consideration must be taken for <code>@Bean</code> methods that return Spring <strong>BeanFactoryPostProcessor (BFPP)</strong> types. Because BFPP objects must be instantiated very early in the container lifecycle, they can interfere(干涉) with processing of annotations such as <code>@Autowired</code>, <code>@Value</code>, and <code>@PostConstruct</code> within <code>@Configuration</code> classes. To avoid these lifecycle issues, mark BFPP-returning <code>@Bean</code> methods as <strong>static</strong>. For example:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PropertyPlaceholderConfigurer <span class="title">ppc</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// instantiate, configure and return ppc ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>By marking this method as static, it can be invoked without causing instantiation of its declaring <code>@Configuration</code> class, thus avoiding the above-mentioned lifecycle conflicts. Note however that static <code>@Bean</code> methods will not be enhanced for scoping and AOP semantics as mentioned above. This works out in BFPP cases, as they are not typically referenced by other <code>@Bean</code> methods. As a reminder, a WARN-level log message will be issued for any non-static <code>@Bean</code> methods having a return type assignable to BeanFactoryPostProcessor.</p></blockquote><p>解决的方案javadoc中也说了，就是给返回<code>BeanPostProcessor</code>或者<code>BeanFactoryPostProcessor</code>的方法使用static修饰。<br>这样，调用该方法时，不需要实例化外层的容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参考：<br><a href="https://stackoverflow.com/questions/31763257/spring-java-based-configuration-with-static-method" target="_blank" rel="external">Spring Java based configuration with static method</a><br><a href="https://www.cnblogs.com/zrtqsk/p/3735273.html" target="_blank" rel="external">Spring Bean的生命周期</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用SpringBoot集成shiro时，遇到过一个问题，shiro需要注册一个&lt;code&gt;LifecycleBeanPostProcessor&lt;/code&gt;，用来调用内部的&lt;code&gt;init()&lt;/code&gt;和&lt;code&gt;destroy()&lt;/code&gt;方法。&lt;br&gt;一般在Configuration中注册：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SpringServiceConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SpringDataSourceConfig springDataSourceConfig;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SpringRedisConfig springRedisConfig;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SpringServiceConfig&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SpringRedisConfig springRedisConfig)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.springRedisConfig = springRedisConfig;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//sessionManager securityManager realm...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; LifecycleBeanPostProcessor &lt;span class=&quot;title&quot;&gt;lifecycleBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LifecycleBeanPostProcessor();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@DependsOn&lt;/span&gt;(&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;lifecycleBeanPostProcessor&quot;&lt;/span&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; DefaultAdvisorAutoProxyCreator &lt;span class=&quot;title&quot;&gt;advisorAutoProxyCreator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultAdvisorAutoProxyCreator();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        defaultAdvisorAutoProxyCreator.setProxyTargetClass(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; defaultAdvisorAutoProxyCreator;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="https://damon4u.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://damon4u.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot中的bean加载顺序</title>
    <link href="https://damon4u.github.io//blog/2018/11/SpringBoot%E4%B8%AD%E7%9A%84bean%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F.html"/>
    <id>https://damon4u.github.io//blog/2018/11/SpringBoot中的bean加载顺序.html</id>
    <published>2018-11-23T08:41:50.000Z</published>
    <updated>2018-11-26T10:42:21.113Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做传统Spring项目到SpringBoot项目迁移过程中，遇到了一些bean加载顺序的问题：<br>比如一个config中的bean依赖于另一个config中的bean进行初始化，于是查了一些资料，出现了一些新的概念：</p><ul><li><code>@Order</code></li><li><code>@AutoConfigureAfter</code></li><li><code>@DependsOn</code></li></ul><a id="more"></a><h3 id="Order注解"><a href="#Order注解" class="headerlink" title="@Order注解"></a><code>@Order</code>注解</h3><blockquote><p>Before Spring 4.0, the <code>@Order</code> annotation was used only for the <code>AspectJ</code> execution order. It means the highest order advice will run first. <br><br>Since Spring 4.0, it supports <strong>the ordering of injected components to a collection</strong>. As a result, Spring will inject the auto-wired beans of the same type based on their order value.</p></blockquote><p>在Spring 4.0版本之前，<code>@Order</code>注解只能控制AOP的执行顺序，在Spring 4.0之后，它还可以控制集合注入中bean的顺序。<br>控制AOP顺序很好理解，例如可以在<code>@Aspect</code>注解的切面上加入<code>@Order</code>注解，控制切面的执行顺序。<br>还有<code>@EnableTransactionManagement(order = 10)</code>，这种写法，由于Spring的事务也是用AOP实现，也可以控制优先级。</p><p>下面举个例子说明控制集合注入中bean的顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rating</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getRating</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Excellent</span> <span class="keyword">implements</span> <span class="title">Rating</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRating</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Order</span>(<span class="number">2</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Good</span> <span class="keyword">implements</span> <span class="title">Rating</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRating</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Order</span>(Ordered.LOWEST_PRECEDENCE)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Average</span> <span class="keyword">implements</span> <span class="title">Rating</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRating</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后是测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RatingRetrieverUnitTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> List&lt;Rating&gt; ratings;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenOrder_whenInjected_thenByOrderValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        assertThat(ratings.get(<span class="number">0</span>).getRating(), is(equalTo(<span class="number">1</span>)));</div><div class="line">        assertThat(ratings.get(<span class="number">1</span>).getRating(), is(equalTo(<span class="number">2</span>)));</div><div class="line">        assertThat(ratings.get(<span class="number">2</span>).getRating(), is(equalTo(<span class="number">3</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果不使用<code>@Order</code>注解，那ratings集合可能是乱序的。</p><p>有一种错误的用法：<br>先定义两个service：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService1</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService1.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderService1</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"OrderService1 constructor"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"orderService1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService2.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderService2</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"OrderService2 constructor"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"orderService2"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后写两个config注入bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService1Config</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService1Config.class);</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OrderService1 <span class="title">orderService1</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"orderService1 init"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderService1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Order</span>(<span class="number">0</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService2Config</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService2Config.class);</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OrderService2 <span class="title">orderService2</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"orderService2 init"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderService2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>本意是想通过<code>@Order</code>控制bean的注入顺序，先注入orderService2，再注入orderService1。但是并没有效果。<br>所以，<code>@Order</code>注解放到<code>@Configuration</code>中是无法控制bean的注入顺序的。</p><h3 id="AutoConfigureAfter注解"><a href="#AutoConfigureAfter注解" class="headerlink" title="@AutoConfigureAfter注解"></a><code>@AutoConfigureAfter</code>注解</h3><blockquote><p> Hint for that an <code>EnableAutoConfiguration</code> auto-configuration should be applied after other specified auto-configuration classes.</p></blockquote><p>类似的注解还有：</p><ul><li><code>@AutoConfigureBefore</code></li><li><code>@AutoConfigureOrder</code></li></ul><p>这三个注解是特地用于autoconfigure类的，不能用于普通的配置类。</p><p>有必要先说明一下autoconfigure类项目。</p><p>通常我们会在主类入口上标注<code>@SpringBootApplication</code>注解，或者直接标注<code>@EnableAutoConfiguration</code>注解。<br>这个注解是用来根据类路径中的依赖包猜测需要注入的bean，实现自动注入：</p><blockquote><p>Enable auto-configuration of the Spring Application Context, attempting to guess and configure beans that you are likely to need. Auto-configuration classes are usually applied based on your classpath and what beans you have defined.</p></blockquote><p>可以理解为，<code>@EnableAutoConfiguration</code>是服务于自动注入的bean的，即<code>spring-boot-starter</code>中bean的自动加载顺序。<br>被排序的这些类，都是通过<code>xxx-spring-boot-autoconfigure</code>项目中的<code>src/resources/META-INF/spring.factories</code>配置文件获取的，这个文件中的配置内容一般为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Auto Configure</div><div class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</div><div class="line">com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration</div></pre></td></tr></table></figure></p><p>Spring Boot 只会对从这个文件读取的配置类进行排序。</p><p>但是不要以为将自己的配置类也配置在<code>spring.factories</code>中就能实现排序，如果你的类被自己<code>Spring Boot</code>启动类扫描到了，这个类的顺序会优先于所有通过<code>spring.factories</code>读取的配置类。</p><blockquote><p>Auto-configuration is always applied after user-defined beans have been registered.</p></blockquote><h3 id="DependsOn注解"><a href="#DependsOn注解" class="headerlink" title="@DependsOn注解"></a><code>@DependsOn</code>注解</h3><blockquote><p>Beans on which the current bean depends. Any beans specified are guaranteed to be created by the container before this bean.  <br><br>Used infrequently in cases where a bean does not explicitly depend on another through properties or constructor arguments, but rather depends on the side effects of another bean’s initialization.<br><br>May be used on any class directly or indirectly annotated with org.springframework.stereotype.Component or on methods annotated with Bean.<br><br>Using DependsOn at the class level has no effect unless component-scanning is being used. If a DependsOn-annotated class is declared via XML, DependsOn annotation metadata is ignored, and <bean depends-on="..."> is respected instead.</bean></p></blockquote><p>从java doc中可以看出，<code>@DependsOn</code>注解可以用来控制bean的创建顺序，该注解用于声明当前bean依赖于另外一个bean。所依赖的bean会被容器确保在当前bean实例化之前被实例化。<br><strong>一般用在一个bean没有通过属性或者构造函数参数显式依赖另外一个bean，但实际上会使用到那个bean或者那个bean产生的某些结果的情况。</strong></p><p>用法</p><ul><li>直接或者间接标注在带有<code>@Component</code>注解的类上面;</li><li>直接或者间接标注在带有<code>@Bean</code>注解的方法上面;</li><li>使用<code>@DependsOn</code>注解到类层面仅仅在使用 <strong>component-scanning</strong> 方式时才有效;如果带有<code>@DependsOn</code>注解的类通过XML方式使用，该注解会被忽略，<code>&lt;bean depends-on=&quot;...&quot;/&gt;</code>这种方式会生效。</li></ul><p>例如，我们有一个<code>FileProcessor</code>依赖于<code>FileReader</code>和<code>FileWriter</code>，<code>FileReader</code>和<code>FileWriter</code>需要在<code>FileProcessor</code>之前初始化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.baeldung.dependson"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@DependsOn</span>(&#123;<span class="string">"fileReader"</span>,<span class="string">"fileWriter"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> FileProcessor <span class="title">fileProcessor</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileProcessor();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(<span class="string">"fileReader"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> FileReader <span class="title">fileReader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileReader();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(<span class="string">"fileWriter"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> FileWriter <span class="title">fileWriter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileWriter();</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>也可以在<code>Component</code>上标注：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@DependsOn</span>(&#123;<span class="string">"filereader"</span>, <span class="string">"fileWriter"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileProcessor</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p><h3 id="属性注入和构造器注入"><a href="#属性注入和构造器注入" class="headerlink" title="属性注入和构造器注入"></a>属性注入和构造器注入</h3><p>上面说到<code>@DependsOn</code>注解时提到，它一般用在一个bean没有通过属性或者构造函数参数显式依赖另外一个bean，但实际上会使用到那个bean或者那个bean产生的某些结果的情况。<br>如果bean直接依赖于另一个bean，我们可以将其通过属性或者构造函数引入进来。<br>而使用构造函数的方法显示依赖一个bean，能够保证被依赖的bean先初始化。但是属性注入不可以。</p><blockquote><p>constructor-injection automatically enforces the order and completeness of the instantiated.</p></blockquote><p>因此，我们可以在Component中使用构造函数显示注入依赖的bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyComponent</span><span class="params">(@Qualifier(<span class="string">"jedisTemplateNew"</span>)</span> JedisTemplate jedisTemplateNew) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意，需要使用<code>@Qualifier</code>限定bean名称时，不能标注在构造方法上，而是应该标注在参数上。原因跟<code>@Resource</code>不能标注构造方法一样，它不知道你要限定哪个参数。</p><p>假设有两个service，<code>OrderService1</code>依赖于<code>OrderService2</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService1</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService1.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OrderService2 orderService2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderService1</span><span class="params">(OrderService2 orderService2)</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"OrderService1 constructor"</span>);</div><div class="line">        <span class="keyword">this</span>.orderService2 = orderService2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">        String name = orderService2.name();</div><div class="line">        LOGGER.info(<span class="string">"OrderService1 print orderService2 name=&#123;&#125;"</span>, name);</div><div class="line">        <span class="keyword">return</span> <span class="string">"orderService1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService2</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService2.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderService2</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"OrderService2 constructor"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"orderService2"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对应的Configuration：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService1Config</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService1Config.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> OrderService2Config orderService2Config;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OrderService1 <span class="title">orderService1</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"orderService1 init"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderService1(orderService2Config.orderService2());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService2Config</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService2Config.class);</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OrderService2 <span class="title">orderService2</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"orderService2 init"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderService2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">c.m.s.config.OrderService1Config         : orderService1 init</div><div class="line">c.m.s.config.OrderService2Config         : orderService2 init</div><div class="line">c.m.s.service.OrderService2              : OrderService2 constructor</div><div class="line">c.m.s.service.OrderService1              : OrderService1 constructor</div></pre></td></tr></table></figure></p><p>可以看出，<code>OrderService2</code>先初始化。</p><p>换一种<code>OrderService1</code>写法，使用属性注入：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService1</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService1.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OrderService2 orderService2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderService2</span><span class="params">(OrderService2 orderService2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.orderService2 = orderService2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderService1</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"OrderService1 constructor"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">        String name = orderService2.name();</div><div class="line">        LOGGER.info(<span class="string">"OrderService1 print orderService2 name=&#123;&#125;"</span>, name);</div><div class="line">        <span class="keyword">return</span> <span class="string">"orderService1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService1Config</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService1Config.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> OrderService2Config orderService2Config;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OrderService1 <span class="title">orderService1</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"orderService1 init"</span>);</div><div class="line">        OrderService1 orderService1 = <span class="keyword">new</span> OrderService1();</div><div class="line">        orderService1.setOrderService2(orderService2Config.orderService2());</div><div class="line">        <span class="keyword">return</span> orderService1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">c.m.s.config.OrderService1Config         : orderService1 init</div><div class="line">c.m.s.service.OrderService1              : OrderService1 constructor</div><div class="line">c.m.s.config.OrderService2Config         : orderService2 init</div><div class="line">c.m.s.service.OrderService2              : OrderService2 constructor</div></pre></td></tr></table></figure></p><p>可以看出，<code>OrderService2</code>并没有先初始化。</p><p>当然，<code>OrderService1Config</code>也可以使用构造器注入：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService1Config</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OrderService1Config.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderService2Config orderService2Config;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderService1Config</span><span class="params">(OrderService2Config orderService2Config)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.orderService2Config = orderService2Config;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OrderService1 <span class="title">orderService1</span><span class="params">()</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"orderService1 init"</span>);</div><div class="line">        OrderService1 orderService1 = <span class="keyword">new</span> OrderService1();</div><div class="line">        orderService1.setOrderService2(orderService2Config.orderService2());</div><div class="line">        <span class="keyword">return</span> orderService1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>参考：<br><a href="https://www.baeldung.com/spring-order" target="_blank" rel="external">@Order in Spring</a><br><a href="https://www.baeldung.com/spring-depends-on" target="_blank" rel="external">Controlling Bean Creation Order with @DependsOn Annotation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做传统Spring项目到SpringBoot项目迁移过程中，遇到了一些bean加载顺序的问题：&lt;br&gt;比如一个config中的bean依赖于另一个config中的bean进行初始化，于是查了一些资料，出现了一些新的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Order&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@AutoConfigureAfter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@DependsOn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="spring" scheme="https://damon4u.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://damon4u.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>shiro开发（四）Realm及相关对象</title>
    <link href="https://damon4u.github.io//blog/2018/11/shiro%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89Realm%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%AF%B9%E8%B1%A1.html"/>
    <id>https://damon4u.github.io//blog/2018/11/shiro开发（四）Realm及相关对象.html</id>
    <published>2018-11-21T08:41:50.000Z</published>
    <updated>2018-11-21T13:47:05.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AuthenticationToken"><a href="#AuthenticationToken" class="headerlink" title="AuthenticationToken"></a>AuthenticationToken</h3><p>AuthenticationToken用于收集用户提交的身份（如用户名）及凭据（如密码）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationToken</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">getPrincipal</span><span class="params">()</span></span>; <span class="comment">//身份</span></div><div class="line">    <span class="function">Object <span class="title">getCredentials</span><span class="params">()</span></span>; <span class="comment">//凭据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>扩展接口<code>RememberMeAuthenticationToken</code>提供了<code>boolean isRememberMe()</code>实现“记住我”的功能；<br>扩展接口<code>HostAuthenticationToken</code>提供了<code>String getHost()</code>方法用于获取用户“主机”的功能。</p><p>Shiro提供了一个直接拿来用的<code>UsernamePasswordToken</code>，用于实现用户名/密码<code>Token</code>组，另外其实现了<code>RememberMeAuthenticationToken</code>和<code>HostAuthenticationToken</code>，可以实现记住我及主机验证的支持。</p><a id="more"></a><p>我们可以实现自己的<code>AuthenticationToken</code>，例如想要统一账号登录，这个账号可能是平台唯一账号：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationToken</span> <span class="keyword">implements</span> <span class="title">AuthenticationToken</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String account; <span class="comment">// 统一账号</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyAuthenticationToken</span><span class="params">(String account)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.account = account;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> getAccount();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> getAccount(); <span class="comment">// 密码凭证也返回统一账号</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAccount</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.account;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="AuthenticationInfo"><a href="#AuthenticationInfo" class="headerlink" title="AuthenticationInfo"></a>AuthenticationInfo</h3><p><code>AuthenticationInfo</code>有两个作用：</p><ol><li>如果Realm是<code>AuthenticatingRealm</code>子类，则提供给<code>AuthenticatingRealm</code>内部使用的<code>CredentialsMatcher</code>进行凭据验证；</li><li>提供给SecurityManager来创建Subject（提供身份信息）。</li></ol><p>说一下第一个功能。<br>一般我们在实现Realm时，会实现<code>doGetAuthenticationInfo</code>方法，获取认证信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException</span>;</div></pre></td></tr></table></figure></p><p>然后<code>AuthenticatingRealm</code>内部会使用这个认证信息进行凭证校验：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">assertCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">    CredentialsMatcher cm = getCredentialsMatcher();</div><div class="line">    <span class="keyword">if</span> (cm != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!cm.doCredentialsMatch(token, info)) &#123;</div><div class="line">            <span class="comment">//not successful - throw an exception to indicate this:</span></div><div class="line">            String msg = <span class="string">"Submitted credentials for token ["</span> + token + <span class="string">"] did not match the expected credentials."</span>;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException(msg);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"A CredentialsMatcher must be configured in order to verify "</span> +</div><div class="line">                <span class="string">"credentials during authentication.  If you do not wish for credentials to be examined, you "</span> +</div><div class="line">                <span class="string">"can configure an "</span> + AllowAllCredentialsMatcher.class.getName() + <span class="string">" instance."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们可以实现自己的<code>AuthenticationInfo</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationInfo</span> <span class="keyword">implements</span> <span class="title">AuthenticationInfo</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> PrincipalCollection principals;</div><div class="line"><span class="keyword">private</span> String credentials;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyAuthenticationInfo</span><span class="params">(Object principal, String realmName)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.principals = <span class="keyword">new</span> SimplePrincipalCollection(principal, credentials);</div><div class="line"><span class="keyword">this</span>.credentials = credentials;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> PrincipalCollection <span class="title">getPrincipals</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.principals;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.credentials;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中<code>PrincipalCollection</code>用于聚合这些身份信息，一般用<code>SimplePrincipalCollection</code>就好。</p><p>当然，还要写一个对应的比对<code>CredentialsMatcher</code>，用来对<code>MyAuthenticationInfo</code>进行凭证校验：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MintCredentialsMatcher</span> <span class="keyword">extends</span> <span class="title">PasswordMatcher</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doCredentialsMatch</span><span class="params">(AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(token <span class="keyword">instanceof</span> MyAuthenticationToken) &#123;</div><div class="line"><span class="keyword">return</span> token.getCredentials().equals(info.getCredentials());</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">super</span>.doCredentialsMatch(token, info);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在MyRealm的<code>doGetAuthenticationInfo</code>方法中，返回一个<code>MyAuthenticationInfo</code>，将<code>MyAuthenticationToken</code>的account赋值给<code>MyAuthenticationInfo</code>的credentials：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyAuthenticationInfo(user, myAuthenticationToken.getAccount());</div></pre></td></tr></table></figure></p><p>这样在校验时就能成功了。</p><h3 id="AuthorizationInfo"><a href="#AuthorizationInfo" class="headerlink" title="AuthorizationInfo"></a>AuthorizationInfo</h3><p>AuthorizationInfo包含了授权信息，当我们使用<code>AuthorizingRealm</code>时，如果身份验证成功，在进行授权时就通过<code>doGetAuthorizationInfo</code>方法获取角色/权限信息用于授权验证。<br>Shiro提供了一个实现<code>SimpleAuthorizationInfo</code>，大多数时候使用这个即可。</p><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>Subject是Shiro的核心对象，基本所有身份验证、授权都是通过Subject完成。</p><h4 id="身份信息获取"><a href="#身份信息获取" class="headerlink" title="身份信息获取"></a>身份信息获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">Object <span class="title">getPrincipal</span><span class="params">()</span></span>; <span class="comment">//Primary Principal</span></div><div class="line"><span class="function">PrincipalCollection <span class="title">getPrincipals</span><span class="params">()</span></span>; <span class="comment">// PrincipalCollection</span></div></pre></td></tr></table></figure><h4 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException</span>;</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isRemembered</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><p>通过<code>login</code>登录，如果登录失败将抛出相应的<code>AuthenticationException</code>，如果登录成功调用<code>isAuthenticated</code>就会返回true，即已经通过身份验证；<br>如果<code>isRemembered</code>返回true，表示是通过记住我功能登录的而不是调用login方法登录的。<br><code>isAuthenticated</code>/<code>isRemembered</code>是互斥的，即如果其中一个返回true，另一个返回false。</p><h4 id="角色授权验证"><a href="#角色授权验证" class="headerlink" title="角色授权验证"></a>角色授权验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String roleIdentifier)</span></span>;</div><div class="line"><span class="keyword">boolean</span>[] hasRoles(List&lt;String&gt; roleIdentifiers);</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasAllRoles</span><span class="params">(Collection&lt;String&gt; roleIdentifiers)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkRole</span><span class="params">(String roleIdentifier)</span> <span class="keyword">throws</span> AuthorizationException</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkRoles</span><span class="params">(Collection&lt;String&gt; roleIdentifiers)</span> <span class="keyword">throws</span> AuthorizationException</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkRoles</span><span class="params">(String... roleIdentifiers)</span> <span class="keyword">throws</span> AuthorizationException</span>;</div></pre></td></tr></table></figure><p><code>hasRole*</code>进行角色验证，验证后返回true/false；而<code>checkRole*</code>验证失败时抛出<code>AuthorizationException</code>异常。</p><h4 id="权限授权验证"><a href="#权限授权验证" class="headerlink" title="权限授权验证"></a>权限授权验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPermitted</span><span class="params">(String permission)</span></span>;</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPermitted</span><span class="params">(Permission permission)</span></span>;</div><div class="line"><span class="keyword">boolean</span>[] isPermitted(String... permissions);</div><div class="line"><span class="keyword">boolean</span>[] isPermitted(List&lt;Permission&gt; permissions);</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPermittedAll</span><span class="params">(String... permissions)</span></span>;</div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPermittedAll</span><span class="params">(Collection&lt;Permission&gt; permissions)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(String permission)</span> <span class="keyword">throws</span> AuthorizationException</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(Permission permission)</span> <span class="keyword">throws</span> AuthorizationException</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkPermissions</span><span class="params">(String... permissions)</span> <span class="keyword">throws</span> AuthorizationException</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkPermissions</span><span class="params">(Collection&lt;Permission&gt; permissions)</span> <span class="keyword">throws</span> AuthorizationException</span>;</div></pre></td></tr></table></figure><p><code>isPermitted*</code>进行权限验证，验证后返回true/false；而<code>checkPermission*</code>验证失败时抛出<code>AuthorizationException</code>。</p><h4 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">Session <span class="title">getSession</span><span class="params">()</span></span>; <span class="comment">//相当于getSession(true)</span></div><div class="line"><span class="function">Session <span class="title">getSession</span><span class="params">(<span class="keyword">boolean</span> create)</span></span>;</div></pre></td></tr></table></figure><p>类似于Web中的会话。如果登录成功就相当于建立了会话，接着可以使用getSession获取；如果create=false如果没有会话将返回null，而create=true如果没有会话会强制创建一个。</p><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void logout();</div></pre></td></tr></table></figure><p>参考：<br><a href="http://jinnianshilongnian.iteye.com/blog/2022468" target="_blank" rel="external">第六章 Realm及相关对象——《跟我学Shiro》</a><br><a href="http://shiro.apache.org/reference.html" target="_blank" rel="external">Apache Shiro Reference Documentation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AuthenticationToken&quot;&gt;&lt;a href=&quot;#AuthenticationToken&quot; class=&quot;headerlink&quot; title=&quot;AuthenticationToken&quot;&gt;&lt;/a&gt;AuthenticationToken&lt;/h3&gt;&lt;p&gt;AuthenticationToken用于收集用户提交的身份（如用户名）及凭据（如密码）：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AuthenticationToken&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;getPrincipal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//身份&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;getCredentials&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//凭据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;扩展接口&lt;code&gt;RememberMeAuthenticationToken&lt;/code&gt;提供了&lt;code&gt;boolean isRememberMe()&lt;/code&gt;实现“记住我”的功能；&lt;br&gt;扩展接口&lt;code&gt;HostAuthenticationToken&lt;/code&gt;提供了&lt;code&gt;String getHost()&lt;/code&gt;方法用于获取用户“主机”的功能。&lt;/p&gt;
&lt;p&gt;Shiro提供了一个直接拿来用的&lt;code&gt;UsernamePasswordToken&lt;/code&gt;，用于实现用户名/密码&lt;code&gt;Token&lt;/code&gt;组，另外其实现了&lt;code&gt;RememberMeAuthenticationToken&lt;/code&gt;和&lt;code&gt;HostAuthenticationToken&lt;/code&gt;，可以实现记住我及主机验证的支持。&lt;/p&gt;
    
    </summary>
    
      <category term="shiro" scheme="https://damon4u.github.io/categories/shiro/"/>
    
    
      <category term="shiro" scheme="https://damon4u.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>shiro开发（三）授权</title>
    <link href="https://damon4u.github.io//blog/2018/11/shiro%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83.html"/>
    <id>https://damon4u.github.io//blog/2018/11/shiro开发（三）授权.html</id>
    <published>2018-11-21T07:41:50.000Z</published>
    <updated>2018-11-21T13:47:05.579Z</updated>
    
    <content type="html"><![CDATA[<p><strong>授权</strong>，也叫访问控制，即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。<br>在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。</p><a id="more"></a><ul><li>主体：即访问应用的用户，在Shiro中使用Subject代表该用户。用户只有授权后才允许访问相应的资源；</li><li>资源：在应用中用户可以访问的任何东西，比如访问JSP页面、查看/编辑某些数据、访问某个业务方法、打印文本等等都是资源。用户只要授权后才能访问；</li><li>权限：安全策略中的原子授权单位，通过权限我们可以表示在应用中用户有没有操作某个资源的权力。即权限表示在应用中用户能不能访问某个资源，如：访问用户列表页面、查看/新增/修改/删除用户数据（即很多时候都是CRUD（增查改删）式权限控制）、打印文档等等；如上可以看出，权限代表了用户有没有操作某个资源的权利，即反映在某个资源上的操作允不允许，不反映谁去执行这个操作。所以后续还需要把权限赋予给用户，即定义哪个用户允许在某个资源上做什么操作（权限），Shiro不会去做这件事情，而是由实现人员提供。Shiro支持粗粒度权限（如用户模块的所有权限）和细粒度权限（操作某个用户的权限，即实例级别的），后续部分介绍；</li><li>角色：代表了操作集合，可以理解为权限的集合，一般情况下我们会赋予用户角色而不是权限，即这样用户可以拥有一组权限，赋予权限时比较方便。典型的如：项目经理、技术总监、CTO、开发工程师等都是角色，不同的角色拥有一组不同的权限。<ul><li>隐式角色：即直接通过角色来验证用户有没有操作权限，如在应用中CTO、技术总监、开发工程师可以使用打印机，假设某天不允许开发工程师使用打印机，此时需要从应用中删除相应代码；再如在应用中CTO、技术总监可以查看用户、查看权限；突然有一天不允许技术总监查看用户、查看权限了，需要在相关代码中把技术总监角色从判断逻辑中删除掉；即粒度是以角色为单位进行访问控制的，粒度较粗；如果进行修改可能造成多处代码修改。</li><li>显示角色：在程序中通过权限控制谁能访问某个资源，角色聚合一组权限集合；这样假设哪个角色不能访问某个资源，只需要从角色代表的权限集合中移除即可；无须修改多处代码；即粒度是以资源/实例为单位的；粒度较细。</li></ul></li></ul><h3 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h3><p>Shiro支持三种方式的授权：</p><p><strong>编程式</strong>：通过写if/else授权代码块完成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Subject subject = SecurityUtils.getSubject();</div><div class="line"><span class="keyword">if</span>(subject.hasRole(“admin”)) &#123;</div><div class="line">    <span class="comment">//有权限</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//无权限</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>注解式</strong>：通过在执行的Java方法上放置相应的注解完成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"admin"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//有权限</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>没有权限将抛出相应的异常；</p><p><strong>JSP/GSP标签</strong>：在JSP/GSP页面通过相应的标签完成：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">"admin"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!—</span> 有权限 —&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></div></pre></td></tr></table></figure></p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><h4 id="基于角色的访问控制（隐式角色）"><a href="#基于角色的访问控制（隐式角色）" class="headerlink" title="基于角色的访问控制（隐式角色）"></a>基于角色的访问控制（隐式角色）</h4><p>在ini配置文件配置用户拥有的角色（shiro-role.ini）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line">zhang=123,role1,role2</div><div class="line">wang=123,role1</div></pre></td></tr></table></figure></p><p>规则即：<code>“用户名=密码,角色1，角色2”</code><br>如果需要在应用中判断用户是否有相应角色，就需要在相应的Realm中返回角色信息。<br>也就是说Shiro不负责维护用户-角色信息，需要应用提供，Shiro只是提供相应的接口方便验证，后续会介绍如何动态的获取用户角色。</p><p>测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHasRole</span><span class="params">()</span> </span>&#123;</div><div class="line">    login(<span class="string">"classpath:shiro-role.ini"</span>, <span class="string">"zhang"</span>, <span class="string">"123"</span>);</div><div class="line">    <span class="comment">//判断拥有角色：role1</span></div><div class="line">    Assert.assertTrue(SecurityUtils.getSubject().hasRole(<span class="string">"role1"</span>));</div><div class="line">    <span class="comment">//判断拥有角色：role1 and role2</span></div><div class="line">    Assert.assertTrue(SecurityUtils.getSubject().hasAllRoles(Arrays.asList(<span class="string">"role1"</span>, <span class="string">"role2"</span>)));</div><div class="line">    <span class="comment">//判断拥有角色：role1 and role2 and !role3</span></div><div class="line">    <span class="keyword">boolean</span>[] result = SecurityUtils.getSubject().hasRoles(Arrays.asList(<span class="string">"role1"</span>, <span class="string">"role2"</span>, <span class="string">"role3"</span>));</div><div class="line">    Assert.assertTrue(result[<span class="number">0</span>]);</div><div class="line">    Assert.assertTrue(result[<span class="number">1</span>]);</div><div class="line">    Assert.assertFalse(result[<span class="number">2</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span>(expected = UnauthorizedException.class)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckRole</span><span class="params">()</span> </span>&#123;</div><div class="line">    login(<span class="string">"classpath:shiro-role.ini"</span>, <span class="string">"zhang"</span>, <span class="string">"123"</span>);</div><div class="line">    <span class="comment">//断言拥有角色：role1</span></div><div class="line">    SecurityUtils.getSubject().checkRole(<span class="string">"role1"</span>);</div><div class="line">    <span class="comment">//断言拥有角色：role1 and role3 失败抛出异常</span></div><div class="line">    SecurityUtils.getSubject().checkRoles(<span class="string">"role1"</span>, <span class="string">"role3"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String configFile, String username, String password)</span> </span>&#123;</div><div class="line">    <span class="comment">//1、获取SecurityManager工厂，此处使用Ini配置文件初始化SecurityManager</span></div><div class="line">    Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(configFile);</div><div class="line"></div><div class="line">    <span class="comment">//2、得到SecurityManager实例 并绑定给SecurityUtils</span></div><div class="line">    org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();</div><div class="line">    SecurityUtils.setSecurityManager(securityManager);</div><div class="line"></div><div class="line">    <span class="comment">//3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）</span></div><div class="line">    Subject subject = SecurityUtils.getSubject();</div><div class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</div><div class="line"></div><div class="line">    subject.login(token);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>到此基于角色的访问控制（即隐式角色）就完成了，这种方式的缺点就是如果很多地方进行了角色判断，但是有一天不需要了那么就需要修改相应代码把所有相关的地方进行删除；这就是粗粒度造成的问题。</p><h4 id="基于资源的访问控制（显示角色）"><a href="#基于资源的访问控制（显示角色）" class="headerlink" title="基于资源的访问控制（显示角色）"></a>基于资源的访问控制（显示角色）</h4><p>在ini配置文件配置用户拥有的角色及角色-权限关系（shiro-permission.ini）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line">zhang=123,role1,role2</div><div class="line">wang=123,role1</div><div class="line">[roles]</div><div class="line">role1=user:create,user:update</div><div class="line">role2=user:create,user:delete</div></pre></td></tr></table></figure></p><p>规则：<br><code>“用户名=密码，角色1，角色2”“角色=权限1，权限2”</code>，即首先根据用户名找到角色，然后根据角色再找到权限；角色是权限集合。<br>Shiro同样不进行权限的维护，需要我们通过Realm返回相应的权限信息。只需要维护“用户——角色”之间的关系即可。</p><p>测试用例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIsPermitted</span><span class="params">()</span> </span>&#123;</div><div class="line">    login(<span class="string">"classpath:shiro-permission.ini"</span>, <span class="string">"zhang"</span>, <span class="string">"123"</span>);</div><div class="line">    <span class="comment">//判断拥有权限：user:create</span></div><div class="line">    Assert.assertTrue(SecurityUtils.getSubject().isPermitted(<span class="string">"user:create"</span>));</div><div class="line">    <span class="comment">//判断拥有权限：user:update and user:delete</span></div><div class="line">    Assert.assertTrue(SecurityUtils.getSubject().isPermittedAll(<span class="string">"user:update"</span>, <span class="string">"user:delete"</span>));</div><div class="line">    <span class="comment">//判断没有权限：user:view</span></div><div class="line">    Assert.assertFalse(SecurityUtils.getSubject().isPermitted(<span class="string">"user:view"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span>(expected = UnauthorizedException.class)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCheckPermission</span> <span class="params">()</span> </span>&#123;</div><div class="line">    login(<span class="string">"classpath:shiro-permission.ini"</span>, <span class="string">"zhang"</span>, <span class="string">"123"</span>);</div><div class="line">    <span class="comment">//断言拥有权限：user:create</span></div><div class="line">    SecurityUtils.getSubject().checkPermission(<span class="string">"user:create"</span>);</div><div class="line">    <span class="comment">//断言拥有权限：user:delete and user:update</span></div><div class="line">    SecurityUtils.getSubject().checkPermissions(<span class="string">"user:delete"</span>, <span class="string">"user:update"</span>);</div><div class="line">    <span class="comment">//断言拥有权限：user:view 失败抛出异常</span></div><div class="line">    SecurityUtils.getSubject().checkPermissions(<span class="string">"user:view"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>到此基于资源的访问控制（显示角色）就完成了，也可以叫基于权限的访问控制，这种方式的一般规则是“资源标识符：操作”，即是资源级别的粒度。<br>这种方式的好处就是如果要修改基本都是一个资源级别的修改，不会对其他模块代码产生影响，粒度小。但是实现起来可能稍微复杂点，需要维护“用户——角色，角色——权限（资源：操作）”之间的关系。</p><h3 id="Permission字符串通配符权限"><a href="#Permission字符串通配符权限" class="headerlink" title="Permission字符串通配符权限"></a>Permission字符串通配符权限</h3><p>规则：<code>资源标识符：操作：对象实例ID</code><br>即对哪个资源的哪个实例可以进行什么操作。其默认支持通配符权限字符串，<code>:</code>表示资源/操作/实例的分割；<code>,</code>表示操作的分割；<code>*</code>表示任意资源/操作/实例。</p><h4 id="单个资源单个权限"><a href="#单个资源单个权限" class="headerlink" title="单个资源单个权限"></a>单个资源单个权限</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"system:user:update"</span>);</div></pre></td></tr></table></figure><p>用户拥有资源<code>system:user</code>的<code>update</code>权限。</p><h4 id="单个资源多个权限"><a href="#单个资源多个权限" class="headerlink" title="单个资源多个权限"></a>单个资源多个权限</h4><p>ini配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role41=system:user:update,system:user:delete</div></pre></td></tr></table></figure></p><p>然后通过如下代码判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"system:user:update"</span>, <span class="string">"system:user:delete"</span>);</div></pre></td></tr></table></figure></p><p>用户拥有资源<code>system:user</code>的<code>update</code>和<code>delete</code>权限。如上可以简写成：<br>ini配置（表示角色42拥有system:user资源的update和delete权限）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role42=&quot;system:user:update,delete&quot;</div></pre></td></tr></table></figure></p><p>注意<code>system:user:update,delete</code>用引号包围。<br>接着可以通过如下代码判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"system:user:update"</span>);</div><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"system:user:delete"</span>);</div><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"system:user:update,delete"</span>);</div><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"system:user:update"</span>,<span class="string">"system:user:delete"</span>);</div></pre></td></tr></table></figure></p><p>注意，如果ini配置文件没有简写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role41=system:user:update,system:user:delete</div></pre></td></tr></table></figure></p><p>那么不可以用简写判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这样是找不到的</span></div><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"system:user:update,delete"</span>);</div></pre></td></tr></table></figure></p><h4 id="单个资源全部权限"><a href="#单个资源全部权限" class="headerlink" title="单个资源全部权限"></a>单个资源全部权限</h4><p>ini配置文件（表示角色5拥有system:user的所有权限）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role52=system:user:*</div></pre></td></tr></table></figure></p><p>然后通过如下代码判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"system:user:*"</span>);</div></pre></td></tr></table></figure></p><h4 id="所有资源全部权限"><a href="#所有资源全部权限" class="headerlink" title="所有资源全部权限"></a>所有资源全部权限</h4><p>ini配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role61=*:view</div></pre></td></tr></table></figure></p><p>然后通过如下代码判断<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"user:view"</span>);</div></pre></td></tr></table></figure></p><p>用户拥有所有资源的“view”所有权限。<br>假设判断的权限是<code>system:user:view</code>，那么需要<code>role5=*:*:view</code>这样写才行。</p><h4 id="实例级别的权限"><a href="#实例级别的权限" class="headerlink" title="实例级别的权限"></a>实例级别的权限</h4><h5 id="单个实例单个权限"><a href="#单个实例单个权限" class="headerlink" title="单个实例单个权限"></a>单个实例单个权限</h5><p>ini配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role71=user:view:1</div></pre></td></tr></table></figure></p><p>对资源user的1实例拥有view权限。<br>然后通过如下代码判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"user:view:1"</span>);</div></pre></td></tr></table></figure></p><h5 id="单个实例多个权限"><a href="#单个实例多个权限" class="headerlink" title="单个实例多个权限"></a>单个实例多个权限</h5><p>ini配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role72=&quot;user:update,delete:1&quot;</div></pre></td></tr></table></figure></p><p>对资源user的1实例拥有update、delete权限。<br>然后通过如下代码判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"user:delete,update:1"</span>);</div><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"user:update:1"</span>, <span class="string">"user:delete:1"</span>);</div></pre></td></tr></table></figure></p><h5 id="单个实例所有权限"><a href="#单个实例所有权限" class="headerlink" title="单个实例所有权限"></a>单个实例所有权限</h5><p>ini配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role73=user:*:1</div></pre></td></tr></table></figure></p><p>对资源user的1实例拥有所有权限。<br>然后通过如下代码判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"user:update:1"</span>, <span class="string">"user:delete:1"</span>, <span class="string">"user:view:1"</span>);</div></pre></td></tr></table></figure></p><h5 id="所有实例单个权限"><a href="#所有实例单个权限" class="headerlink" title="所有实例单个权限"></a>所有实例单个权限</h5><p>ini配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role74=user:auth:*</div></pre></td></tr></table></figure></p><p>对资源user的1实例拥有所有权限。<br>然后通过如下代码判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"user:auth:1"</span>, <span class="string">"user:auth:2"</span>);</div></pre></td></tr></table></figure></p><h5 id="所有实例所有权限"><a href="#所有实例所有权限" class="headerlink" title="所有实例所有权限"></a>所有实例所有权限</h5><p>ini配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role75=user:*:*</div></pre></td></tr></table></figure></p><p>对资源user的1实例拥有所有权限。<br>然后通过如下代码判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SecurityUtils.getSubject().checkPermissions(<span class="string">"user:view:1"</span>, <span class="string">"user:auth:2"</span>);</div></pre></td></tr></table></figure></p><h4 id="Shiro对权限字符串缺失部分的处理"><a href="#Shiro对权限字符串缺失部分的处理" class="headerlink" title="Shiro对权限字符串缺失部分的处理"></a>Shiro对权限字符串缺失部分的处理</h4><p>如<code>user:view</code>等价于<code>user:view:*</code>；<br>而<code>organization</code>等价于<code>organization:*</code>或者<code>organization:*:*</code>。<br><strong>可以这么理解，这种方式实现了前缀匹配。</strong><br>另外如<code>user:*</code>可以匹配如<code>user:delete</code>；<br><code>user:delete</code>可以匹配如<code>user:delete:1</code>；<br><code>user:*:1</code>可以匹配如<code>user:view:1</code>、<br>即<code>*</code>可以匹配所有，不加<code>*</code>可以进行前缀匹配；<br>但是如<code>*:view</code>不能匹配<code>system:user:view</code>，需要使用<code>*:*:view</code>，即后缀匹配必须指定前缀（多个冒号就需要多个*来匹配）。</p><h4 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h4><p>通配符匹配方式比字符串相等匹配来说是更复杂的，因此需要花费更长时间，但是一般系统的权限不会太多，且可以配合缓存来提供其性能，如果这样性能还达不到要求我们可以实现位操作算法实现性能更好的权限匹配。<br>另外实例级别的权限验证如果数据量太大也不建议使用，可能造成查询权限及匹配变慢。可以考虑比如在sql查询时加上权限字符串之类的方式在查询时就完成了权限匹配。</p><h3 id="授权流程"><a href="#授权流程" class="headerlink" title="授权流程"></a>授权流程</h3><p><img src="http://dl2.iteye.com/upload/attachment/0094/0549/541e4da3-d1a5-3d13-83a6-b65c3596ee4e.png" alt=""></p><p>流程如下：</p><ol><li>首先调用<code>Subject.isPermitted*/hasRole*</code>接口，其会委托给<code>SecurityManager</code>，而<code>SecurityManager</code>接着会委托给<code>Authorizer</code>；</li><li><code>Authorizer</code>是真正的授权者，如果我们调用如<code>isPermitted(“user:view”)</code>，其首先会通过<code>PermissionResolver</code>把字符串转换成相应的<code>Permission</code>实例；</li><li>在进行授权之前，其会调用相应的<code>Realm</code>获取<code>Subject</code>相应的角色/权限用于匹配传入的角色/权限；</li><li><code>Authorizer</code>会判断<code>Realm</code>的角色/权限是否和传入的匹配，如果有多个<code>Realm</code>，会委托给<code>ModularRealmAuthorizer</code>进行循环判断，如果匹配如<code>isPermitted*/hasRole*</code>会返回true，否则返回false表示授权失败。</li></ol><p><code>ModularRealmAuthorizer</code>进行多<code>Realm</code>匹配流程：</p><ol><li>首先检查相应的<code>Realm</code>是否实现了实现了<code>Authorizer</code>；</li><li>如果实现了<code>Authorizer</code>，那么接着调用其相应的<code>isPermitted*/hasRole*</code>接口进行匹配；</li><li>如果有一个<code>Realm</code>匹配那么将返回true，否则返回false。</li></ol><p>如果<code>Realm</code>进行授权的话，应该继承<code>AuthorizingRealm</code>，其流程是：</p><ol><li>如果调用<code>hasRole*</code>，则直接获取<code>AuthorizationInfo.getRoles()</code>与传入的角色比较即可；</li><li>首先如果调用如<code>isPermitted(“user:view”)</code>，首先通过<code>PermissionResolver</code>将权限字符串转换成相应的<code>Permission</code>实例，默认使用<code>WildcardPermissionResolver</code>，即转换为通配符的<code>WildcardPermission</code>；</li><li>通过<code>AuthorizationInfo.getObjectPermissions()</code>得到<code>Permission</code>实例集合；通过<code>AuthorizationInfo.getStringPermissions()</code>得到字符串集合并通过<code>PermissionResolver</code>解析为<code>Permission</code>实例；然后获取用户的角色，并通过<code>RolePermissionResolver</code>解析角色对应的权限集合（默认没有实现，可以自己提供）；</li><li>接着调用<code>Permission.implies(Permission p)</code>逐个与传入的权限比较，如果有匹配的则返回true，否则false。</li></ol><h3 id="Authorizer、PermissionResolver及RolePermissionResolver"><a href="#Authorizer、PermissionResolver及RolePermissionResolver" class="headerlink" title="Authorizer、PermissionResolver及RolePermissionResolver"></a>Authorizer、PermissionResolver及RolePermissionResolver</h3><ul><li><code>Authorizer</code>的职责是进行授权（访问控制），是Shiro API中授权核心的入口点，其提供了相应的角色/权限判断接口，具体请参考其Javadoc。<code>SecurityManager</code>继承了<code>Authorizer</code>接口，且提供了<code>ModularRealmAuthorizer</code>用于多<code>Realm</code>时的授权匹配；</li><li><code>PermissionResolver</code>用于解析权限字符串到<code>Permission</code>实例；</li><li><code>RolePermissionResolver</code>用于根据角色解析相应的权限集合。</li></ul><p>下面自定义一个授权流程。</p><p>ini配置（shiro-authorizer.ini）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[main]</div><div class="line">#自定义authorizer</div><div class="line">authorizer=org.apache.shiro.authz.ModularRealmAuthorizer</div><div class="line">#自定义permissionResolver</div><div class="line">permissionResolver=com.maybe.shiro.resolver.BitAndWildPermissionResolver</div><div class="line">authorizer.permissionResolver=$permissionResolver</div><div class="line">#自定义rolePermissionResolver</div><div class="line">rolePermissionResolver=com.maybe.shiro.resolver.MyRolePermissionResolver</div><div class="line">authorizer.rolePermissionResolver=$rolePermissionResolver</div><div class="line">securityManager.authorizer=$authorizer</div><div class="line">#自定义realm 一定要放在securityManager.authorizer赋值之后（因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）</div><div class="line">realm=com.maybe.shiro.realm.MyRealm</div><div class="line">securityManager.realms=$realm</div></pre></td></tr></table></figure></p><p>定义<code>BitAndWildPermissionResolver</code>及<code>BitPermission</code><br><code>BitPermission</code>用于实现位移方式的权限，如规则是：</p><blockquote><p>权限字符串格式：+资源字符串+权限位+实例ID；以+开头中间通过+分割；权限：0 表示所有权限；1 新增（二进制：0001）、2 修改（二进制：0010）、4 删除（二进制：0100）、8 查看（二进制：1000）；<br>如 +user+10 表示对资源user拥有修改/查看权限。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitPermission</span> <span class="keyword">implements</span> <span class="title">Permission</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String resourceIdentify;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> permissionBit;</div><div class="line">    <span class="keyword">private</span> String instanceId;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitPermission</span><span class="params">(String permissionString)</span> </span>&#123;</div><div class="line">        String[] array = permissionString.split(<span class="string">"\\+"</span>);</div><div class="line">        <span class="keyword">if</span>(array.length &gt; <span class="number">1</span>) &#123;</div><div class="line">            resourceIdentify = array[<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(resourceIdentify)) &#123;</div><div class="line">            resourceIdentify = <span class="string">"*"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(array.length &gt; <span class="number">2</span>) &#123;</div><div class="line">            permissionBit = Integer.valueOf(array[<span class="number">2</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(array.length &gt; <span class="number">3</span>) &#123;</div><div class="line">            instanceId = array[<span class="number">3</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(instanceId)) &#123;</div><div class="line">            instanceId = <span class="string">"*"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">implies</span><span class="params">(Permission p)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!(p <span class="keyword">instanceof</span> BitPermission)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        BitPermission other = (BitPermission) p;</div><div class="line">        <span class="keyword">if</span>(!(<span class="string">"*"</span>.equals(<span class="keyword">this</span>.resourceIdentify) || <span class="keyword">this</span>.resourceIdentify.equals(other.resourceIdentify))) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!(<span class="keyword">this</span>.permissionBit ==<span class="number">0</span> || (<span class="keyword">this</span>.permissionBit &amp; other.permissionBit) != <span class="number">0</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!(<span class="string">"*"</span>.equals(<span class="keyword">this</span>.instanceId) || <span class="keyword">this</span>.instanceId.equals(other.instanceId))) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>BitAndWildPermissionResolver</code>实现了<code>PermissionResolver</code>接口，并根据权限字符串是否以<code>+</code>开头来解析权限字符串为<code>BitPermission</code>或<code>WildcardPermission</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitAndWildPermissionResolver</span> <span class="keyword">implements</span> <span class="title">PermissionResolver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Permission <span class="title">resolvePermission</span><span class="params">(String permissionString)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(permissionString.startsWith(<span class="string">"+"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BitPermission(permissionString);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WildcardPermission(permissionString);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>定义<code>MyRolePermissionResolver</code>，用于根据角色字符串来解析得到权限集合：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRolePermissionResolver</span> <span class="keyword">implements</span> <span class="title">RolePermissionResolver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;Permission&gt; <span class="title">resolvePermissionsInRole</span><span class="params">(String roleString)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="string">"role1"</span>.equals(roleString)) &#123;</div><div class="line">            <span class="keyword">return</span> Arrays.asList((Permission)<span class="keyword">new</span> WildcardPermission(<span class="string">"menu:*"</span>));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此处的实现很简单，如果用户拥有role1，那么就返回一个<code>menu:*</code>的权限。</p><p>自定义Realm<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</div><div class="line">        SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</div><div class="line">        authorizationInfo.addRole(<span class="string">"role1"</span>);</div><div class="line">        authorizationInfo.addRole(<span class="string">"role2"</span>);</div><div class="line">        authorizationInfo.addObjectPermission(<span class="keyword">new</span> BitPermission(<span class="string">"+user1+10"</span>));</div><div class="line">        authorizationInfo.addObjectPermission(<span class="keyword">new</span> WildcardPermission(<span class="string">"user1:*"</span>));</div><div class="line">        authorizationInfo.addStringPermission(<span class="string">"+user2+10"</span>);</div><div class="line">        authorizationInfo.addStringPermission(<span class="string">"user2:*"</span>);</div><div class="line">        <span class="keyword">return</span> authorizationInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">        <span class="comment">// 得到用户名</span></div><div class="line">        String username = (String) token.getPrincipal();</div><div class="line">        <span class="comment">// 得到密码</span></div><div class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[]) token.getCredentials());</div><div class="line">        <span class="keyword">if</span> (!<span class="string">"zhang"</span>.equals(username)) &#123;</div><div class="line">            <span class="comment">// 如果用户名错误</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!<span class="string">"123"</span>.equals(password)) &#123;</div><div class="line">            <span class="comment">// 如果密码错误</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果身份认证验证成功，返回一个AuthenticationInfo实现</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username, password, getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试用例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIsPermitted</span><span class="params">()</span> </span>&#123;</div><div class="line">    login(<span class="string">"classpath:shiro-authorizer.ini"</span>, <span class="string">"zhang"</span>, <span class="string">"123"</span>);</div><div class="line">    <span class="comment">//判断拥有权限：user:create</span></div><div class="line">    Assert.assertTrue(SecurityUtils.getSubject().isPermitted(<span class="string">"user1:update"</span>));</div><div class="line">    Assert.assertTrue(SecurityUtils.getSubject().isPermitted(<span class="string">"user2:update"</span>));</div><div class="line">    <span class="comment">//通过二进制位的方式表示权限</span></div><div class="line">    Assert.assertTrue(SecurityUtils.getSubject().isPermitted(<span class="string">"+user1+2"</span>));<span class="comment">//新增权限</span></div><div class="line">    Assert.assertTrue(SecurityUtils.getSubject().isPermitted(<span class="string">"+user1+8"</span>));<span class="comment">//查看权限</span></div><div class="line">    Assert.assertTrue(SecurityUtils.getSubject().isPermitted(<span class="string">"+user2+10"</span>));<span class="comment">//新增及查看</span></div><div class="line"></div><div class="line">    Assert.assertFalse(SecurityUtils.getSubject().isPermitted(<span class="string">"+user1+4"</span>));<span class="comment">//没有删除权限</span></div><div class="line"></div><div class="line">    Assert.assertTrue(SecurityUtils.getSubject().isPermitted(<span class="string">"menu:view"</span>));<span class="comment">//通过MyRolePermissionResolver解析得到的权限</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String configFile, String username, String password)</span> </span>&#123;</div><div class="line">    <span class="comment">//1、获取SecurityManager工厂，此处使用Ini配置文件初始化SecurityManager</span></div><div class="line">    Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(configFile);</div><div class="line"></div><div class="line">    <span class="comment">//2、得到SecurityManager实例 并绑定给SecurityUtils</span></div><div class="line">    org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();</div><div class="line">    SecurityUtils.setSecurityManager(securityManager);</div><div class="line"></div><div class="line">    <span class="comment">//3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）</span></div><div class="line">    Subject subject = SecurityUtils.getSubject();</div><div class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</div><div class="line"></div><div class="line">    subject.login(token);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>参考：<br><a href="http://jinnianshilongnian.iteye.com/blog/2020017" target="_blank" rel="external">第三章 授权——《跟我学Shiro》</a><br><a href="http://shiro.apache.org/reference.html" target="_blank" rel="external">Apache Shiro Reference Documentation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;授权&lt;/strong&gt;，也叫访问控制，即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。&lt;br&gt;在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。&lt;/p&gt;
    
    </summary>
    
      <category term="shiro" scheme="https://damon4u.github.io/categories/shiro/"/>
    
    
      <category term="shiro" scheme="https://damon4u.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>shiro开发（二）认证</title>
    <link href="https://damon4u.github.io//blog/2018/11/shiro%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%A4%E8%AF%81.html"/>
    <id>https://damon4u.github.io//blog/2018/11/shiro开发（二）认证.html</id>
    <published>2018-11-20T10:41:50.000Z</published>
    <updated>2018-11-21T13:47:05.578Z</updated>
    
    <content type="html"><![CDATA[<p>认证，即在应用中谁能证明他就是他本人。一般提供如他们的身份ID一些标识信息来表明他就是他本人，如提供身份证，用户名/密码来证明。</p><p>在shiro中，用户需要提供 <strong>principals</strong>（身份）和 <strong>credentials</strong>（证明）给shiro，从而应用能验证用户身份：</p><ul><li>principals：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。一个主体可以有多个principals，但只有一个Primary principals，一般是用户名/手机号。</li><li>credentials：证明/凭证，即只有主体知道的安全值，如密码/数字证书等。</li></ul><p>最常见的principals和credentials组合就是用户名/密码了。接下来先进行一个基本的身份认证。</p><a id="more"></a><h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><p>首先引入shiro-core包依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>在resources类路径下创建文件shiro.ini:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line">zhang=123</div><div class="line">wang=123</div></pre></td></tr></table></figure></p><p>此处使用ini配置文件，通过[users]指定了两个主体：zhang/123、wang/123。</p><p>测试用例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 使用IniRealm读取shiro.ini进行认证</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIniRealm</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 1、获取SecurityManager工厂，此处使用Ini配置文件初始化SecurityManager</span></div><div class="line">    <span class="comment">// 底层会构造一个IniRealm，从ini文件中读取用户信息，用来做登录校验</span></div><div class="line">    IniSecurityManagerFactory securityManagerFactory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</div><div class="line">    <span class="comment">// 2、得到SecurityManager实例 并绑定给SecurityUtils  </span></div><div class="line">    SecurityManager securityManager = securityManagerFactory.getInstance();</div><div class="line">    SecurityUtils.setSecurityManager(securityManager);</div><div class="line">    <span class="comment">// 3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）  </span></div><div class="line">    Subject subject = SecurityUtils.getSubject();</div><div class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"zhang"</span>, <span class="string">"123"</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 4、登录，即身份验证  </span></div><div class="line">        subject.login(token);</div><div class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</div><div class="line">        <span class="comment">// 5、身份验证失败  </span></div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    Assert.assertTrue(subject.isAuthenticated()); <span class="comment">//断言用户已经登录  </span></div><div class="line">    <span class="comment">// 6、退出  </span></div><div class="line">    subject.logout();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li>首先通过<code>new IniSecurityManagerFactory</code>并指定一个ini配置文件来创建一个<code>SecurityManager</code>工厂；</li><li>接着获取<code>SecurityManager</code>并绑定到<code>SecurityUtils</code>，这是一个全局设置，设置一次即可；</li><li>通过<code>SecurityUtils</code>得到<code>Subject</code>，其会自动绑定到当前线程；如果在web环境在请求结束时需要解除绑定；然后获取身份验证的<code>Token</code>，如用户名/密码；</li><li>调用<code>subject.login</code>方法进行登录，其会自动委托给<code>SecurityManager.login</code>方法进行登录；</li><li>如果身份验证失败请捕获<code>AuthenticationException</code>或其子类，常见的如： <code>DisabledAccountException</code>（禁用的帐号）、<code>LockedAccountException</code>（锁定的帐号）、<code>UnknownAccountException</code>（错误的帐号）、<code>ExcessiveAttemptsException</code>（登录失败次数过多）、<code>IncorrectCredentialsException</code> （错误的凭证）、<code>ExpiredCredentialsException</code>（过期的凭证）等，具体请查看其继承关系；对于页面的错误消息展示，最好使用如“用户名/密码错误”而不是“用户名错误”/“密码错误”，防止一些恶意用户非法扫描帐号库；</li><li>最后可以调用<code>subject.logout</code>退出，其会自动委托给<code>SecurityManager.logout</code>方法退出。</li></ol><p>认证流程：</p><p><img src="http://dl2.iteye.com/upload/attachment/0094/0173/8d639160-cd3e-3b9c-8dd6-c7f9221827a5.png" alt=""></p><p>流程如下：</p><ol><li>首先调用<code>Subject.login(token)</code>进行登录，其会自动委托给<code>SecurityManager</code>，调用之前必须通过<code>SecurityUtils.setSecurityManager()</code>设置；</li><li><code>SecurityManager</code>负责真正的身份验证逻辑；它会委托给<code>Authenticator</code>进行身份验证；</li><li><code>Authenticator</code>才是真正的身份验证者，Shiro API中核心的身份认证入口点，此处可以自定义插入自己的实现；</li><li><code>Authenticator</code>可能会委托给相应的<code>AuthenticationStrategy</code>进行多<code>Realm</code>身份验证，默认<code>ModularRealmAuthenticator</code>会调用<code>AuthenticationStrategy</code>进行多<code>Realm</code>身份验证；</li><li><code>Authenticator</code>会把相应的token传入<code>Realm</code>，从<code>Realm</code>获取身份验证信息，如果没有返回/抛出异常表示身份验证失败了。此处可以配置多个<code>Realm</code>，将按照相应的顺序及策略进行访问。</li></ol><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><p><code>Realm</code>：域，Shiro从<code>Realm</code>获取安全数据（如用户、角色、权限）。<br>就是说<code>SecurityManager</code>要验证用户身份，那么它需要从<code>Realm</code>获取相应的用户进行比较以确定用户身份是否合法，也需要从<code>Realm</code>得到用户相应的角色/权限进行验证用户是否能进行操作。<br>可以把<code>Realm</code>看成DataSource，即安全数据源。如我们之前的ini配置方式将使用<code>org.apache.shiro.realm.text.IniRealm</code>。</p><p><code>org.apache.shiro.realm.Realm</code>接口如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 返回一个唯一的Realm名字</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 判断此Realm是否支持此Token</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken token)</span></span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 根据Token获取认证信息</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function">AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException</span>;</div></pre></td></tr></table></figure></p><p>来实现一个简单的Realm。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm1</span> <span class="keyword">implements</span> <span class="title">Realm</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"myRealm1"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(AuthenticationToken token)</span> </span>&#123;</div><div class="line">        <span class="comment">// 仅支持UsernamePasswordToken类型的Token</span></div><div class="line">        <span class="keyword">return</span> token <span class="keyword">instanceof</span> UsernamePasswordToken;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">getAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">        <span class="comment">// 得到用户名</span></div><div class="line">        String username = (String) token.getPrincipal();</div><div class="line">        <span class="comment">// 得到密码</span></div><div class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[]) token.getCredentials());</div><div class="line">        <span class="keyword">if</span> (!<span class="string">"zhang"</span>.equals(username)) &#123;</div><div class="line">            <span class="comment">// 如果用户名错误</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!<span class="string">"123"</span>.equals(password)) &#123;</div><div class="line">            <span class="comment">// 如果密码错误</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果身份认证验证成功，返回一个AuthenticationInfo实现</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username, password, getName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ini配置文件指定自定义Realm实现(shiro-realm.ini) :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#声明一个realm</div><div class="line">myRealm1=com.maybe.shiro.case0.realm.MyRealm1</div><div class="line">#指定securityManager的realms实现</div><div class="line">securityManager.realms=$myRealm1</div></pre></td></tr></table></figure></p><p>shiro可以配置多个Realm：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">myRealm1=com.maybe.shiro.case0.realm.MyRealm1</div><div class="line">myRealm2=com.maybe.shiro.case0.realm.MyRealm2</div><div class="line">securityManager.realms=$myRealm1,$myRealm2</div></pre></td></tr></table></figure></p><p>securityManager会按照realms指定的顺序进行身份认证。<br>此处我们使用显示指定顺序的方式指定了Realm的顺序，如果删除“securityManager.realms=$myRealm1,$myRealm2”，那么securityManager会按照realm声明的顺序进行使用（即无需设置realms属性，其会自动发现）。<br>当我们显示指定realm后，其他没有指定realm将被忽略，如“securityManager.realms=$myRealm1”，那么myRealm2不会被自动设置进去。</p><p>shiro默认提供的Realm：</p><p><img src="/images/shiro0.png" alt=""></p><p>以后一般继承<code>AuthorizingRealm</code>（授权）即可；其继承了<code>AuthenticatingRealm</code>（即身份验证），而且也间接继承了<code>CachingRealm</code>（带有缓存实现）。其中主要默认实现如下：</p><ul><li><code>org.apache.shiro.realm.text.IniRealm</code>：[users]部分指定用户名/密码及其角色；[roles]部分指定角色即权限信息；</li><li><code>org.apache.shiro.realm.text.PropertiesRealm</code>： user.username=password,role1,role2指定用户名/密码及其角色；role.role1=permission1,permission2指定角色及权限信息；</li><li><code>org.apache.shiro.realm.jdbc.JdbcRealm</code>：通过sql查询相应的信息，默认的查询语句为<code>“select password from users where username = ?”</code>获取用户密码，<code>“select password, password_salt from users where username = ?”</code>获取用户密码及盐；<code>“select role_name from user_roles where username = ?”</code>获取用户角色；<code>“select permission from roles_permissions where role_name = ?”</code>获取角色对应的权限信息；也可以调用相应的api进行自定义sql。</li></ul><p>试一下JdbcRealm。<br>首先创建三张默认表，users（用户名/密码）、user_roles（用户/角色）、roles_permissions（角色/权限），并插入一条用户数据，用户名/密码为zhang/123：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> shiro;</div><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> shiro;</div><div class="line"><span class="keyword">use</span> shiro;</div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">users</span> (</div><div class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span> auto_increment,</div><div class="line">  username <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">  <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">  password_salt <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">  <span class="keyword">constraint</span> pk_users primary <span class="keyword">key</span>(<span class="keyword">id</span>)</div><div class="line">) <span class="keyword">charset</span>=utf8 <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</div><div class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> idx_users_username <span class="keyword">on</span> <span class="keyword">users</span>(username);</div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_roles(</div><div class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span> auto_increment,</div><div class="line">  username <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">  role_name <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">  <span class="keyword">constraint</span> pk_user_roles primary <span class="keyword">key</span>(<span class="keyword">id</span>)</div><div class="line">) <span class="keyword">charset</span>=utf8 <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</div><div class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> idx_user_roles <span class="keyword">on</span> user_roles(username, role_name);</div><div class="line"></div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> roles_permissions(</div><div class="line">  <span class="keyword">id</span> <span class="built_in">bigint</span> auto_increment,</div><div class="line">  role_name <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">  permission <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">  <span class="keyword">constraint</span> pk_roles_permissions primary <span class="keyword">key</span>(<span class="keyword">id</span>)</div><div class="line">) <span class="keyword">charset</span>=utf8 <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</div><div class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> idx_roles_permissions <span class="keyword">on</span> roles_permissions(role_name, permission);</div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(username,<span class="keyword">password</span>)<span class="keyword">values</span>(<span class="string">'zhang'</span>,<span class="string">'123'</span>);</div></pre></td></tr></table></figure></p><p>添加数据库依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>shiro配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm</div><div class="line">dataSource=com.alibaba.druid.pool.DruidDataSource</div><div class="line">dataSource.driverClassName=com.mysql.jdbc.Driver</div><div class="line">dataSource.url=jdbc:mysql://localhost:3306/shiro</div><div class="line">dataSource.username=root</div><div class="line">dataSource.password=xxx</div><div class="line">jdbcRealm.dataSource=$dataSource</div><div class="line">securityManager.realms=$jdbcRealm</div></pre></td></tr></table></figure></p><h3 id="Authenticator及AuthenticationStrategy"><a href="#Authenticator及AuthenticationStrategy" class="headerlink" title="Authenticator及AuthenticationStrategy"></a>Authenticator及AuthenticationStrategy</h3><p><code>Authenticator</code>的职责是验证用户帐号，是Shiro API中身份验证核心的入口点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public AuthenticationInfo authenticate(AuthenticationToken authenticationToken) throws AuthenticationException;</div></pre></td></tr></table></figure></p><p>如果验证成功，将返回<code>AuthenticationInfo</code>验证信息；此信息中包含了身份及凭证；如果验证失败将抛出相应的<code>AuthenticationException</code>实现。</p><p><code>SecurityManager</code>接口继承了<code>Authenticator</code>，另外还有一个<code>ModularRealmAuthenticator</code>实现，其委托给多个Realm进行验证，验证规则通过<code>AuthenticationStrategy</code>接口指定，默认提供的实现：</p><ul><li><code>FirstSuccessfulStrategy</code>：只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略；</li><li><code>AtLeastOneSuccessfulStrategy</code>：只要有一个Realm验证成功即可，和<code>FirstSuccessfulStrategy</code>不同，返回所有Realm身份验证成功的认证信息；</li><li><code>AllSuccessfulStrategy</code>：所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了。</li></ul><p><code>ModularRealmAuthenticator</code> <strong>默认</strong> 使用<code>AtLeastOneSuccessfulStrategy</code>策略。</p><p>试一下<code>AllSuccessfulStrategy</code>：<br>假设我们有三个realm：</p><ul><li>myRealm1： 用户名/密码为zhang/123时成功，且返回身份/凭据为zhang/123；</li><li>myRealm2： 用户名/密码为wang/123时成功，且返回身份/凭据为wang/123；</li><li>myRealm3： 用户名/密码为zhang/123时成功，且返回身份/凭据为zhang@163.com/123，和myRealm1不同的是返回时的身份变了。</li></ul><p>ini配置文件(shiro-authenticator-all-success.ini) ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#指定securityManager的authenticator实现</div><div class="line">authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator</div><div class="line">securityManager.authenticator=$authenticator</div><div class="line"></div><div class="line">#指定securityManager.authenticator的authenticationStrategy</div><div class="line">allSuccessfulStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy</div><div class="line">securityManager.authenticator.authenticationStrategy=$allSuccessfulStrategy</div><div class="line">myRealm1=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm1</div><div class="line">myRealm2=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm2</div><div class="line">myRealm3=com.github.zhangkaitao.shiro.chapter2.realm.MyRealm3</div><div class="line">securityManager.realms=$myRealm1,$myRealm3</div></pre></td></tr></table></figure></p><p>再来一个不能全成功的配置文件(shiro-authenticator-all-fail.ini) ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#指定securityManager的authenticator实现</div><div class="line">authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator</div><div class="line">securityManager.authenticator=$authenticator</div><div class="line"></div><div class="line">#指定securityManager.authenticator的authenticationStrategy</div><div class="line">allSuccessfulStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy</div><div class="line">securityManager.authenticator.authenticationStrategy=$allSuccessfulStrategy</div><div class="line"></div><div class="line">myRealm1=com.maybe.shiro.case0.realm.MyRealm1</div><div class="line">myRealm2=com.maybe.shiro.case0.realm.MyRealm2</div><div class="line">myRealm3=com.maybe.shiro.case0.realm.MyRealm3</div><div class="line">securityManager.realms=$myRealm1,$myRealm2</div></pre></td></tr></table></figure></p><p>下面是测试用例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAllSuccessfulStrategyWithSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line">    login(<span class="string">"classpath:shiro-authenticator-all-success.ini"</span>);</div><div class="line">    Subject subject = SecurityUtils.getSubject();</div><div class="line"></div><div class="line">    <span class="comment">//得到一个身份集合，其包含了Realm验证成功的身份信息</span></div><div class="line">    PrincipalCollection principalCollection = subject.getPrincipals();</div><div class="line">    Assert.assertEquals(<span class="number">2</span>, principalCollection.asList().size());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span>(expected = UnknownAccountException.class)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAllSuccessfulStrategyWithFail</span><span class="params">()</span> </span>&#123;</div><div class="line">    login(<span class="string">"classpath:shiro-authenticator-all-fail.ini"</span>);</div><div class="line">    Subject subject = SecurityUtils.getSubject();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String configFile)</span> </span>&#123;</div><div class="line">    <span class="comment">//1、获取SecurityManager工厂，此处使用Ini配置文件初始化SecurityManager</span></div><div class="line">    Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(configFile);</div><div class="line"></div><div class="line">    <span class="comment">//2、得到SecurityManager实例 并绑定给SecurityUtils</span></div><div class="line">    org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();</div><div class="line">    SecurityUtils.setSecurityManager(securityManager);</div><div class="line"></div><div class="line">    <span class="comment">//3、得到Subject及创建用户名/密码身份验证Token（即用户身份/凭证）</span></div><div class="line">    Subject subject = SecurityUtils.getSubject();</div><div class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"zhang"</span>, <span class="string">"123"</span>);</div><div class="line"></div><div class="line">    subject.login(token);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>也可以自定义<code>AuthenticationStrategy</code>实现，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在所有Realm验证之前调用</span></div><div class="line"><span class="function">AuthenticationInfo <span class="title">beforeAllAttempts</span><span class="params">(Collection&lt;? extends Realm&gt; realms, AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException</span>;</div><div class="line"><span class="comment">//在每个Realm之前调用</span></div><div class="line"><span class="function">AuthenticationInfo <span class="title">beforeAttempt</span><span class="params">(Realm realm, AuthenticationToken token, AuthenticationInfo aggregate)</span> <span class="keyword">throws</span> AuthenticationException</span>;</div><div class="line"><span class="comment">//在每个Realm之后调用</span></div><div class="line"><span class="function">AuthenticationInfo <span class="title">afterAttempt</span><span class="params">(Realm realm, AuthenticationToken token, AuthenticationInfo singleRealmInfo, AuthenticationInfo aggregateInfo, Throwable t)</span> <span class="keyword">throws</span> AuthenticationException</span>;</div><div class="line"><span class="comment">//在所有Realm之后调用</span></div><div class="line"><span class="function">AuthenticationInfo <span class="title">afterAllAttempts</span><span class="params">(AuthenticationToken token, AuthenticationInfo aggregate)</span> <span class="keyword">throws</span> AuthenticationException</span>;</div></pre></td></tr></table></figure></p><p>因为每个<code>AuthenticationStrategy</code>实例都是无状态的，所有每次都通过接口将相应的认证信息传入下一次流程；通过如上接口可以进行如合并/返回第一个验证成功的认证信息。<br>自定义实现时一般继承<code>org.apache.shiro.authc.pam.AbstractAuthenticationStrategy</code>即可。<br>例如实现一个仅一个realm认证通过的<code>OnlyOneAuthenticatorStrategy</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlyOneAuthenticatorStrategy</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationStrategy</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">afterAttempt</span><span class="params">(Realm realm, AuthenticationToken token, AuthenticationInfo singleRealmInfo, AuthenticationInfo aggregateInfo, Throwable t)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">        AuthenticationInfo info;</div><div class="line">        <span class="keyword">if</span> (singleRealmInfo == <span class="keyword">null</span>) &#123;</div><div class="line">            info = aggregateInfo;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (aggregateInfo == <span class="keyword">null</span>) &#123;</div><div class="line">                info = singleRealmInfo;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                info = merge(singleRealmInfo, aggregateInfo);</div><div class="line">                <span class="keyword">if</span>(info.getPrincipals().getRealmNames().size() &gt; <span class="number">1</span>) &#123;</div><div class="line">                    System.out.println(info.getPrincipals().getRealmNames());</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"Authentication token of type ["</span> + token.getClass() + <span class="string">"] "</span> +</div><div class="line">                            <span class="string">"could not be authenticated by any configured realms.  Please ensure that only one realm can "</span> +</div><div class="line">                            <span class="string">"authenticate these tokens."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> info;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>参考：<br><a href="http://jinnianshilongnian.iteye.com/blog/2019547" target="_blank" rel="external">第二章 身份验证——《跟我学Shiro》</a><br><a href="http://shiro.apache.org/reference.html" target="_blank" rel="external">Apache Shiro Reference Documentation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;认证，即在应用中谁能证明他就是他本人。一般提供如他们的身份ID一些标识信息来表明他就是他本人，如提供身份证，用户名/密码来证明。&lt;/p&gt;
&lt;p&gt;在shiro中，用户需要提供 &lt;strong&gt;principals&lt;/strong&gt;（身份）和 &lt;strong&gt;credentials&lt;/strong&gt;（证明）给shiro，从而应用能验证用户身份：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;principals：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。一个主体可以有多个principals，但只有一个Primary principals，一般是用户名/手机号。&lt;/li&gt;
&lt;li&gt;credentials：证明/凭证，即只有主体知道的安全值，如密码/数字证书等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最常见的principals和credentials组合就是用户名/密码了。接下来先进行一个基本的身份认证。&lt;/p&gt;
    
    </summary>
    
      <category term="shiro" scheme="https://damon4u.github.io/categories/shiro/"/>
    
    
      <category term="shiro" scheme="https://damon4u.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>shiro开发（一）shiro简介</title>
    <link href="https://damon4u.github.io//blog/2018/11/shiro%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89shiro%E7%AE%80%E4%BB%8B.html"/>
    <id>https://damon4u.github.io//blog/2018/11/shiro开发（一）shiro简介.html</id>
    <published>2018-11-20T09:41:50.000Z</published>
    <updated>2018-11-20T13:17:22.425Z</updated>
    
    <content type="html"><![CDATA[<p>Apache Shiro是Java的一个安全框架。<br>Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等。<br>基本功能如下：</p><p><img src="http://dl2.iteye.com/upload/attachment/0093/9788/d59f6d02-1f45-3285-8983-4ea5f18111d5.png" alt=""></p><a id="more"></a><ul><li>Authentication：身份认证/登录，验证用户是不是拥有相应的身份；</li><li>Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li>Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；</li><li>Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li>Web Support：Web支持，可以非常容易的集成到Web环境；</li><li>Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；</li><li>Concurrency：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li>Testing：提供测试支持；</li><li>Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li>Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li></ul><p><strong>记住一点，Shiro不会去维护用户、维护权限；这些需要我们自己去设计/提供；然后通过相应的接口注入给Shiro即可。</strong></p><p>工作流：</p><p><img src="http://dl2.iteye.com/upload/attachment/0093/9790/5e0e9b41-0cca-367f-8c87-a8398910e7a6.png" alt=""></p><ul><li><code>Subject</code>：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；</li><li><code>SecurityManager</code>：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；</li><li><code>Realm</code>：域，Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</li></ul><p>也就是说对于我们而言，最简单的一个Shiro应用：</p><ol><li>应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager；</li><li>我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。</li></ol><p>内部实现：</p><p><img src="http://dl2.iteye.com/upload/attachment/0093/9792/9b959a65-799d-396e-b5f5-b4fcfe88f53c.png" alt=""></p><ul><li>Subject：主体，可以看到主体可以是任何可以与应用交互的“用户”；</li><li>SecurityManager：相当于SpringMVC中的DispatcherServlet或者Struts2中的FilterDispatcher；是Shiro的心脏；所有具体的交互都通过SecurityManager进行控制；它管理着所有Subject、且负责进行认证和授权、及会话、缓存的管理；</li><li>Authenticator：认证器，负责主体认证的，这是一个扩展点，如果用户觉得Shiro默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li><li>Authrizer：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li>Realm：可以有1个或多个Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是JDBC实现，也可以是LDAP实现，或者内存实现等等；由用户提供；注意：Shiro不知道你的用户/权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的Realm；</li><li>SessionManager：如果写过Servlet就应该知道Session的概念，Session呢需要有人去管理它的生命周期，这个组件就是SessionManager；而Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境；所有呢，Shiro就抽象了一个自己的Session来管理主体与应用之间交互的数据；这样的话，比如我们在Web环境用，刚开始是一台Web服务器；接着又上了台EJB服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到Memcached服务器）；</li><li>SessionDAO：DAO大家都用过，数据访问对象，用于会话的CRUD，比如我们想把Session保存到数据库，那么可以实现自己的SessionDAO，通过如JDBC写到数据库；比如想把Session放到Memcached中，可以实现自己的Memcached SessionDAO；另外SessionDAO中可以使用Cache进行缓存，以提高性能；</li><li>CacheManager：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能；</li><li>Cryptography：密码模块，Shiro提高了一些常见的加密组件用于如密码加密/解密的。</li></ul><p>参考：<br><a href="http://jinnianshilongnian.iteye.com/blog/2018936" target="_blank" rel="external">第一章 Shiro简介——《跟我学Shiro》</a><br><a href="http://shiro.apache.org/reference.html" target="_blank" rel="external">Apache Shiro Reference Documentation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Apache Shiro是Java的一个安全框架。&lt;br&gt;Shiro可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等。&lt;br&gt;基本功能如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://dl2.iteye.com/upload/attachment/0093/9788/d59f6d02-1f45-3285-8983-4ea5f18111d5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="shiro" scheme="https://damon4u.github.io/categories/shiro/"/>
    
    
      <category term="shiro" scheme="https://damon4u.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>logstash-logback-encoder使用</title>
    <link href="https://damon4u.github.io//blog/2018/11/logstash-logback-encoder%E4%BD%BF%E7%94%A8.html"/>
    <id>https://damon4u.github.io//blog/2018/11/logstash-logback-encoder使用.html</id>
    <published>2018-11-19T09:41:50.000Z</published>
    <updated>2018-11-19T10:33:46.354Z</updated>
    
    <content type="html"><![CDATA[<p>业务场景：<br>日志系统整体迁入<a href="https://www.elastic.co/cn/elk-stack" target="_blank" rel="external">ELK</a>，大体需要两种日志：</p><ul><li>纯业务日志，记录业务代码中的信息；</li><li>访问日志，包括请求参数和返回结果。</li></ul><p>关于ELK这里不做过多讲解，一般也是公司运维同事维护，这里只介绍如何将日志打印成可被收集输送到es的json格式。</p><a id="more"></a><p>选用的工具是目前应用广泛的<a href="https://github.com/logstash/logstash-logback-encoder" target="_blank" rel="external">Logback JSON encoder</a></p><h3 id="业务日志"><a href="#业务日志" class="headerlink" title="业务日志"></a>业务日志</h3><p>首先是logback.xml配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"JSON_LOG"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;catalina.base&#125;/logs/stdout-json.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jsonFactoryDecorator</span> <span class="attr">class</span>=<span class="string">"com.package.NoEscapingJsonFactoryDecorator"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- 显示行号，类，方法信息 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">includeCallerData</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeCallerData</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;catalina.base&#125;/logs/stdout-json.log.%d&#123;yyyy-MM-dd&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"JSON_ASYNC"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.AsyncAppender"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"JSON_LOG"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">discardingThreshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">discardingThreshold</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">includeCallerData</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeCallerData</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"JSON_ASYNC"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure></p><p>其中用到了一个<code>NoEscapingJsonFactoryDecorator</code>，用来取消对非ASCII字符的转码，防止换行符导致输出混乱。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoEscapingJsonFactoryDecorator</span> <span class="keyword">implements</span> <span class="title">JsonFactoryDecorator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoEscapingJsonFactoryDecorator</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MappingJsonFactory <span class="title">decorate</span><span class="params">(MappingJsonFactory factory)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (MappingJsonFactory)factory.disable(Feature.ESCAPE_NON_ASCII);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里还用到了异步打印的配置，比较常见。<br>业务代码中打印日志时就正常打印即可，没有什么特别。</p><p>这样打印出来的日志就是json格式，默认包含如下字段(手动格式化了)：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"@timestamp"</span>: <span class="string">"2018-11-19T18:13:05.167+08:00"</span>,</div><div class="line">    <span class="attr">"@version"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"your log message"</span>,</div><div class="line">    <span class="attr">"logger_name"</span>: <span class="string">"com.package.TestController"</span>,</div><div class="line">    <span class="attr">"thread_name"</span>: <span class="string">"http-bio-8181-exec-2"</span>,</div><div class="line">    <span class="attr">"level"</span>: <span class="string">"INFO"</span>,</div><div class="line">    <span class="attr">"level_value"</span>: <span class="number">20000</span>,</div><div class="line">    <span class="attr">"HOSTNAME"</span>: <span class="string">"xxx"</span>,</div><div class="line">    <span class="attr">"caller_class_name"</span>: <span class="string">"com.package.TestController"</span>,</div><div class="line">    <span class="attr">"caller_method_name"</span>: <span class="string">"testMethod"</span>,</div><div class="line">    <span class="attr">"caller_file_name"</span>: <span class="string">"TestController.java"</span>,</div><div class="line">    <span class="attr">"caller_line_number"</span>: <span class="number">239</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="访问日志"><a href="#访问日志" class="headerlink" title="访问日志"></a>访问日志</h3><p>其实Logback JSON encoder自身是支持访问信息打印的：<a href="https://github.com/logstash/logstash-logback-encoder#accessevent-fields" target="_blank" rel="external">AccessEvent Fields</a><br>但是我这里还想打印返回信息，所以没有用这个，还是用<a href="https://github.com/logstash/logstash-logback-encoder#loggingevent-fields" target="_blank" rel="external">LoggingEvent Fields</a>，增加自定义字段。<br>logback.xml配置基本一样：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"REQUEST_LOG"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;catalina.base&#125;/logs/request-json.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jsonFactoryDecorator</span> <span class="attr">class</span>=<span class="string">"com.package.NoEscapingJsonFactoryDecorator"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;catalina.base&#125;/logs/request-json.log.%d&#123;yyyy-MM-dd&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"REQUEST_ASYNC"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.AsyncAppender"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"REQUEST_LOG"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">discardingThreshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">discardingThreshold</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">includeCallerData</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeCallerData</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"requestLog"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"REQUEST_LOG"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div></pre></td></tr></table></figure></p><p>重点是在打印日志时，需要设置自定义属性，使用的是<a href="https://github.com/logstash/logstash-logback-encoder#event-specific-custom-fields" target="_blank" rel="external">Markers</a>来实现。<br>文章中介绍了两种技术：</p><ul><li>Markers：只在外层json输出打印，不在message字段中追加；</li><li>StructuredArguments：在外层json输出中打印，同时在message字段中追加。</li></ul><p>对于访问日志，只需要在外层json输出打印即可。</p><p>文档中提供的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.logstash.logback.marker.Markers.*</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Add "name":"value" to the JSON output.</span></div><div class="line"><span class="comment"> */</span></div><div class="line">logger.info(append(<span class="string">"name"</span>, <span class="string">"value"</span>), <span class="string">"log message"</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Add "name1":"value1","name2":"value2" to the JSON output by using multiple markers.</span></div><div class="line"><span class="comment"> */</span></div><div class="line">logger.info(append(<span class="string">"name1"</span>, <span class="string">"value1"</span>).and(append(<span class="string">"name2"</span>, <span class="string">"value2"</span>)), <span class="string">"log message"</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Add "name1":"value1","name2":"value2" to the JSON output by using a map.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * Note the values can be any object that can be serialized by Jackson's ObjectMapper</span></div><div class="line"><span class="comment"> * (e.g. other Maps, JsonNodes, numbers, arrays, etc)</span></div><div class="line"><span class="comment"> */</span></div><div class="line">Map myMap = <span class="keyword">new</span> HashMap();</div><div class="line">myMap.put(<span class="string">"name1"</span>, <span class="string">"value1"</span>);</div><div class="line">myMap.put(<span class="string">"name2"</span>, <span class="string">"value2"</span>);</div><div class="line">logger.info(appendEntries(myMap), <span class="string">"log message"</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Add "array":[1,2,3] to the JSON output</span></div><div class="line"><span class="comment"> */</span></div><div class="line">logger.info(appendArray(<span class="string">"array"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="string">"log message"</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Add "array":[1,2,3] to the JSON output by using raw json.</span></div><div class="line"><span class="comment"> * This allows you to use your own json seralization routine to construct the json output</span></div><div class="line"><span class="comment"> */</span></div><div class="line">logger.info(appendRaw(<span class="string">"array"</span>, <span class="string">"[1,2,3]"</span>), <span class="string">"log message"</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Add any object that can be serialized by Jackson's ObjectMapper</span></div><div class="line"><span class="comment"> * (e.g. Maps, JsonNodes, numbers, arrays, etc)</span></div><div class="line"><span class="comment"> */</span></div><div class="line">logger.info(append(<span class="string">"object"</span>, myobject), <span class="string">"log message"</span>);</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> * Add fields of any object that can be unwrapped by Jackson's UnwrappableBeanSerializer.</span></div><div class="line"><span class="comment"> * i.e. The fields of an object can be written directly into the json output.</span></div><div class="line"><span class="comment"> * This is similar to the @JsonUnwrapped annotation.</span></div><div class="line"><span class="comment"> */</span></div><div class="line">logger.info(appendFields(myobject), <span class="string">"log message"</span>);</div></pre></td></tr></table></figure></p><p>我们在实际应用中的方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(<span class="string">"requestLog"</span>);</div><div class="line">LOGGER.info(append(<span class="string">"requestMethod"</span>, request.getMethod())</div><div class="line">.and(append(<span class="string">"requestURI"</span>, request.getRequestURI()))</div><div class="line">.and(append(<span class="string">"queryString"</span>, request.getQueryString())</div><div class="line">.and(append(<span class="string">"responseStatus"</span>, response.getStatus()))</div><div class="line">.and(append(<span class="string">"responseStatusReason"</span>, HttpStatus.valueOf(status).getReasonPhrase()))</div><div class="line">.and(append(<span class="string">"responseContent"</span>, logContent))</div><div class="line">.and(append(<span class="string">"costTime(ms)"</span>, System.currentTimeMillis() - startTime))</div><div class="line">, <span class="string">"log message"</span>);</div></pre></td></tr></table></figure></p><p>这样打印的结果(手动格式化了)如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"@timestamp"</span>: <span class="string">"2018-11-19T18:23:05.252+08:00"</span>,</div><div class="line">    <span class="attr">"@version"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"log message"</span>,</div><div class="line">    <span class="attr">"logger_name"</span>: <span class="string">"requestLog"</span>,</div><div class="line">    <span class="attr">"thread_name"</span>: <span class="string">"http-bio-8181-exec-4"</span>,</div><div class="line">    <span class="attr">"level"</span>: <span class="string">"INFO"</span>,</div><div class="line">    <span class="attr">"level_value"</span>: <span class="number">20000</span>,</div><div class="line">    <span class="attr">"HOSTNAME"</span>: <span class="string">"xxx"</span>,</div><div class="line">    <span class="attr">"requestMethod"</span>: <span class="string">"GET"</span>,</div><div class="line">    <span class="attr">"requestURI"</span>: <span class="string">"/api/test"</span>,</div><div class="line">    <span class="attr">"queryString"</span>: <span class="string">"version=-1&amp;groupId=_user_a_"</span>,</div><div class="line">    <span class="attr">"responseStatus"</span>: <span class="number">200</span>,</div><div class="line">    <span class="attr">"responseStatusReason"</span>: <span class="string">"OK"</span>,</div><div class="line">    <span class="attr">"responseContent"</span>: <span class="string">"\"-1;-954377400228194665,1721842794179500781,-7660610975189358760;1542623015250\""</span>,</div><div class="line">    <span class="attr">"costTime(ms)"</span>: <span class="number">4</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>完整的打印日志Filter如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(<span class="string">"requestLog"</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 可以打印的返回类型集合</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;MediaType&gt; VISIBLE_TYPES = Arrays.asList(</div><div class="line">            MediaType.valueOf(<span class="string">"text/*"</span>),</div><div class="line">            MediaType.APPLICATION_FORM_URLENCODED,</div><div class="line">            MediaType.APPLICATION_JSON,</div><div class="line">            MediaType.APPLICATION_XML,</div><div class="line">            MediaType.valueOf(<span class="string">"application/*+json"</span>),</div><div class="line">            MediaType.valueOf(<span class="string">"application/*+xml"</span>),</div><div class="line">            MediaType.MULTIPART_FORM_DATA</div><div class="line">    );</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isAsyncDispatch(request)) &#123;</div><div class="line">            filterChain.doFilter(request, response);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            doFilterWrapped(wrapRequest(request), wrapResponse(response), filterChain);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doFilterWrapped</span><span class="params">(ContentCachingRequestWrapper request, ContentCachingResponseWrapper response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        String queryString = request.getQueryString();</div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            filterChain.doFilter(request, response);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            doLog(request, queryString, startTime, response);</div><div class="line">            response.copyBodyToResponse();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLog</span><span class="params">(ContentCachingRequestWrapper request, String queryString, <span class="keyword">long</span> startTime, ContentCachingResponseWrapper response)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> status = response.getStatus();</div><div class="line">        <span class="keyword">byte</span>[] content = response.getContentAsByteArray();</div><div class="line">        String logContent = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (content.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            logContent = getLogContent(content, response.getContentType(), response.getCharacterEncoding());</div><div class="line">        &#125;</div><div class="line">        LOGGER.info(append(<span class="string">"requestMethod"</span>, request.getMethod())</div><div class="line">                        .and(append(<span class="string">"requestURI"</span>, request.getRequestURI()))</div><div class="line">                        .and(append(<span class="string">"queryString"</span>, queryString == <span class="keyword">null</span> ? <span class="string">""</span> : queryString))</div><div class="line">                        .and(append(<span class="string">"responseStatus"</span>, status))</div><div class="line">                        .and(append(<span class="string">"responseStatusReason"</span>, HttpStatus.valueOf(status).getReasonPhrase()))</div><div class="line">                        .and(append(<span class="string">"responseContent"</span>, logContent))</div><div class="line">                        .and(append(<span class="string">"costTime(ms)"</span>, System.currentTimeMillis() - startTime))</div><div class="line">                , <span class="string">"log message"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getLogContent</span><span class="params">(<span class="keyword">byte</span>[] content, String contentType, String contentEncoding)</span> </span>&#123;</div><div class="line">        MediaType mediaType = MediaType.valueOf(contentType);</div><div class="line">        <span class="keyword">boolean</span> visible = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (MediaType me : VISIBLE_TYPES) &#123;</div><div class="line">            <span class="keyword">if</span> (me.includes(mediaType)) &#123;</div><div class="line">                visible = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (visible) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String(content, contentEncoding);</div><div class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">                LOGGER.error(e.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ContentCachingRequestWrapper <span class="title">wrapRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ContentCachingRequestWrapper) &#123;</div><div class="line">            <span class="keyword">return</span> (ContentCachingRequestWrapper) request;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ContentCachingRequestWrapper(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ContentCachingResponseWrapper <span class="title">wrapResponse</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (response <span class="keyword">instanceof</span> ContentCachingResponseWrapper) &#123;</div><div class="line">            <span class="keyword">return</span> (ContentCachingResponseWrapper) response;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ContentCachingResponseWrapper(response);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;业务场景：&lt;br&gt;日志系统整体迁入&lt;a href=&quot;https://www.elastic.co/cn/elk-stack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ELK&lt;/a&gt;，大体需要两种日志：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纯业务日志，记录业务代码中的信息；&lt;/li&gt;
&lt;li&gt;访问日志，包括请求参数和返回结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于ELK这里不做过多讲解，一般也是公司运维同事维护，这里只介绍如何将日志打印成可被收集输送到es的json格式。&lt;/p&gt;
    
    </summary>
    
      <category term="logback" scheme="https://damon4u.github.io/categories/logback/"/>
    
    
      <category term="logback" scheme="https://damon4u.github.io/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>logback基本配置</title>
    <link href="https://damon4u.github.io//blog/2018/11/logback%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.html"/>
    <id>https://damon4u.github.io//blog/2018/11/logback基本配置.html</id>
    <published>2018-11-19T08:41:50.000Z</published>
    <updated>2018-11-20T03:02:50.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从common-logging到slf4j"><a href="#从common-logging到slf4j" class="headerlink" title="从common-logging到slf4j"></a>从common-logging到slf4j</h3><h4 id="common-logging"><a href="#common-logging" class="headerlink" title="common-logging"></a>common-logging</h4><p><strong>common-logging</strong> 是apache提供的一个通用的日志接口。用户可以自由选择第三方的日志组件作为具体实现，像<code>log4j</code>，或者jdk自带的<code>logging</code>。<br><code>common-logging</code>会通过动态查找的机制，在程序运行时自动找出真正使用的日志库。当然，<code>common-logging</code>内部有一个<code>Simple logger</code>的简单实现，但是功能很弱。<br>所以使用<code>common-logging</code>，通常都是配合着<code>log4j</code>来使用。使用它的好处就是，代码依赖是<code>common-logging</code>而非<code>log4j</code>， 避免了和具体的日志方案直接耦合，在有必要时，可以更改日志实现的第三方库。</p><a id="more"></a><p>使用<code>common-logging</code>的常见代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(<span class="keyword">this</span>.getClass());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>动态查找原理</strong>：<code>Log</code>是一个接口声明。<code>LogFactory</code>的内部会去装载具体的日志系统，并获得实现该<code>Log</code>接口的实现类。<code>LogFactory</code>内部装载日志系统的流程如下：</p><blockquote><ol><li>首先，寻找<code>org.apache.commons.logging.LogFactory</code>属性配置。</li><li>否则，利用JDK1.3开始提供的service发现机制，会扫描classpah下的<code>META-INF/services/org.apache.commons.logging.LogFactory</code>文件，若找到则装载里面的配置，使用里面的配置。</li><li>否则，从classpath里寻找<code>commons-logging.properties</code>，找到则根据里面的配置加载。</li><li>否则，使用默认的配置：如果能找到<code>Log4j</code>则默认使用log4j实现，如果没有则使用<code>JDK14Logger</code>实现，再没有则使用commons-logging内部提供的<code>SimpleLog</code>实现。</li></ol></blockquote><p>从上述加载流程来看，只要引入了<code>log4j</code>并在classpath配置了<code>log4j.xml</code>，则commons-logging就会使log4j使用正常，而代码里不需要依赖任何log4j的代码。</p><h4 id="slf4j"><a href="#slf4j" class="headerlink" title="slf4j"></a>slf4j</h4><p><strong>slf4j</strong> 全称为Simple Logging Facade for JAVA，java简单日志门面。类似于Apache Common-Logging，是对不同日志框架提供的一个门面封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案。但是，他在 <strong>编译时</strong> 静态绑定真正的Log库。使用SLF4J时，如果你需要使用某一种日志实现，那么你必须选择正确的SLF4J的jar包的集合（各种桥接包）。<br>使用slf4j的常见代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(<span class="keyword">this</span>.getClass());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>静态绑定原理</strong>：SLF4J 会在编译时绑定<code>import org.slf4j.impl.StaticLoggerBinder</code>， 该类里面实现对具体日志方案的绑定接入。任何一种基于slf4j的实现都要有一个这个类。<br>如：org.slf4j.slf4j-log4j12-1.5.6: 提供对log4j的一种适配实现。<strong>注意：如果有任意两个实现slf4j的包同时出现，那么就可能出现问题。</strong></p><h4 id="slf4j-与-common-logging-比较"><a href="#slf4j-与-common-logging-比较" class="headerlink" title="slf4j 与 common-logging 比较"></a>slf4j 与 common-logging 比较</h4><p>common-logging通过动态查找的机制，在程序运行时自动找出真正使用的日志库。由于它使用了ClassLoader寻找和载入底层的日志库，导致了象OSGI这样的框架无法正常工作，因为OSGI的不同的插件使用自己的ClassLoader。OSGI的这种机制保证了插件互相独立，然而却使Apache Common-Logging无法工作。</p><p>slf4j在编译时静态绑定真正的Log库,因此可以在OSGI中使用。另外，SLF4J 支持参数化的log字符串，避免了之前为了减少字符串拼接的性能损耗而不得不写的<code>if(logger.isDebugEnable())</code>，现在你可以直接写：<code>logger.debug(“current user is: {}”, user)</code>。拼装消息被推迟到了它能够确定是不是要显示这条消息的时候，但是获取参数的代价并没有幸免。</p><h3 id="slf4j-logback使用"><a href="#slf4j-logback使用" class="headerlink" title="slf4j + logback使用"></a>slf4j + logback使用</h3><h4 id="pom-xml中引入依赖"><a href="#pom-xml中引入依赖" class="headerlink" title="pom.xml中引入依赖"></a>pom.xml中引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p>之后，需要在resources中加入<code>logback.xml</code>配置文件。<br>logback先找<code>logback-test.xml</code>，没有则找<code>logback.xml</code>文件，都找不到就使用<code>BasicConfigurator</code>基本配置，<code>BasicConfigurator</code>就是相当于等会贴出的<code>logback.xml</code>文件内容的配置。</p><p>tips：以前的<code>log4j.properties</code>文件可以用<code>PropertiesTranslator</code>转换成<code>logback.xml</code>文件内容。</p><h4 id="logback-xml配置说明"><a href="#logback-xml配置说明" class="headerlink" title="logback.xml配置说明"></a>logback.xml配置说明</h4><p>先给一个简单的示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置文件修改后自动重新加载 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"dbLog"</span></span></div><div class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;catalina.base&#125;/logs/db-%d&#123;yyyy-MM-dd&#125;.log</div><div class="line">            <span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss&#125; %5p %c:%L] %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--默认日志级别 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dbLog"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Connection"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dbLog"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dbLog"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.PreparedStatement"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dbLog"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dbLog"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>下面根据这个博客来讲解一下具体配置项：<br><a href="https://blog.csdn.net/haidage/article/details/6794509" target="_blank" rel="external">logback 配置详解</a></p><h5 id="根节点包含的属性"><a href="#根节点包含的属性" class="headerlink" title="根节点包含的属性"></a>根节点<configuration>包含的属性</configuration></h5><blockquote><ul><li>scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li><li>scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li><li>debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li></ul></blockquote><h5 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h5><p>(1)设置上下文名称：<code>&lt;contextName&gt;</code><br>每个logger都关联到logger上下文，默认上下文名称为default。但可以使用<contextname>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。<br>(2)设置变量： <code>&lt;property&gt;</code><br>用来定义变量值的标签，<property> 有两个属性name和value:<br>通过<code>&lt;property&gt;</code>定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。<br>例如使用<property>定义上下文名称，然后在<contentname>设置logger上下文时使用。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"APP_Name"</span> <span class="attr">value</span>=<span class="string">"myAppName"</span> /&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;APP_Name&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span>  </div><div class="line">      <span class="comment">&lt;!-- 其他配置省略--&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></contentname></property></property></contextname></p><p>(3)获取时间戳字符串：<code>&lt;timestamp&gt;</code><br>两个属性:</p><ul><li>key: 标识此<timestamp> 的名字；</timestamp></li><li>datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。</li></ul><p>例如将解析配置文件的时间作为上下文名称：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span>  </div><div class="line">      <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">"bySecond"</span> <span class="attr">datePattern</span>=<span class="string">"yyyyMMdd'T'HHmmss"</span>/&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;bySecond&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span>  </div><div class="line">      <span class="comment">&lt;!-- 其他配置省略--&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>下面介绍与日志重点相关的三个子标签：<br>(1)<code>&lt;logger&gt;</code><br>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<code>&lt;appender&gt;</code>。<br><code>&lt;logger&gt;</code>仅有一个name属性，一个可选的level和一个可选的addtivity属性。</p><blockquote><ul><li>name: 用来指定受此loger约束的某一个包或者具体的某一个类。</li><li>level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO,WARN,ERROR,ALL和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。<br>如果未设置此属性，那么当前logger将会继承上级的级别。</li><li>addtivity: 是否向上级logger传递打印信息。默认是true。</li></ul></blockquote><p>这里所谓的向上级logger打印：<code>&lt;root&gt;</code>是根级别，自己建立的其他<code>&lt;logger&gt;</code>是子级别。如果<code>&lt;logger&gt;</code>采用了默认的addtivity，那么它的日志也会打到<code>&lt;root&gt;</code>中。<br>(2)<code>&lt;root&gt;</code><br>也是logger元素，但是它是根logger。只有一个level属性，因为已经被命名为”root”.</p><blockquote><p>level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。 默认是DEBUG。</p></blockquote><p><code>&lt;logger&gt;</code>和<code>&lt;root&gt;</code>可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素，标识这个appender将会添加到这个logger。</p><p>(3)<code>&lt;appender&gt;</code><br><code>&lt;appender&gt;</code>是<code>&lt;configuration&gt;</code>的子节点，是负责写日志的组件。<br><code>&lt;appender&gt;</code>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。<br>(3.1)ConsoleAppender:<br>把日志添加到控制台，有以下子节点：</p><blockquote><p><code>&lt;encoder&gt;</code>：对日志进行格式化。（具体参数稍后讲解 ）<br><code>&lt;target&gt;</code>：字符串 System.out 或者 System.err ，默认 System.out</p></blockquote><p>(3.2)FileAppender<br>把日志添加到文件，有以下子节点：</p><blockquote><p><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。<br><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。<br><code>&lt;encoder&gt;</code>：对记录事件进行格式化。（具体参数稍后讲解 ）<br><code>&lt;prudent&gt;</code>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。</p></blockquote><p>(3.3)RollingFileAppender<br>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：</p><blockquote><p><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。<br><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。<br><code>&lt;encoder&gt;</code>：对记录事件进行格式化。（具体参数稍后讲解 ）<br><code>&lt;rollingPolicy&gt;</code>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。<br><code>&lt;triggeringPolicy &gt;</code>: 告知 RollingFileAppender 合适激活滚动。<br><code>&lt;prudent&gt;</code>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。</p></blockquote><p><strong>rollingPolicy:</strong><br>a.TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：<br><code>&lt;fileNamePattern&gt;</code>:<br>必要节点，包含文件名及“%d”转换符， “%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender 的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。</p><p><code>&lt;maxHistory&gt;</code>:<br>可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，且<maxhistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除。</maxhistory></p><p>b.FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略。有以下子节点：<br><code>&lt;minIndex&gt;</code>:窗口索引最小值<br><code>&lt;maxIndex&gt;</code>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。<br><code>&lt;fileNamePattern &gt;</code>:<br>必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip</p><p><strong>triggeringPolicy:</strong></p><p>SizeBasedTriggeringPolicy： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点:<br><code>&lt;maxFileSize&gt;</code>:这是活动文件的大小，默认值是10MB。</p><p>例如：每天生成一个日志文件，保存30天的日志文件。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>   </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logFile.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span>    </div><div class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span>   </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>    </div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>例如：按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>test.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span>   </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>tests.%i.log.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">minIndex</span>&gt;</span>1<span class="tag">&lt;/<span class="name">minIndex</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">maxIndex</span>&gt;</span>3<span class="tag">&lt;/<span class="name">maxIndex</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span>   </div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>5MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span>   </div><div class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span>   </div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span>   </div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span>   </div><div class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span>   </div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p><p>另外还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这些就不在这里讲解了，大家可以参考官方文档。当然大家可以编写自己的Appender。</p><p><strong>encoder</strong>：<br>负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。<br>目前PatternLayoutEncoder是唯一有用的且默认的encoder ，有一个<code>&lt;pattern&gt;</code>节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\”对“\%”进行转义。</p><h4 id="桥接commons-logging"><a href="#桥接commons-logging" class="headerlink" title="桥接commons-logging"></a>桥接commons-logging</h4><p>另外，如果需要桥接老的commons-logging，需要进入桥接器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;从common-logging到slf4j&quot;&gt;&lt;a href=&quot;#从common-logging到slf4j&quot; class=&quot;headerlink&quot; title=&quot;从common-logging到slf4j&quot;&gt;&lt;/a&gt;从common-logging到slf4j&lt;/h3&gt;&lt;h4 id=&quot;common-logging&quot;&gt;&lt;a href=&quot;#common-logging&quot; class=&quot;headerlink&quot; title=&quot;common-logging&quot;&gt;&lt;/a&gt;common-logging&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;common-logging&lt;/strong&gt; 是apache提供的一个通用的日志接口。用户可以自由选择第三方的日志组件作为具体实现，像&lt;code&gt;log4j&lt;/code&gt;，或者jdk自带的&lt;code&gt;logging&lt;/code&gt;。&lt;br&gt;&lt;code&gt;common-logging&lt;/code&gt;会通过动态查找的机制，在程序运行时自动找出真正使用的日志库。当然，&lt;code&gt;common-logging&lt;/code&gt;内部有一个&lt;code&gt;Simple logger&lt;/code&gt;的简单实现，但是功能很弱。&lt;br&gt;所以使用&lt;code&gt;common-logging&lt;/code&gt;，通常都是配合着&lt;code&gt;log4j&lt;/code&gt;来使用。使用它的好处就是，代码依赖是&lt;code&gt;common-logging&lt;/code&gt;而非&lt;code&gt;log4j&lt;/code&gt;， 避免了和具体的日志方案直接耦合，在有必要时，可以更改日志实现的第三方库。&lt;/p&gt;
    
    </summary>
    
      <category term="logback" scheme="https://damon4u.github.io/categories/logback/"/>
    
    
      <category term="logback" scheme="https://damon4u.github.io/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>maven指定java版本</title>
    <link href="https://damon4u.github.io//blog/2018/11/maven%E6%8C%87%E5%AE%9Ajava%E7%89%88%E6%9C%AC.html"/>
    <id>https://damon4u.github.io//blog/2018/11/maven指定java版本.html</id>
    <published>2018-11-09T09:41:50.000Z</published>
    <updated>2018-11-19T10:29:24.877Z</updated>
    
    <content type="html"><![CDATA[<p>如果使用Spring Boot搭建项目，可以指定property：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure></p><p>注意<code>java.version</code>这个参数并不是maven提供的，而是Spring Boot特有的。</p><a id="more"></a><p>如果想单纯的使用maven特性指定，那么有两种方式，它们是等价的。<br>第一种，指定property：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;properties&gt;</div><div class="line">    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</div><div class="line">    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</div><div class="line">&lt;/properties&gt;</div></pre></td></tr></table></figure></p><p>第二种，使用插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;plugins&gt;</div><div class="line">    &lt;plugin&gt;    </div><div class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class="line">        &lt;configuration&gt;</div><div class="line">            &lt;source&gt;1.8&lt;/source&gt;</div><div class="line">            &lt;target&gt;1.8&lt;/target&gt;</div><div class="line">        &lt;/configuration&gt;</div><div class="line">    &lt;/plugin&gt;</div><div class="line">&lt;/plugins&gt;</div></pre></td></tr></table></figure></p><p>插件中的<code>source</code>和<code>target</code>属性就是会使用<code>maven.compiler.source</code>和<code>maven.compiler.target</code>，如果你指定的话。</p><blockquote><p>source </p><p><br>The -source argument for the Java compiler. </p><p><br>Default value is: 1.6. </p><p><br>User property is: maven.compiler.source. </p><p><br>target </p><p><br>The -target argument for the Java compiler. </p><p><br>Default value is: 1.6. </p><p><br>User property is: maven.compiler.target.</p></blockquote><p>参考：<br><a href="https://stackoverflow.com/questions/38882080/specifying-java-version-in-maven-differences-between-properties-and-compiler-p" target="_blank" rel="external">Specifying java version in maven - differences between properties and compiler plugin</a><br><a href="https://maven.apache.org/plugins/maven-compiler-plugin/examples/set-compiler-source-and-target.html" target="_blank" rel="external">Setting the -source and -target of the Java Compiler</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果使用Spring Boot搭建项目，可以指定property：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;java.version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;java.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;java.version&lt;/code&gt;这个参数并不是maven提供的，而是Spring Boot特有的。&lt;/p&gt;
    
    </summary>
    
      <category term="maven" scheme="https://damon4u.github.io/categories/maven/"/>
    
    
      <category term="maven" scheme="https://damon4u.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>安装JDK</title>
    <link href="https://damon4u.github.io//blog/2018/11/%E5%AE%89%E8%A3%85JDK.html"/>
    <id>https://damon4u.github.io//blog/2018/11/安装JDK.html</id>
    <published>2018-11-09T08:41:50.000Z</published>
    <updated>2018-11-19T10:29:24.877Z</updated>
    
    <content type="html"><![CDATA[<p>以安装jdk1.8为例，其他版本类似。</p><p>首先找到<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">官网下载页面</a><br>找到对应的版本，右键 <strong>复制链接地址</strong>，<a href="http://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz" target="_blank" rel="external">http://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz</a><br>然后到服务器指定目录下输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot;  http://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz</div></pre></td></tr></table></figure></p><a id="more"></a><p>下载之后解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf jdk-8u191-linux-x64.tar.gz</div></pre></td></tr></table></figure></p><p>然后修改环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ~/.profile</div></pre></td></tr></table></figure></p><p><code>.profile</code>内添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/yourPath/jdk-8u191-linux-x64</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div></pre></td></tr></table></figure></p><p>然后应用修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.profle</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以安装jdk1.8为例，其他版本类似。&lt;/p&gt;
&lt;p&gt;首先找到&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网下载页面&lt;/a&gt;&lt;br&gt;找到对应的版本，右键 &lt;strong&gt;复制链接地址&lt;/strong&gt;，&lt;a href=&quot;http://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz&lt;/a&gt;&lt;br&gt;然后到服务器指定目录下输入命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget --no-check-certificate --no-cookies --header &amp;quot;Cookie: oraclelicense=accept-securebackup-cookie&amp;quot;  http://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP类内部方法调用不拦截</title>
    <link href="https://damon4u.github.io//blog/2018/11/Spring%20AOP%E7%B1%BB%E5%86%85%E9%83%A8%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E4%B8%8D%E6%8B%A6%E6%88%AA.html"/>
    <id>https://damon4u.github.io//blog/2018/11/Spring AOP类内部方法调用不拦截.html</id>
    <published>2018-11-08T07:41:50.000Z</published>
    <updated>2018-11-09T14:55:14.995Z</updated>
    
    <content type="html"><![CDATA[<p>使用Spring AOP过程中，可能遇到过下列奇怪问题：</p><ul><li>类内部方法间调用AOP不起作用</li><li>类内部方法间调用事务不起作用</li><li>内部类异步线程调用外层方法事务不起作用</li></ul><p>由于Spring的事务底层也是用AOP实现的，因此，这些症状都可以归结为，类内部方法间调用AOP失效。</p><a id="more"></a><p>举个官网例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePojo</span> <span class="keyword">implements</span> <span class="title">Pojo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// this next method invocation is a direct call on the 'this' reference</span></div><div class="line">        <span class="keyword">this</span>.bar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// some logic...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> SimplePojo());</div><div class="line">        factory.addInterface(Pojo.class);</div><div class="line">        factory.addAdvice(<span class="keyword">new</span> RetryAdvice());</div><div class="line"></div><div class="line">        Pojo pojo = (Pojo) factory.getProxy();</div><div class="line"></div><div class="line">        <span class="comment">// this is a method call on the proxy!</span></div><div class="line">        pojo.foo();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>The key thing to understand here is that the client code inside the <code>main(..)</code> method of the <code>Main</code> class has a reference to the proxy. This means that method calls on that object reference are calls on the proxy. As a result, the proxy can delegate to all of the interceptors (advice) that are relevant to that particular method call. However, once the call has finally reached the target object (the <code>SimplePojo</code>, reference in this case), any method calls that it may make on itself, such as <code>this.bar()</code> or <code>this.foo()</code>, are going to be invoked against the <code>this</code> reference, and not the proxy. This has important implications. It means that self-invocation is not going to result in the advice associated with a method invocation getting a chance to execute.</p></blockquote><p>在<code>main</code>方法中，我们为<code>SimplePojo</code>创建了一个代理对象，<code>pojo</code>是代理对象的引用。<br>当调用<code>foo()</code>方法时，其实是调用代理对象的方法，我们可以在代理对象中添加拦截器对方法进行增强。<br>注意，<code>foo()</code>方法内部调用<code>this.bar()</code>时，是在<code>this</code>引用上的，并非代理对象引用，因此，不会被拦截到，无法增强。</p><p>那怎么解决这个问题呢？</p><blockquote><p>The best approach is to refactor your code such that the self-invocation does not happen.</p></blockquote><p>官网推荐做法：干掉内部调用。。。</p><p>如果干不掉呢？</p><p>那就得跟Spring AOP强绑定起来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePojo</span> <span class="keyword">implements</span> <span class="title">Pojo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// this works, but... gah!</span></div><div class="line">        ((Pojo) AopContext.currentProxy()).bar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// some logic...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>或者在一个bean里面，从Spring容器中手动获取bean进行调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"simplePojo"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePojo</span> <span class="keyword">implements</span> <span class="title">Pojo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// this works, but... gah!</span></div><div class="line">        getService().bar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// some logic...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SimplePojo <span class="title">getService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (SimplePojo) SpringContextUtil.getBean(<span class="string">"simplePojo"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* 保存Spring上下文</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringContextUtil</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        applicationContext = applicationContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 根据bean名称获取bean</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>还有一种方法是在bean中引入自己：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(<span class="string">"simplePojo"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePojo</span> <span class="keyword">implements</span> <span class="title">Pojo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> SimplePojo simplePojo;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// this works, but... gah!</span></div><div class="line">        simplePojo.bar();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// some logic...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> SimplePojo <span class="title">getService</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (SimplePojo) SpringContextUtil.getBean(<span class="string">"simplePojo"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>但是这种方式容易产生循环依赖，没有使用。</p><p>还有一种方法，是使用AspectJ的AOP代替Spring AOP的代理方式。在编译器进行代码织入。但是自己用的比较少，这里不做介绍了。</p><p>参考：<br><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop-understanding-aop-proxies" target="_blank" rel="external">5.8.1. Understanding AOP Proxies</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Spring AOP过程中，可能遇到过下列奇怪问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类内部方法间调用AOP不起作用&lt;/li&gt;
&lt;li&gt;类内部方法间调用事务不起作用&lt;/li&gt;
&lt;li&gt;内部类异步线程调用外层方法事务不起作用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于Spring的事务底层也是用AOP实现的，因此，这些症状都可以归结为，类内部方法间调用AOP失效。&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="https://damon4u.github.io/categories/spring/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/spring/java/"/>
    
    
      <category term="spring" scheme="https://damon4u.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Filter实现返回结果AES加密</title>
    <link href="https://damon4u.github.io//blog/2018/11/Filter%E5%AE%9E%E7%8E%B0%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9CAES%E5%8A%A0%E5%AF%86.html"/>
    <id>https://damon4u.github.io//blog/2018/11/Filter实现返回结果AES加密.html</id>
    <published>2018-11-07T07:41:50.000Z</published>
    <updated>2018-11-07T14:04:58.819Z</updated>
    
    <content type="html"><![CDATA[<p>场景：<br>对于新版本（版本信息在请求header中）接口，使用AES算法对返回结果进行全局加密。<br>原始接口都是RESTful类型，使用<code>@ResponseBody</code>标注，返回json数据。</p><p>考虑实现方案：</p><ul><li>web容器过滤器<code>Filter</code></li><li>Spring拦截器<code>Interceptor</code></li><li>Spring的<code>HttpMessageConverter</code></li><li>Spring的<code>ResponseBodyAdvice</code></li></ul><a id="more"></a><h3 id="Spring拦截器Interceptor"><a href="#Spring拦截器Interceptor" class="headerlink" title="Spring拦截器Interceptor"></a>Spring拦截器Interceptor</h3><p>开始想到的是使用Spring的拦截器实现，在<code>postHandle</code>中对返回结果进行加密。<br>但是发现拦截器中并不能修改response内容。<br>想想拦截器的使用场景：</p><ul><li>日志记录：记录请求信息的日志，以便进行信息监控、信息统计、计算PV（Page View）等；</li><li>权限检查：如登录检测，进入处理器检测检测是否登录，如果没有直接返回到登录页面；</li><li>性能监控：有时候系统在某段时间莫名其妙的慢，可以通过拦截器在进入处理器之前记录开始时间，在处理完后记录结束时间，从而得到该请求的处理时间（如果有反向代理，如apache可以自动记录）；</li><li>通用行为：读取cookie得到用户信息并将用户对象放入请求，从而方便后续流程使用，还有如提取Locale、Theme信息等，只要是多个处理器都需要的即可使用拦截器实现。</li></ul><p>我们平时用的最多的是在<code>preHandle</code>方法中进行参数校验、权限校验等，并不适用于修改response的场景。<br>并且Spring文档中也指出：</p><blockquote><p>Note that postHandle is less useful with <code>@ResponseBody</code> and <code>ResponseEntity</code> methods for which the response is written and committed within the HandlerAdapter and before postHandle. That means it is too late to make any changes to the response, such as adding an extra header. For such scenarios, you can implement ResponseBodyAdvice and either declare it as an <code>Controller Advice</code> bean or configure it directly on <code>RequestMappingHandlerAdapter</code>.</p></blockquote><p>返回值response已经在<code>HandlerAdapter</code>中提交了，<code>postHandle</code>中去修改是没有用的。</p><h3 id="Spring的ResponseBodyAdvice"><a href="#Spring的ResponseBodyAdvice" class="headerlink" title="Spring的ResponseBodyAdvice"></a>Spring的ResponseBodyAdvice</h3><p><code>ResponseBodyAdvice</code>这个接口可以在<code>Controller</code>处理完请求后，交给<code>HttpMessageConverter</code>之前，对返回值进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Invoked after an &#123;<span class="doctag">@code</span> HttpMessageConverter&#125; is selected and just before</span></div><div class="line"><span class="comment"> * its write method is invoked.</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> body the body to be written</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> returnType the return type of the controller method</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> selectedContentType the content type selected through content negotiation</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> selectedConverterType the converter type selected to write to the response</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> request the current request</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> response the current response</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> the body that was passed in or a modified, possibly new instance</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">T <span class="title">beforeBodyWrite</span><span class="params">(T body, MethodParameter methodParameter, MediaType selectedContentType,</span></span></div><div class="line"><span class="function"><span class="params">    Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType,</span></span></div><div class="line"><span class="function"><span class="params">    ServerHttpRequest request, ServerHttpResponse response)</span></span>;</div></pre></td></tr></table></figure><p>注意，接口返回的是json数据，那么会使用<code>MappingJackson2HttpMessageConverter</code>写到respon body中。<br>这个方法是在写之前调用的，我们可以将body进行加密，但是，最终还是会以json的形式写入，不符合场景需求。</p><h3 id="Spring的HttpMessageConverter"><a href="#Spring的HttpMessageConverter" class="headerlink" title="Spring的HttpMessageConverter"></a>Spring的HttpMessageConverter</h3><p>上面说了，接口返回的是json数据，那么会使用<code>MappingJackson2HttpMessageConverter</code>写到respon body中。我们可以重写<code>MappingJackson2HttpMessageConverter</code>，在写方法中对数据进行加密：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CipherJsonHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">MappingJackson2HttpMessageConverter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(CipherJsonHttpMessageConverter.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Object object, Type type, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</div><div class="line">        String resultString = JSONUtil.toJson(object);</div><div class="line">        String encryptData = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            encryptData = CipherUtil.encrypt(resultString, <span class="string">"key"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"CipherJsonHttpMessageConverter error."</span>, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (encryptData != <span class="keyword">null</span>) &#123;</div><div class="line">            resultString = encryptData;</div><div class="line">        &#125;</div><div class="line">        outputMessage.getBody().write(resultString.getBytes(StandardCharsets.UTF_8));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样确实能搞定加密。但是这个方法中并不能拿到request，不能获取header中的版本信息。因此，也不符合场景需求。</p><h3 id="过滤器Filter（选取方案）"><a href="#过滤器Filter（选取方案）" class="headerlink" title="过滤器Filter（选取方案）"></a>过滤器Filter（选取方案）</h3><p>其实最开始想到的也是使用过滤器Filter，但是遇到了一些麻烦。<br>第一件事是，如何在Filter中修改response？<br>搜索找到答案，实现<code>HttpServletResponseWrapper</code>，然后在其中保存response的流数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedServletResponseWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ByteArrayOutputStream output; <span class="comment">// 用来保存流数据</span></div><div class="line">    <span class="keyword">private</span> ServletOutputStream filterOutput;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedServletResponseWrapper</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(response);</div><div class="line">        output = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 巧妙将ServletOutputStream放到公共变量，解决不能多次读写问题</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (filterOutput == <span class="keyword">null</span>) &#123;</div><div class="line">            filterOutput = <span class="keyword">new</span> ServletOutputStream() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">                    output.write(b);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteListener</span><span class="params">(WriteListener writeListener)</span> </span>&#123;</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> filterOutput;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getContentAsByteArray() &#123;</div><div class="line">        <span class="keyword">return</span> output.toByteArray();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对应的Filter代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESEncodeFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AESEncodeFilter.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"AESEncodeFilter start."</span>);</div><div class="line">        <span class="keyword">if</span> (IPUtil.support(request)) &#123; <span class="comment">// 从request的header中检查版本</span></div><div class="line">              BufferedServletResponseWrapper responseWrapper = <span class="keyword">new</span> BufferedServletResponseWrapper(response);</div><div class="line">              filterChain.doFilter(request, responseWrapper);</div><div class="line">              String responseStr = <span class="keyword">new</span> String(responseWrapper.getContentAsByteArray(), response.getCharacterEncoding());</div><div class="line">              String encryptResponse = <span class="keyword">null</span>;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  encryptResponse = CipherUtil.encrypt(responseStr, <span class="string">"aesKey"</span>);</div><div class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                  LOGGER.error(<span class="string">"AESEncodeFilter failed."</span>, e);</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">if</span> (encryptResponse != <span class="keyword">null</span>) &#123;</div><div class="line">                  responseStr = encryptResponse;</div><div class="line">              &#125;</div><div class="line">              response.getOutputStream().write(responseStr.getBytes());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            filterChain.doFilter(request, response);</div><div class="line">        &#125;</div><div class="line">        LOGGER.info(<span class="string">"AESEncodeFilter end."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>web.xml中的配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AESEncodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.damon4u.filter.filter.AESEncodeFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AESEncodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p><p>这样，仅配置一个过滤器，没有问题，加密成功。<br>但是，业务层还用到了etag过滤器，配合使用时，就出现了奇怪的现象。<br>第一种配合方式，先配置aes加密过滤器，然后配置etag过滤器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AESEncodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.damon4u.filter.filter.AESEncodeFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>AESEncodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- ETag --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>etagFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.ShallowEtagHeaderFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>etagFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p><p>我们知道，对于相同的url-pattern，过滤器按照声明顺序执行，返回时，先处理etag，然后处理aes加密。<br>此时，发现加密成功，日志打印正常，但是response中拿到的数据被截断了，长度与未加密前的数据长度相等。<br>也就是说aes过滤器处理后，content-length没有更新。</p><p>换一种配合方式，先声明etag过滤器，在声明aes过滤器，数据没有被截断。但是，对response添加header操作失败。</p><p>debug一下，发现问题出现在<code>ShallowEtagHeaderFilter</code>中，它内部使用<code>ContentCachingResponseWrapper</code>包装response，对返回结果进行处理。<br>我们也要对response进行处理，但是content-length没有更新，一定是<code>BufferedServletResponseWrapper</code>写法不正确，少实现了一些方法。<br>阅读<code>ContentCachingResponseWrapper</code>代码，发现了一些痕迹，它不光实现了<code>getOutputStream()</code>和<code>getWriter()</code>两个重要的方法，还是实现了如下两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flushBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">  <span class="comment">// do not flush the underlying response as the content as not been copied to it yet</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (len &gt; <span class="keyword">this</span>.content.size()) &#123;</div><div class="line">    <span class="keyword">this</span>.content.resize(len);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.contentLength = len;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从注释可以看出，重写<code>flushBuffer()</code>方法是为了防止在我们的wrapper类复制数据之前，底层的response输出数据到客户端。这样，我们才能在外层修改response，例如添加头信息等。<br>第二个方法<code>setContentLength()</code>是为了更新数据存储区域的，例如，我们加密数据之后，长度变化了，content-length也要变化。</p><p>仿照<code>ContentCachingResponseWrapper</code>，将重要的方法重写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedServletResponseWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletResponseWrapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FastByteArrayOutputStream content = <span class="keyword">new</span> FastByteArrayOutputStream(<span class="number">1024</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServletOutputStream outputStream = <span class="keyword">new</span> ResponseServletOutputStream();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> PrintWriter writer;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode = HttpServletResponse.SC_OK;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer contentLength;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Create a new ContentCachingResponseWrapper for the given servlet response.</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> response the original servlet response</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedServletResponseWrapper</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> sc)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setStatus(sc);</div><div class="line">        <span class="keyword">this</span>.statusCode = sc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> sc, String sm)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setStatus(sc, sm);</div><div class="line">        <span class="keyword">this</span>.statusCode = sc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendError</span><span class="params">(<span class="keyword">int</span> sc)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        copyBodyToResponse(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">super</span>.sendError(sc);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (IllegalStateException ex) &#123;</div><div class="line">            <span class="comment">// Possibly on Tomcat when called too late: fall back to silent setStatus</span></div><div class="line">            <span class="keyword">super</span>.setStatus(sc);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.statusCode = sc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendError</span><span class="params">(<span class="keyword">int</span> sc, String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        copyBodyToResponse(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">super</span>.sendError(sc, msg);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (IllegalStateException ex) &#123;</div><div class="line">            <span class="comment">// Possibly on Tomcat when called too late: fall back to silent setStatus</span></div><div class="line">            <span class="keyword">super</span>.setStatus(sc, msg);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.statusCode = sc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String location)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        copyBodyToResponse(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">super</span>.sendRedirect(location);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.outputStream;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.writer == <span class="keyword">null</span>) &#123;</div><div class="line">            String characterEncoding = getCharacterEncoding();</div><div class="line">            <span class="keyword">this</span>.writer = (characterEncoding != <span class="keyword">null</span> ? <span class="keyword">new</span> ResponsePrintWriter(characterEncoding) :</div><div class="line">                    <span class="keyword">new</span> ResponsePrintWriter(WebUtils.DEFAULT_CHARACTER_ENCODING));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.writer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 重写这个方法才能在外面设置response的header，contentLength等</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flushBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">// do not flush the underlying response as the content as not been copied to it yet</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 重写这个方法，对response内容进行重写后才能修改response长度</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> len</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (len &gt; <span class="keyword">this</span>.content.size()) &#123;</div><div class="line">            <span class="keyword">this</span>.content.resize(len);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.contentLength = len;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Overrides Servlet 3.1 setContentLengthLong(long) at runtime</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> len)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (len &gt; Integer.MAX_VALUE) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Content-Length exceeds ShallowEtagHeaderFilter's maximum ("</span> +</div><div class="line">                    Integer.MAX_VALUE + <span class="string">"): "</span> + len);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> lenInt = (<span class="keyword">int</span>) len;</div><div class="line">        <span class="keyword">if</span> (lenInt &gt; <span class="keyword">this</span>.content.size()) &#123;</div><div class="line">            <span class="keyword">this</span>.content.resize(lenInt);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.contentLength = lenInt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBufferSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size &gt; <span class="keyword">this</span>.content.size()) &#123;</div><div class="line">            <span class="keyword">this</span>.content.resize(size);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetBuffer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.content.reset();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.reset();</div><div class="line">        <span class="keyword">this</span>.content.reset();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Return the status code as specified on the response.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatusCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.statusCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Return the cached response content as a byte array.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getContentAsByteArray() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content.toByteArray();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Return an &#123;<span class="doctag">@link</span> InputStream&#125; to the cached content.</span></div><div class="line"><span class="comment">     * <span class="doctag">@since</span> 4.2</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getContentInputStream</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content.getInputStream();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Return the current size of the cached content.</span></div><div class="line"><span class="comment">     * <span class="doctag">@since</span> 4.2</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.content.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Copy the complete cached body content to the response.</span></div><div class="line"><span class="comment">     * <span class="doctag">@since</span> 4.2</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyBodyToResponse</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        copyBodyToResponse(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Copy the cached body content to the response.</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> complete whether to set a corresponding content length</span></div><div class="line"><span class="comment">     * for the complete cached body content</span></div><div class="line"><span class="comment">     * <span class="doctag">@since</span> 4.2</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">copyBodyToResponse</span><span class="params">(<span class="keyword">boolean</span> complete)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.content.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            HttpServletResponse rawResponse = (HttpServletResponse) getResponse();</div><div class="line">            <span class="keyword">if</span> ((complete || <span class="keyword">this</span>.contentLength != <span class="keyword">null</span>) &amp;&amp; !rawResponse.isCommitted()) &#123;</div><div class="line">                rawResponse.setContentLength(complete ? <span class="keyword">this</span>.content.size() : <span class="keyword">this</span>.contentLength);</div><div class="line">                <span class="keyword">this</span>.contentLength = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.content.writeTo(rawResponse.getOutputStream());</div><div class="line">            <span class="keyword">this</span>.content.reset();</div><div class="line">            <span class="keyword">if</span> (complete) &#123;</div><div class="line">                <span class="keyword">super</span>.flushBuffer();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseServletOutputStream</span> <span class="keyword">extends</span> <span class="title">ServletOutputStream</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            content.write(b);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            content.write(b, off, len);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWriteListener</span><span class="params">(WriteListener writeListener)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponsePrintWriter</span> <span class="keyword">extends</span> <span class="title">PrintWriter</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ResponsePrintWriter</span><span class="params">(String characterEncoding)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">            <span class="keyword">super</span>(<span class="keyword">new</span> OutputStreamWriter(content, characterEncoding));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> buf[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.write(buf, off, len);</div><div class="line">            <span class="keyword">super</span>.flush();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String s, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.write(s, off, len);</div><div class="line">            <span class="keyword">super</span>.flush();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.write(c);</div><div class="line">            <span class="keyword">super</span>.flush();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样就可以完美修改response了。<br>有人可能会说，为什么不直接继承<code>ContentCachingResponseWrapper</code>？<br>主要是因为<code>ShallowEtagHeaderFilter</code>中会用一下方法寻找response wrapper，如果我们也用这个类，那么会产生冲突，造成加密无效。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ContentCachingResponseWrapper responseWrapper =</div><div class="line">WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);</div></pre></td></tr></table></figure></p><p>最终的方案是将<code>ContentCachingResponseWrapper</code>中的代码考过来，放到一个新的类中，然后在web.xml中注册时，还是先声明etag过滤器，再声明aes加密过滤器。<br>对于相同内容，AES加密后的结果是相同的，因此不会影响Etag比对。</p><p>参考：<br><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-handlermapping-interceptor" target="_blank" rel="external">Web on Servlet Stack 1.1.6. Interception</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景：&lt;br&gt;对于新版本（版本信息在请求header中）接口，使用AES算法对返回结果进行全局加密。&lt;br&gt;原始接口都是RESTful类型，使用&lt;code&gt;@ResponseBody&lt;/code&gt;标注，返回json数据。&lt;/p&gt;
&lt;p&gt;考虑实现方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;web容器过滤器&lt;code&gt;Filter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spring拦截器&lt;code&gt;Interceptor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spring的&lt;code&gt;HttpMessageConverter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spring的&lt;code&gt;ResponseBodyAdvice&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="spring" scheme="https://damon4u.github.io/categories/spring/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/spring/java/"/>
    
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（十二）mybatis插件之alias解析</title>
    <link href="https://damon4u.github.io//blog/2018/11/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8Balias%E8%A7%A3%E6%9E%90.html"/>
    <id>https://damon4u.github.io//blog/2018/11/IDEA插件开发（十二）mybatis插件之alias解析.html</id>
    <published>2018-11-01T07:41:50.000Z</published>
    <updated>2018-11-03T02:35:13.153Z</updated>
    
    <content type="html"><![CDATA[<p>今天主要介绍<code>resultType</code>和<code>parameterType</code>中的alias解析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天主要介绍&lt;code&gt;resultType&lt;/code&gt;和&lt;code&gt;parameterType&lt;/code&gt;中的alias解析。&lt;/p&gt;

      
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（十一）mybatis插件之Xml校验</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8BXml%E6%A0%A1%E9%AA%8C.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（十一）mybatis插件之Xml校验.html</id>
    <published>2018-10-26T10:41:50.000Z</published>
    <updated>2018-11-03T02:32:45.718Z</updated>
    
    <content type="html"><![CDATA[<p>今天要实现的功能是，检查xml中的增删改查有没有对应的DAO层方法，如果没有，则报错。</p><p>IDEA插件中是通过 <strong>Inspection</strong> 来实现这个功能。</p><p>对XML的检查，IDEA提供了一个<code>BasicDomElementsInspection</code>来做基本检查，我们需要做的就是做好DOM解析工作，对关键属性添加<code>converter</code>。最后注册到<code>plugin.xml</code>即可。</p><a id="more"></a><p>为了让<code>BasicDomElementsInspection</code>帮我们做Dom元素检查，我们首先需要为属性添加约束条件。<br>例如，我们想让增删改查对应这DAO层方法，那我们就可以为他们的id属性添加一个<code>ResolvingConverter</code>:</p><p>先添加一个适配器，提供默认实现方法，具体减少实现类的无用代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ConverterAdaptor</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ResolvingConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Collection&lt;? extends T&gt; getVariants(ConvertContext context) &#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">fromString</span><span class="params">(@Nullable String s, ConvertContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">(@Nullable T t, ConvertContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后就创建一个DAO层方法绑定的实现，重写<code>fromString()</code>方法，根据命名空间和id（即方法名称）查询对应的DAO方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoMethodConverter</span> <span class="keyword">extends</span> <span class="title">ConverterAdaptor</span>&lt;<span class="title">PsiMethod</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> PsiMethod <span class="title">fromString</span><span class="params">(@Nullable @NonNls String id, ConvertContext context)</span> </span>&#123;</div><div class="line">        Mapper mapper = MapperUtils.getMapper(context.getInvocationElement());</div><div class="line">        <span class="keyword">return</span> JavaUtils.findMethod(context.getProject(), MapperUtils.getNamespace(mapper), id).orElse(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后绑定到增删改查都实现的接口上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DMLAndDQLDynamicQueryableDomElement</span> <span class="keyword">extends</span> <span class="title">DynamicQueryableDomElement</span>, <span class="title">IdDomElement</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 重写id属性，提供转换器，增删改查会实现这个接口，用来对应Dao层方法</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"id"</span>)</div><div class="line">    <span class="meta">@Convert</span>(DaoMethodConverter.class)</div><div class="line">    <span class="function">GenericAttributeValue&lt;String&gt; <span class="title">getId</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="meta">@Attribute</span>(<span class="string">"parameterType"</span>)</div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> converter</span></div><div class="line">    <span class="function">GenericAttributeValue&lt;PsiClass&gt; <span class="title">getParameterType</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后，我们实现一个<code>BasicDomElementsInspection</code>即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * 检查mapper文件中的语句有没有对应的dao层方法</span></div><div class="line"><span class="comment"> * 继承自BasicDomElementsInspection，依赖于DOM解析过程中的规则，</span></div><div class="line"><span class="comment"> * 需要为ParameteredDynamicQueryableDomElement中的id添加DaoMethodConverter，绑定对应关系</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 2018-10-25 21:49</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperXmlInspection</span> <span class="keyword">extends</span> <span class="title">BasicDomElementsInspection</span>&lt;<span class="title">DomElement</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapperXmlInspection</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(DomElement.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkDomElement</span><span class="params">(DomElement element, DomElementAnnotationHolder holder, DomHighlightingHelper helper)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.checkDomElement(element, holder, helper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注册到<code>plugin.xml</code>中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">localInspection</span> <span class="attr">language</span>=<span class="string">"XML"</span> <span class="attr">shortName</span>=<span class="string">"MybatisMapperXmlInspection"</span> <span class="attr">enabledByDefault</span>=<span class="string">"true"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span></span></div><div class="line"><span class="tag">                 <span class="attr">displayName</span>=<span class="string">"Mapper xml inspection"</span></span></div><div class="line"><span class="tag">                 <span class="attr">groupName</span>=<span class="string">"Mybatis"</span></span></div><div class="line"><span class="tag">                 <span class="attr">implementationClass</span>=<span class="string">"com.damon4u.plugin.mybatis.inspection.MapperXmlInspection"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>还有一点小完善，就是为这个inspection创建说明文档，这个文档在settings对话框中展示。如果没有提供这样的说明文档，IDEA会给提示。<br>在<code>/resources/inspectionDescriptions</code>下创建<code>MybatisMapperXmlInspection.html</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>There should be a method in DAO interface with the same name of Mybatis XML tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a method according to the XML tag id or just remove the tag.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>实现的效果：<br>检测到没有DAO层方法：</p><p><img src="/images/idea-plugin18.png" alt=""></p><p>打开setting提示：<br><img src="/images/idea-plugin19.png" alt=""></p><p>参考：<br><a href="https://www.jetbrains.org/intellij/sdk/docs/tutorials/code_inspections.html" target="_blank" rel="external">Code Inspections</a><br><a href="https://www.jetbrains.com/help/idea/code-inspection.html" target="_blank" rel="external">Code Inspection</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天要实现的功能是，检查xml中的增删改查有没有对应的DAO层方法，如果没有，则报错。&lt;/p&gt;
&lt;p&gt;IDEA插件中是通过 &lt;strong&gt;Inspection&lt;/strong&gt; 来实现这个功能。&lt;/p&gt;
&lt;p&gt;对XML的检查，IDEA提供了一个&lt;code&gt;BasicDomElementsInspection&lt;/code&gt;来做基本检查，我们需要做的就是做好DOM解析工作，对关键属性添加&lt;code&gt;converter&lt;/code&gt;。最后注册到&lt;code&gt;plugin.xml&lt;/code&gt;即可。&lt;/p&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件开发（十）mybatis插件之DAO与XML之间跳转</title>
    <link href="https://damon4u.github.io//blog/2018/10/IDEA%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%88%E5%8D%81%EF%BC%89mybatis%E6%8F%92%E4%BB%B6%E4%B9%8BDAO%E4%B8%8EXML%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B7%B3%E8%BD%AC.html"/>
    <id>https://damon4u.github.io//blog/2018/10/IDEA插件开发（十）mybatis插件之DAO与XML之间的跳转.html</id>
    <published>2018-10-26T09:41:50.000Z</published>
    <updated>2018-10-30T15:33:27.102Z</updated>
    
    <content type="html"><![CDATA[<p>使用Mybatis进行开发时，还有一个常用场景是从DAO层方法跳转到XML标签，或者反过来从XML标签跳转到DAO层方法。<br>可以使用<code>lineMarkerProvider</code>来实现该功能。</p><blockquote><p>Line markers help to annotate any code with icons on the gutter. These icons may provide navigation to related code.</p></blockquote><a id="more"></a><h3 id="DAO层方法跳转到对应XML标签"><a href="#DAO层方法跳转到对应XML标签" class="headerlink" title="DAO层方法跳转到对应XML标签"></a>DAO层方法跳转到对应XML标签</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoToXmlLineMarkerProvider</span> <span class="keyword">extends</span> <span class="title">RelatedItemLineMarkerProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Function&lt;DomElement, XmlTag&gt; FUNCTION = DomElement::getXmlTag;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">collectNavigationMarkers</span><span class="params">(@NotNull PsiElement element, @NotNull Collection&lt;? <span class="keyword">super</span> RelatedItemLineMarkerInfo&gt; result)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (element <span class="keyword">instanceof</span> PsiNameIdentifierOwner &amp;&amp; JavaUtils.isElementWithinInterface(element)) &#123;</div><div class="line">            CommonProcessors.CollectProcessor&lt;IdDomElement&gt; processor = <span class="keyword">new</span> CommonProcessors.CollectProcessor&lt;&gt;();</div><div class="line">            JavaService.getInstance(element.getProject()).process(element, processor);</div><div class="line">            Collection&lt;IdDomElement&gt; results = processor.getResults();</div><div class="line">            <span class="keyword">if</span> (!results.isEmpty()) &#123;</div><div class="line">                NavigationGutterIconBuilder&lt;PsiElement&gt; builder = NavigationGutterIconBuilder.create(Icons.DAO_TO_XML_LINE_MARKER_ICON)</div><div class="line">                        .setAlignment(GutterIconRenderer.Alignment.CENTER)</div><div class="line">                        .setTargets(Collections2.transform(results, FUNCTION))</div><div class="line">                        .setTooltipTitle(<span class="string">"Navigation to target in mapper xml"</span>);</div><div class="line">                PsiElement nameIdentifier = ((PsiNameIdentifierOwner) element).getNameIdentifier();</div><div class="line">                <span class="keyword">if</span> (nameIdentifier != <span class="keyword">null</span>) &#123;</div><div class="line">                    result.add(builder.createLineMarkerInfo(nameIdentifier));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同样先过滤出DAO层接口，可能是接口本身，也可能是接口中的方法。<br>根据接口或者方法<code>PsiElement</code>寻找对应<code>IdDomElement</code>的逻辑在<code>JavaService#process()</code>方法中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(@NotNull PsiElement target, @NotNull Processor processor)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> PsiMethod) &#123; <span class="comment">// dao方法</span></div><div class="line">        process((PsiMethod) target, processor);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target <span class="keyword">instanceof</span> PsiClass) &#123; <span class="comment">// dao接口</span></div><div class="line">        process((PsiClass) target, processor);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(@NotNull PsiMethod psiMethod, @NotNull Processor&lt;IdDomElement&gt; processor)</span> </span>&#123;</div><div class="line">    PsiClass psiClass = psiMethod.getContainingClass();</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == psiClass) <span class="keyword">return</span>;</div><div class="line">    String id = psiClass.getQualifiedName() + <span class="string">"."</span> + psiMethod.getName();</div><div class="line">    <span class="keyword">for</span> (Mapper mapper : MapperUtils.findMappers(psiMethod.getProject())) &#123; <span class="comment">// 先根据命名空间找mapper</span></div><div class="line">        <span class="keyword">for</span> (IdDomElement idDomElement : mapper.getDaoElements()) &#123;</div><div class="line">            <span class="keyword">if</span> (MapperUtils.getIdSignature(idDomElement).equals(id)) &#123; <span class="comment">// 对比tag的id与方法名</span></div><div class="line">                processor.process(idDomElement);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(@NotNull PsiClass clazz, @NotNull Processor&lt;Mapper&gt; processor)</span> </span>&#123;</div><div class="line">    String ns = clazz.getQualifiedName();</div><div class="line">    <span class="keyword">for</span> (Mapper mapper : MapperUtils.findMappers(clazz.getProject())) &#123;</div><div class="line">        <span class="keyword">if</span> (MapperUtils.getNamespace(mapper).equals(ns)) &#123;</div><div class="line">            processor.process(mapper);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>找到符合的<code>IdDomElement</code>后，构造一个跳转<code>LineMarkerInfo</code>：<br>需要传入图标、布局、跳转目标和提示语。</p><h3 id="XML标签跳转到DAO层方法"><a href="#XML标签跳转到DAO层方法" class="headerlink" title="XML标签跳转到DAO层方法"></a>XML标签跳转到DAO层方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlToDaoLineMarkerProvider</span> <span class="keyword">implements</span> <span class="title">LineMarkerProvider</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ImmutableList&lt;Class&lt;? extends DMLAndDQLDynamicQueryableDomElement&gt;&gt; TARGET_TYPES = ImmutableList.of(</div><div class="line">            Select.class,</div><div class="line">            Update.class,</div><div class="line">            Insert.class,</div><div class="line">            Delete.class</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> LineMarkerInfo <span class="title">getLineMarkerInfo</span><span class="params">(@NotNull PsiElement element)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isTargetElement(element)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        DomElement domElement = DomUtil.getDomElement(element);</div><div class="line">        <span class="keyword">if</span> (domElement == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        Optional&lt;PsiMethod&gt; method = JavaUtils.findMethod(element.getProject(), (IdDomElement) domElement);</div><div class="line">        <span class="keyword">return</span> method.map(psiMethod -&gt; <span class="keyword">new</span> LineMarkerInfo&lt;&gt;((XmlTag) element,</div><div class="line">                element.getTextRange(),</div><div class="line">                Icons.XML_TO_DAO_LINE_MARKER_ICON,</div><div class="line">                Pass.UPDATE_ALL,</div><div class="line">                getTooltipProvider(psiMethod),</div><div class="line">                getNavigationHandler(psiMethod),</div><div class="line">                GutterIconRenderer.Alignment.CENTER)).orElse(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectSlowLineMarkers</span><span class="params">(@NotNull List&lt;PsiElement&gt; elements, @NotNull Collection&lt;LineMarkerInfo&gt; result)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTargetElement</span><span class="params">(@NotNull PsiElement element)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> element <span class="keyword">instanceof</span> XmlTag</div><div class="line">                &amp;&amp; MapperUtils.isElementWithinMybatisFile(element)</div><div class="line">                &amp;&amp; isTargetType(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTargetType</span><span class="params">(PsiElement element)</span> </span>&#123;</div><div class="line">        DomElement domElement = DomUtil.getDomElement(element);</div><div class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz : TARGET_TYPES) &#123;</div><div class="line">            <span class="keyword">if</span> (clazz.isInstance(domElement))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Function&lt;XmlTag, String&gt; <span class="title">getTooltipProvider</span><span class="params">(<span class="keyword">final</span> PsiMethod target)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> from -&gt; getTooltip(target);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> GutterIconNavigationHandler&lt;XmlTag&gt; <span class="title">getNavigationHandler</span><span class="params">(<span class="keyword">final</span> PsiMethod target)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (e, from) -&gt; ((Navigatable) target.getNavigationElement()).navigate(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getTooltip</span><span class="params">(@NotNull PsiMethod target)</span> </span>&#123;</div><div class="line">        PsiClass containingClass = target.getContainingClass();</div><div class="line">        <span class="keyword">if</span> (containingClass == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Data access object not found"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Data access object found - "</span> + containingClass.getQualifiedName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个类继承自最基本的<code>LineMarkerProvider</code>，实现<code>getLineMarkerInfo</code>方法。<br>同样是先过滤，然后构造<code>LineMarkerInfo</code>。</p><p>最后注册到<code>plugin.xml</code>中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 在java类或者方法行添加跳转到mapper的icon --&gt;</div><div class="line">&lt;codeInsight.lineMarkerProvider language=&quot;JAVA&quot;</div><div class="line">                                implementationClass=&quot;com.damon4u.plugin.mybatis.linemarker.DaoToXmlLineMarkerProvider&quot;/&gt;</div><div class="line"></div><div class="line">&lt;!-- 在mapper文件中添加跳转到java类的icon --&gt;</div><div class="line">&lt;codeInsight.lineMarkerProvider language=&quot;XML&quot;</div><div class="line">                                implementationClass=&quot;com.damon4u.plugin.mybatis.linemarker.XmlToDaoLineMarkerProvider&quot;/&gt;</div></pre></td></tr></table></figure></p><p>参考：<br><a href="https://www.jetbrains.org/intellij/sdk/docs/tutorials/custom_language_support/line_marker_provider.html" target="_blank" rel="external">Line Marker Provider</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Mybatis进行开发时，还有一个常用场景是从DAO层方法跳转到XML标签，或者反过来从XML标签跳转到DAO层方法。&lt;br&gt;可以使用&lt;code&gt;lineMarkerProvider&lt;/code&gt;来实现该功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Line markers help to annotate any code with icons on the gutter. These icons may provide navigation to related code.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="idea" scheme="https://damon4u.github.io/categories/idea/"/>
    
      <category term="java" scheme="https://damon4u.github.io/categories/idea/java/"/>
    
    
      <category term="idea" scheme="https://damon4u.github.io/tags/idea/"/>
    
  </entry>
  
</feed>
