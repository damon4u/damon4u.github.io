<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>是五月呀！</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://damon4u.github.io/"/>
  <updated>2018-09-27T12:57:24.631Z</updated>
  <id>https://damon4u.github.io/</id>
  
  <author>
    <name>五月y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java包装类</title>
    <link href="https://damon4u.github.io//blog/2018/09/%E5%8C%85%E8%A3%85%E7%B1%BB.html"/>
    <id>https://damon4u.github.io//blog/2018/09/包装类.html</id>
    <published>2018-09-27T08:41:50.000Z</published>
    <updated>2018-09-27T12:57:24.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-自动装箱与自动拆箱"><a href="#1-自动装箱与自动拆箱" class="headerlink" title="1. 自动装箱与自动拆箱"></a>1. 自动装箱与自动拆箱</h3><p>那我们来分析<code>Integer i = 5;</code>的过程；<br>在jdk1.5以前，这样的代码是错误的，必须要通过<code>Integer i = new Integer(5);</code>这样的语句实现；<br>而在jdk1.5以后，Java提供了自动装箱的功能，只需<code>Integer i = 5;</code>这样的语句就能实现基本数据类型传给其包装类，JVM为我们执行了<code>Integer i = Integer.valueOf(5);</code>。</p><p>相对应的，把基本数据从对应包装类中取出的过程就是拆箱，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer i = 5；</div><div class="line">int j = i; // 这样的过程就是自动拆箱</div></pre></td></tr></table></figure></p><p>源码方面，装箱过程是通过调用包装器的<code>valueOf</code>方法实现的，而拆箱过程是通过调用包装器的<code>xxxValue</code>方法实现的。（xxx代表对应的基本数据类型）</p><a id="more"></a><h3 id="2-比较大小"><a href="#2-比较大小" class="headerlink" title="2. 比较大小"></a>2. 比较大小</h3><h4 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInteger</span><span class="params">()</span> </span>&#123;</div><div class="line">    Integer n1 = <span class="number">1</span>;</div><div class="line">    Integer n2 = <span class="number">1</span>;</div><div class="line">    Integer n3 = <span class="number">200</span>;</div><div class="line">    Integer n4 = <span class="number">200</span>;</div><div class="line">    assertTrue(n1 == n2);</div><div class="line">    assertTrue(n1.equals(n2));</div><div class="line">    assertFalse(n3 == n4);</div><div class="line">    assertTrue(n3.equals(n4));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于Integer，需要注意它的<code>valueOf</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* This method will always cache values in the range -128 to 127, inclusive, and may cache other values outside of this range.</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里引入了<code>IntegerCache</code>，缓存-128到127之间的常用数值，注意，范围外的数值也有可能被缓存。<br>即在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。<br>上面代码中，n1和n2的数值都为1，在缓存范围内，所以引用了同一个对象。</p><p>类似的，Byte、Character、Short、Integer、Long这几个整型包装类都会缓存[-128,127]之间的数值。</p><h4 id="2-2-浮点型"><a href="#2-2-浮点型" class="headerlink" title="2.2 浮点型"></a>2.2 浮点型</h4><p>与整型不同，浮点型包装类Float和Double的valueOf并不会缓存常用值，而是直接新建对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">valueOf</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Double(d);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2-3-布尔型"><a href="#2-3-布尔型" class="headerlink" title="2.3 布尔型"></a>2.3 布尔型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBoolean</span><span class="params">()</span> </span>&#123;</div><div class="line">    Boolean b1 = <span class="keyword">true</span>;</div><div class="line">    Boolean b2 = <span class="keyword">true</span>;</div><div class="line">    Boolean b3 = <span class="keyword">false</span>;</div><div class="line">    Boolean b4 = <span class="keyword">false</span>;</div><div class="line">    assertTrue(b1 == b2);</div><div class="line">    assertTrue(b3 == b4);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>接下来看布尔类型包装类Boolean的valueOf方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean TRUE = <span class="keyword">new</span> Boolean(<span class="keyword">true</span>);</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Boolean FALSE = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看出来，布尔类型的自动装箱会返回两个静态常量值中的一个。</p><h4 id="2-4-类型转换"><a href="#2-4-类型转换" class="headerlink" title="2.4 类型转换"></a>2.4 类型转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCompute</span><span class="params">()</span> </span>&#123;</div><div class="line">    Integer a = <span class="number">1</span>;</div><div class="line">    Integer b = <span class="number">2</span>;</div><div class="line">    Integer c = <span class="number">3</span>;</div><div class="line">    Long g = <span class="number">3L</span>;</div><div class="line">    Long h = <span class="number">2L</span>;</div><div class="line">    assertTrue(c == (a + b));     <span class="comment">// (1)</span></div><div class="line">    assertTrue(c.equals(a + b));  <span class="comment">// (2)</span></div><div class="line">    assertTrue(g == (a + b));     <span class="comment">// (3)</span></div><div class="line">    assertFalse(g.equals(a + b)); <span class="comment">// (4)</span></div><div class="line">    assertTrue(g.equals(a + h));  <span class="comment">// (5)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>a + b 运算符操作，先进行拆箱，计算得到int型的3，然后在进行封箱操作，传入equals方法。</p><p>这里面需要注意的是：</p><ul><li>当 “==” 运算符的两个操作数都是包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会触发自动拆箱的过程）。</li><li>对于包装器类型，equals方法并不会进行类型转换。</li></ul><p>重点看（3）（4）（5）。<br>（1）和（3）由于 a+b 包含了算术运算，因此会触发自动拆箱过程（会调用intValue方法），因此它们比较的是数值是否相等。<br>（2）（4）（5）对于c.equals(a+b)会先触发自动拆箱过程，再触发自动装箱过程，也就是说a+b，会先各自调用intValue方法，得到了加法运算后的数值之后，便调用Integer.valueOf方法，再进行equals比较。如果数值是int类型的，装箱过程调用的是Integer.valueOf；如果是long类型的，装箱调用的Long.valueOf方法。不同类型进行equals方法比较肯定不相等。</p><h3 id="3-空指针"><a href="#3-空指针" class="headerlink" title="3. 空指针"></a>3. 空指针</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>(expected = NullPointerException.class)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNPE</span><span class="params">()</span> </span>&#123;</div><div class="line">    Integer a = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (a &gt; <span class="number">0</span>) &#123; <span class="comment">// NPE</span></div><div class="line">        System.out.println(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在执行<code>a &gt; 0</code>时，需要对a进行拆箱操作，也就是调用a的intValue方法，而a为空，则抛出NPE。<br>因此，对于包装类，需要先进行判空检验。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-自动装箱与自动拆箱&quot;&gt;&lt;a href=&quot;#1-自动装箱与自动拆箱&quot; class=&quot;headerlink&quot; title=&quot;1. 自动装箱与自动拆箱&quot;&gt;&lt;/a&gt;1. 自动装箱与自动拆箱&lt;/h3&gt;&lt;p&gt;那我们来分析&lt;code&gt;Integer i = 5;&lt;/code&gt;的过程；&lt;br&gt;在jdk1.5以前，这样的代码是错误的，必须要通过&lt;code&gt;Integer i = new Integer(5);&lt;/code&gt;这样的语句实现；&lt;br&gt;而在jdk1.5以后，Java提供了自动装箱的功能，只需&lt;code&gt;Integer i = 5;&lt;/code&gt;这样的语句就能实现基本数据类型传给其包装类，JVM为我们执行了&lt;code&gt;Integer i = Integer.valueOf(5);&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;相对应的，把基本数据从对应包装类中取出的过程就是拆箱，如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Integer i = 5；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int j = i; // 这样的过程就是自动拆箱&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;源码方面，装箱过程是通过调用包装器的&lt;code&gt;valueOf&lt;/code&gt;方法实现的，而拆箱过程是通过调用包装器的&lt;code&gt;xxxValue&lt;/code&gt;方法实现的。（xxx代表对应的基本数据类型）&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>云音乐抓取</title>
    <link href="https://damon4u.github.io//blog/2018/09/%E4%BA%91%E9%9F%B3%E4%B9%90%E6%8A%93%E5%8F%96.html"/>
    <id>https://damon4u.github.io//blog/2018/09/云音乐抓取.html</id>
    <published>2018-09-21T08:41:50.000Z</published>
    <updated>2018-09-27T13:12:14.992Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-初衷"><a href="#1-初衷" class="headerlink" title="1. 初衷"></a>1. 初衷</h3><p>作为云音乐的死忠用户，在大量版权丢失的情况下，依然坚守阵地，除了对UI的喜欢，还有就是歌曲下面精彩的评论信息了。<br>翻过很多热评后，就想把这些数据抓取下来。有了数据，就可以做数据分析。</p><a id="more"></a><h3 id="2-探索抓取方案"><a href="#2-探索抓取方案" class="headerlink" title="2.探索抓取方案"></a>2.探索抓取方案</h3><p>我感兴趣的数据包括歌曲信息、用户信息和评论信息。<br>在web端搜索一首歌曲，例如女友喜欢的《umbrella》：<a href="http://music.163.com/song?id=21563094" target="_blank" rel="external">http://music.163.com/song?id=21563094</a><br>打开开发者选项，抓一下这个接口的返回：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">        &lt;meta name=&quot;baidu-site-verification&quot; content=&quot;cNhJHKEzsD&quot; /&gt;</div><div class="line">        &lt;meta property=&quot;qc:admins&quot; content=&quot;27354635321361636375&quot; /&gt;</div><div class="line">        &lt;link rel=&quot;canonical&quot; href=&quot;https://music.163.com/song?id=21563094&quot;&gt;</div><div class="line">        &lt;meta name=&quot;applicable-device&quot; content=&quot;pc&quot;&gt;</div><div class="line">        &lt;link rel=&quot;alternate&quot; media=&quot;only screen and (max-width: 640px)&quot; href=&quot;https://music.163.com/m/song?id=21563094&quot;&gt;</div><div class="line">        &lt;meta name=&quot;mobile-agent&quot; content=&quot;format=html5;url=https://music.163.com/m/song?id=21563094&quot;&gt;</div><div class="line">        &lt;title&gt;Umbrella - Rihanna/Jay-Z - 单曲 - 网易云音乐&lt;/title&gt;</div><div class="line">        &lt;meta name=&quot;keywords&quot; content=&quot;Umbrella，Good Girl Gone Bad: Reloaded，Rihanna，Jay-Z&quot; /&gt;</div><div class="line">        &lt;meta name=&quot;description&quot; content=&quot;歌手：Rihanna，Jay-Z。所属专辑：Good Girl Gone Bad: Reloaded。&quot; /&gt;</div><div class="line">        &lt;meta property=&quot;og:title&quot; content=&quot;Umbrella - Rihanna/Jay-Z - 单曲 - 网易云音乐&quot; /&gt;</div><div class="line">        &lt;meta property=&quot;og:type&quot; content=&quot;music.song&quot; /&gt;</div><div class="line">        &lt;meta property=&quot;og:image&quot; content=&quot;http://p1.music.126.net/cSVFVXAwbx-UITEYuW2OCQ==/18923694625892133.jpg&quot; /&gt;</div><div class="line">        &lt;meta property=&quot;og:url&quot; content=&quot;https://music.163.com/song?id=21563094&quot; /&gt;</div><div class="line">        &lt;script type=&quot;application/ld+json&quot;&gt;</div><div class="line">&#123;</div><div class="line">&quot;@context&quot;: &quot;https://ziyuan.baidu.com/contexts/cambrian.jsonld&quot;,</div><div class="line">&quot;@id&quot;: &quot;http://music.163.com/song?id=21563094&quot;,</div><div class="line">&quot;appid&quot;: &quot;1582028769404989&quot;,</div><div class="line">&quot;title&quot;: &quot;Umbrella&quot;,</div><div class="line">&quot;images&quot;: [&quot;http://p1.music.126.net/cSVFVXAwbx-UITEYuW2OCQ==/18923694625892133.jpg&quot;],</div><div class="line">&quot;description&quot;: &quot;歌手：Rihanna，Jay-Z。所属专辑：Good Girl Gone Bad: Reloaded。&quot;,</div><div class="line">&quot;pubDate&quot;: &quot;2008-06-01T00:00:00&quot;</div><div class="line">&#125;</div><div class="line">&lt;!-- ... --&gt;</div></pre></td></tr></table></figure></p><p>这个静态页面包含了我们需要的歌曲信息：歌曲名称，歌手名称，简单描述，封面等。</p><p>过滤一下<code>comment</code>关键字，可以抓到评论接口：<br><a href="http://music.163.com/weapi/v1/resource/comments/R_SO_4_21563094?csrf_token=" target="_blank" rel="external">http://music.163.com/weapi/v1/resource/comments/R_SO_4_21563094?csrf_token=</a><br>观察下这个请求url，发现是<br><a href="http://music.163.com/weapi/v1/resource/comments/R_SO_4_{songId}?csrf_token=" target="_blank" rel="external">http://music.163.com/weapi/v1/resource/comments/R_SO_4_{songId}?csrf_token=</a><br>的规则。<br>但是直接发POST请求拿不到数据，说明这个接口做了权限校验。<br>继续分析这个接口的请求参数，发现Form Data中带了两个参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">params: Tt0vzJun80fPMcJdTIQZjECkfD19yB+85n1n/yHPlpMyRMftbmFja0AccgQjzjJwVBCs/2P8Rv3G2twaIXyxcHHTPinf+r+W3My26Ig+7u4+MFHlt2da1t1mEqXDQFDLRMgQGBrHJ3SQwyL82t+FTpjoVRGVlIKUqT5+k/w9oFoPpCyLzICLhbdK+dHANH6g</div><div class="line">encSecKey: 465fd8f7c29de467d6396e88b8b77d42971cb85134f8da7622925823019ab6774dc4b1cf6da9d39c063cb492e01349ae5801946700bc981b83cd5cddf66229ce794b63b8be99b7e47a88f415f412c6a5bf561a84b4cefb63b9571e05209e024b1e2dea08cbf9d299d11770682fc1f17117c612e0d113a26175f88b2a661bfc32</div></pre></td></tr></table></figure></p><p>我们也加上两个表单参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -X POST \</div><div class="line">  &apos;http://music.163.com/weapi/v1/resource/comments/R_SO_4_21563094/?csrf_token=&apos; \</div><div class="line">  -H &apos;Content-Type: application/x-www-form-urlencoded&apos; \</div><div class="line">  -d &apos;params=idbuC%2BeyC4tyaC8O0b17iPmu76ES3ExK4xUyvEcqLUc4ky04AGkMkKd8Agp1Z46Vh3TMCZUc4aqHdMaQ7MyYj2jzr2v3irkRTalDwLf5Hu4%2B3FrujioedL5Crw8a2G9rcV%2BjdUm7JkZbZ6ubRTl4QlRT2OjNj7DjcBj%2B5nKgH6Z2rGQzoL8XO5HAVED4uRBB&amp;encSecKey=a889c30bc037e06c3cb96d2f694bdec265cda483db3b551d72c9c30d2eb5ee7fac6848cb295fcde522ba0b0ed709ca5f28638353016bad5b4224a76517f2776a8d1bea8e2a9318625b41c73e2aece423e0846bcd54093032287185b1f618fe39163f8df49939abac3f5ae8ebcea87cda6e921b9ba41e0ed33f492b1624a48a92&apos;</div></pre></td></tr></table></figure></p><p>返回结果结构如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"isMusician"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"userId"</span>: <span class="number">-1</span>,</div><div class="line">    <span class="attr">"topComments"</span>: [],</div><div class="line">    <span class="attr">"moreHot"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"hotComments"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"user"</span>: &#123;</div><div class="line">                <span class="attr">"locationInfo"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"vipRights"</span>: &#123;</div><div class="line">                    <span class="attr">"musicPackage"</span>: &#123;</div><div class="line">                        <span class="attr">"vipCode"</span>: <span class="number">200</span>,</div><div class="line">                        <span class="attr">"rights"</span>: <span class="literal">true</span></div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                <span class="attr">"userId"</span>: <span class="number">51494587</span>,</div><div class="line">                <span class="attr">"nickname"</span>: <span class="string">"FireBurning_JASON"</span>,</div><div class="line">                <span class="attr">"expertTags"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"userType"</span>: <span class="number">0</span>,</div><div class="line">                <span class="attr">"authStatus"</span>: <span class="number">0</span>,</div><div class="line">                <span class="attr">"remarkName"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"avatarUrl"</span>: <span class="string">"http://p1.music.126.net/8c28fFk1Yqml-CCulWzioA==/7806532557388357.jpg"</span>,</div><div class="line">                <span class="attr">"experts"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"vipType"</span>: <span class="number">10</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">"beReplied"</span>: [],</div><div class="line">            <span class="attr">"pendantData"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"expressionUrl"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"time"</span>: <span class="number">1424242903947</span>,</div><div class="line">            <span class="attr">"liked"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"likedCount"</span>: <span class="number">14377</span>,</div><div class="line">            <span class="attr">"commentId"</span>: <span class="number">11007152</span>,</div><div class="line">            <span class="attr">"content"</span>: <span class="string">"应该说这首歌才是rir的巅峰吧，然后就一直在巅峰"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"total"</span>: <span class="number">6935</span>,</div><div class="line">    <span class="attr">"more"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这个接口就包含我感兴趣的热门评论信息和用户信息。<br>对于简单抓取，这两个接口已经满足我的需求。如果想抓取全部评论，包含分页数据，那么需要分析云音乐的加密算法，其实在混淆后的JS中都有，有专门的文章分析，这里不做过多解释。</p><h3 id="3-代理IP池"><a href="#3-代理IP池" class="headerlink" title="3. 代理IP池"></a>3. 代理IP池</h3><p>有了接口，就可以写代码发送http请求遍历songId进行数据抓取了。<br>但是云音乐做了防刷处理，抓取几万条数据后，开始接口报错，被封了IP。<br>于是想要维护一个代理IP池，每次抓取时从池子中拿一个代理IP进行接口调用，防止IP封禁。</p><h4 id="3-1-代理IP"><a href="#3-1-代理IP" class="headerlink" title="3.1 代理IP"></a>3.1 代理IP</h4><p>来源：可以从淘宝上面买，可以从免费网站抓取。<br>分类：根据匿名程度，可以分为高匿，普通和透明。高匿的代理ip可以屏蔽掉真实IP，目标服务器完全不能感觉到代理IP的存在；普通代理ip能隐藏真实IP，但是目标服务器能感受到代理IP的存在；透明代理IP不能隐藏真实IP。</p><h4 id="3-2-免费代理IP池"><a href="#3-2-免费代理IP池" class="headerlink" title="3.2 免费代理IP池"></a>3.2 免费代理IP池</h4><p>搜索一下代理IP，能找到大量网站提供一些免费代理IP，质量参差不齐，站越大，用的人越多，质量越差。<br>于是搭建免费代理IP池包含两个步骤：<br>（1）从免费代理IP网站抓取代理IP列表<br>（2）验证代理IP可用性<br>不同的代理IP网站抓取和解析的过程也不尽相同，但是不难。<br>验证过程就是使用抓取来的代理IP访问常用网站或者目标网站，如果可用则保留，不可用则丢弃。</p><h3 id="4-实现"><a href="#4-实现" class="headerlink" title="4. 实现"></a>4. 实现</h3><h4 id="4-1-配置文件读取"><a href="#4-1-配置文件读取" class="headerlink" title="4.1 配置文件读取"></a>4.1 配置文件读取</h4><p>项目中使用三个自定义配置参数：请求代理IP列表超时时间，代理IP验证超时时间和真正请求歌曲信息接口超时时间。<br><code>application.yml</code>中配置如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">app:</span></div><div class="line"><span class="attr">  http:</span></div><div class="line"><span class="attr">    proxyLoadTimeout:</span> <span class="number">10</span></div><div class="line"><span class="attr">    proxyValidateTimeout:</span> <span class="number">8</span></div><div class="line"><span class="attr">    songLoadTimeout:</span> <span class="number">15</span></div></pre></td></tr></table></figure></p><p>这里使用<code>ConfigurationProperties</code>注解读取<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description:</span></div><div class="line"><span class="comment"> * http配置参数</span></div><div class="line"><span class="comment"> * 修改此类需要maven重新编译，yml里面才能有提示</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> damon4u</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"app.http"</span>)</div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> proxyLoadTimeout;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> proxyValidateTimeout;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> songLoadTimeout;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>为了能够在yml配置文件中提示自定义参数，需要引入<code>spring-boot-configuration-processor</code>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p>注意每次修改<code>HttpConfig</code>都需要重新maven编译，yml里面才能有提示。</p><h4 id="4-2-使用普通http请求获取动态IP"><a href="#4-2-使用普通http请求获取动态IP" class="headerlink" title="4.2 使用普通http请求获取动态IP"></a>4.2 使用普通http请求获取动态IP</h4><p>网络请求层使用OKHttp + Retrofit2框架。<br>Retrofit2本身是对OKHttp网络请求工具的封装实现，可以方便进行各类HTTP方法请求，对请求参数和返回值进行类型转换。<br>首先引入maven依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- retrofit start --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>retrofit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>converter-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>converter-scalars<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- retrofit end --&gt;</span></div></pre></td></tr></table></figure></p><p><code>retrofit</code>是核心包，<code>converter-jackson</code>和<code>converter-scalars</code>是两个返回值类型转换器，分别对json和普通类型（如string）的返回值进行转换。</p><p>获取动态IP的接口为：<code>https://raw.githubusercontent.com/stamparm/aux/master/fetch-some-list.txt</code><br>返回结果为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"proto"</span>: <span class="string">"http"</span>,</div><div class="line">    <span class="attr">"ip"</span>: <span class="string">"176.62.180.209"</span>,</div><div class="line">    <span class="attr">"country"</span>: <span class="string">"Russian Federation"</span>,</div><div class="line">    <span class="attr">"anonymity"</span>: <span class="string">"high"</span>,</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"elite"</span>,</div><div class="line">    <span class="attr">"port"</span>: <span class="number">63909</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p><p>对于代理IP，统一封装成一个 <code>Proxy</code>实体类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 主键id</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * ip地址或者域名</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String ip;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 端口号</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 协议http、https、socks4等</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> String proto;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(String ip, <span class="keyword">int</span> port, String proto)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ip = ip;</div><div class="line">        <span class="keyword">this</span>.port = port;</div><div class="line">        <span class="keyword">this</span>.proto = proto.toLowerCase();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> proto + <span class="string">"://"</span> + ip + <span class="string">":"</span> + port;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先我们封装一个请求client接口，专门负责发起<code>https://raw.githubusercontent.com/</code>域名下的请求，当然，这里我们只有一个普通的GET请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitProxyClient</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取代理IP列表</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"/stamparm/aux/master/fetch-some-list.txt"</span>)</div><div class="line">    Call&lt;List&lt;Proxy&gt;&gt; loadProxy();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之后，需要想Spring容器注入bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">    * 网络配置参数</span></div><div class="line"><span class="comment">    */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpConfig httpConfig;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpClientFactory</span><span class="params">(HttpConfig httpConfig)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.httpConfig = httpConfig;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">okHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">                .addInterceptor(<span class="keyword">new</span> HttpHeaderInterceptor())</div><div class="line">                .connectTimeout(httpConfig.getProxyLoadTimeout(), TimeUnit.SECONDS)</div><div class="line">                .readTimeout(httpConfig.getProxyLoadTimeout(), TimeUnit.SECONDS).build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> GitProxyClient <span class="title">gitProxyClient</span><span class="params">()</span> </span>&#123;</div><div class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        <span class="comment">//设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性</span></div><div class="line">        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .addConverterFactory(JacksonConverterFactory.create(mapper))</div><div class="line">                .baseUrl(<span class="string">"https://raw.githubusercontent.com/"</span>)</div><div class="line">                .client(okHttpClient())</div><div class="line">                .build().create(GitProxyClient.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>HttpClientFactory</code>先注册一个<code>OkHttpClient</code>bean，设置了超时时间和拦截器，这个请求并不需要设置代理IP。<br>其中<code>HttpHeaderInterceptor</code>很简单，只是添加一些公共头信息，包括一个随机UA：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHeaderInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Request request = chain.request();</div><div class="line">        Request.Builder builder = request.newBuilder();</div><div class="line">        builder.addHeader(<span class="string">"User-Agent"</span>, UAPool.getUA()); <span class="comment">// 写死一个UA池子，每次随机拿一个，这里就不贴了</span></div><div class="line">        builder.addHeader(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>);</div><div class="line">        <span class="keyword">return</span> chain.proceed(builder.build());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之后注册一个<code>GitProxyClient</code>bean，定制了Jackson反序列化时使用的<code>ObjectMapper</code>，设置了该client的基础域名。<br>接下来就可以使用gitProxyClient发起请求获取动态IP列表了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> GitProxyClient gitProxyClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromGit</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 请求</span></div><div class="line">        Response&lt;List&lt;Proxy&gt;&gt; response = gitProxyClient.loadProxy().execute();</div><div class="line">        List&lt;Proxy&gt; proxyList = response.body();</div><div class="line">        <span class="comment">// 过滤</span></div><div class="line">        filterProxy(proxyList);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="4-3-过滤抓取来的代理IP"><a href="#4-3-过滤抓取来的代理IP" class="headerlink" title="4.3 过滤抓取来的代理IP"></a>4.3 过滤抓取来的代理IP</h4><p>从网上抓取来的代理IP一般质量都不高，所以需要进行过滤。<br>常用的方法就是尝试使用代理IP去访问一个常用网站，如百度等，如果在短时间内正常返回则认为可用。<br>开始我也采用了这种方式，访问百度，但是发现可能会出现一种情况，就是百度可以访问，但是访问云音乐接口却出现错误。<br>既然如此，不如一步到位，过滤时就访问歌曲信息接口，如果能正常获取歌曲信息，那么认为代理可用。</p><p>先给出获取歌曲信息的Client：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MusicClient</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取歌曲信息</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> songId 歌曲id</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 页面html</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@GET</span>(<span class="string">"song"</span>)</div><div class="line">    <span class="meta">@Headers</span>(<span class="string">"Referer: http://music.163.com/"</span>)</div><div class="line">    <span class="function">Call&lt;String&gt; <span class="title">songInfo</span><span class="params">(@Query(<span class="string">"id"</span>)</span> <span class="keyword">long</span> songId)</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取评论信息</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> songId    歌曲id</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> params    加密params</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> encSecKey 加密encSecKey</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 评论接口返回体</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"weapi/v1/resource/comments/R_SO_4_&#123;songId&#125;/?csrf_token=d2c9e86c94efabcc4b5a1a6d757d417e"</span>)</div><div class="line">    <span class="meta">@FormUrlEncoded</span></div><div class="line">    <span class="meta">@Headers</span>(<span class="string">"Referer: http://music.163.com/"</span>)</div><div class="line">    <span class="function">Call&lt;CommentResponseBody&gt; <span class="title">comment</span><span class="params">(@Path(<span class="string">"songId"</span>)</span> Long songId,</span></div><div class="line"><span class="function">                                      @<span class="title">Field</span><span class="params">(<span class="string">"params"</span>)</span> String params,</span></div><div class="line"><span class="function">                                      @<span class="title">Field</span><span class="params">(<span class="string">"encSecKey"</span>)</span> String encSecKey)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来需要一个定制OkHttp，添加代理IP，这里创建一个工厂：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProxyClientFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MusicClient <span class="title">musicClient</span><span class="params">(Proxy proxy, <span class="keyword">int</span> timeoutInSecond)</span> </span>&#123;</div><div class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder()</div><div class="line">                .connectTimeout(timeoutInSecond, TimeUnit.SECONDS)</div><div class="line">                .readTimeout(timeoutInSecond, TimeUnit.SECONDS)</div><div class="line">                .addInterceptor(<span class="keyword">new</span> HttpHeaderInterceptor());</div><div class="line">        addProxy(proxy, builder);</div><div class="line">        OkHttpClient okHttpClient = builder.build();</div><div class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        <span class="comment">//设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性</span></div><div class="line">        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</div><div class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">                .addConverterFactory(ScalarsConverterFactory.create())</div><div class="line">                .addConverterFactory(JacksonConverterFactory.create(mapper))</div><div class="line">                .baseUrl(<span class="string">"http://music.163.com/"</span>)</div><div class="line">                .client(okHttpClient)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">return</span> retrofit.create(MusicClient.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置代理</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addProxy</span><span class="params">(Proxy proxy, OkHttpClient.Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (proxy != <span class="keyword">null</span>) &#123;</div><div class="line">            String schemeName = proxy.getProto();</div><div class="line">            java.net.Proxy.Type type = java.net.Proxy.Type.HTTP;</div><div class="line">            <span class="keyword">if</span> (schemeName.startsWith(<span class="string">"socks"</span>)) &#123;</div><div class="line">                type = java.net.Proxy.Type.SOCKS;</div><div class="line">            &#125;</div><div class="line">            builder.proxy(<span class="keyword">new</span> java.net.Proxy(type, <span class="keyword">new</span> InetSocketAddress(proxy.getIp(), proxy.getPort())));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>由于每次请求的代理IP都不同，不能直接注入到bean，而是使用工厂方法，每次请求都重新构造一个<code>OkHttpClient</code>，然后生成<code>MusicClient</code>。<br>注意在添加converterFactory时，先添加<code>ScalarsConverterFactory</code>，再<code>JacksonConverterFactory</code>，原因在doc中：</p><blockquote><p>Because Jackson is so flexible in the types it supports, this converter assumes that it can handle all types. If you are mixing JSON serialization with something else (such as protocol buffers), you must add this instance last to allow the other converters a chance to see their types.</p></blockquote><p>接下来就可以使用代理IP请求歌曲信息了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern NAME_PATTERN = Pattern.compile(<span class="string">"&lt;title&gt;(.*) - 网易云音乐&lt;/title&gt;"</span>);</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern DESCRIPTION_PATTERN = Pattern.compile(<span class="string">"&lt;meta name=\"description\" content=\"(.*)\" /&gt;"</span>);</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pattern IMAGE_PATTERN = Pattern.compile(<span class="string">"&lt;meta property=\"og:image\" content=\"(.*)\" /&gt;"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 获取歌曲信息</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> songId 歌曲id</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到，返回：歌曲名称 - 歌手名称；否则返回null</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> Song <span class="title">getSongInfo</span><span class="params">(<span class="keyword">long</span> songId, Proxy proxy, <span class="keyword">int</span> timeoutInSecond)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Response&lt;String&gt; response = HttpProxyClientFactory.musicClient(proxy, timeoutInSecond)</div><div class="line">            .songInfo(songId).execute();</div><div class="line">    Preconditions.checkNotNull(response);</div><div class="line">    String songInfo = response.body();</div><div class="line">    Preconditions.checkArgument(StringUtils.isNotBlank(songInfo));</div><div class="line">    Matcher nameMatcher = NAME_PATTERN.matcher(songInfo);</div><div class="line">    Matcher descriptionMatcher = DESCRIPTION_PATTERN.matcher(songInfo);</div><div class="line">    Matcher imageMatcher = IMAGE_PATTERN.matcher(songInfo);</div><div class="line">    String name = <span class="string">""</span>;</div><div class="line">    String description = <span class="string">""</span>;</div><div class="line">    String image = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (nameMatcher.find()) &#123;</div><div class="line">        name = nameMatcher.group(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (descriptionMatcher.find()) &#123;</div><div class="line">        description = descriptionMatcher.group(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (imageMatcher.find()) &#123;</div><div class="line">        image = imageMatcher.group(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(name)) &#123;</div><div class="line">        Song song = <span class="keyword">new</span> Song();</div><div class="line">        song.setSongId(songId);</div><div class="line">        song.setName(name);</div><div class="line">        song.setDescription(description);</div><div class="line">        song.setImage(image);</div><div class="line">        song.setCreateTime(<span class="keyword">new</span> Date());</div><div class="line">        logger.info(<span class="string">"song=&#123;&#125;"</span>, song);</div><div class="line">        <span class="keyword">return</span> song;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>剩下的过滤工作也就简单了，对于爬去来的代理IP列表，使用多个线程去过滤一下就好了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">filterProxy</span><span class="params">(List&lt;Proxy&gt; proxyList)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(proxyList)) &#123;</div><div class="line">        <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(proxyList.size());</div><div class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line">        proxyList.forEach(proxy -&gt; executorService.execute(<span class="keyword">new</span> FilterJob(proxy, latch)));</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            latch.await();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            LOGGER.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line">        executorService.shutdownNow();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterJob</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Proxy proxy;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CountDownLatch latch;</div><div class="line"></div><div class="line">    FilterJob(Proxy proxy, CountDownLatch latch) &#123;</div><div class="line">        <span class="keyword">this</span>.proxy = proxy;</div><div class="line">        <span class="keyword">this</span>.latch = latch;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 先只要http类型的</span></div><div class="line">            <span class="keyword">if</span> (proxy.getProto().startsWith(<span class="string">"http"</span>)</div><div class="line">                    &amp;&amp; commentLoader.getSongInfo(<span class="number">209996</span>, proxy, httpConfig.getProxyValidateTimeout()) != <span class="keyword">null</span>) &#123;</div><div class="line">                LOGGER.info(<span class="string">"================&gt; &#123;&#125;"</span>, proxy);</div><div class="line">                proxyDao.save(<span class="keyword">new</span> Proxy(proxy.getIp(), proxy.getPort(), proxy.getProto()));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(e.getMessage());</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            latch.countDown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="4-4-定时抓取"><a href="#4-4-定时抓取" class="headerlink" title="4.4 定时抓取"></a>4.4 定时抓取</h4><p>上面我们实现了一次代理IP抓取，而抓取来的IP也会失效，所以我们需要定时抓取，更新代理IP池。<br>定时任务可以使用Spring的Schedule注解实现，也可以使用quartz，这里使用quartz。<br>引入依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><p><code>application.yml</code>添加配置：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  quartz:</span></div><div class="line"><span class="attr">    properties:</span></div><div class="line"><span class="attr">      org:</span></div><div class="line"><span class="attr">        quartz:</span></div><div class="line"><span class="attr">          scheduler:</span></div><div class="line"><span class="attr">            instanceName:</span> <span class="string">proxyScheduler</span></div><div class="line"><span class="attr">          threadPool:</span></div><div class="line"><span class="attr">            class:</span> <span class="string">org.quartz.simpl.SimpleThreadPool</span></div><div class="line"><span class="attr">            threadCount:</span> <span class="number">10</span></div><div class="line"><span class="attr">            threadPriority:</span> <span class="number">5</span></div><div class="line"><span class="attr">    job-store-type:</span> <span class="string">MEMORY</span></div></pre></td></tr></table></figure></p><p>这里使用简单的内存存储job，也可以使用数据库，配置项会麻烦些。<br>然后创建一个定时任务job，继承<code>QuartzJobBean</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyLoadJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ProxyLoadJob.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ProxyLoader proxyLoader;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"ProxyLoadJob start."</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            proxyLoader.loadProxy();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOGGER.error(e.getMessage());</div><div class="line">        &#125;</div><div class="line">        LOGGER.info(<span class="string">"ProxyLoadJob end."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>有了任务，还要将它调度起来，我想20分钟跑一次：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobScheduler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JOB_NAME_PROXY_LOAD = <span class="string">"proxyLoadJob"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GROUP_NAME_PROXY = <span class="string">"proxyLoadGroup"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">proxyJob</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> JobBuilder.newJob(ProxyLoadJob.class)</div><div class="line">                .withIdentity(JOB_NAME_PROXY_LOAD, GROUP_NAME_PROXY)</div><div class="line">                .storeDurably()</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">proxyJobTrigger</span><span class="params">()</span> </span>&#123;</div><div class="line">        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"0 0/20 * * * ?"</span>);</div><div class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger()</div><div class="line">                .withSchedule(scheduleBuilder)</div><div class="line">                .withIdentity(JOB_NAME_PROXY_LOAD, GROUP_NAME_PROXY)</div><div class="line">                .forJob(proxyJob())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里我们先注册一个<code>JobDetail</code>，需要一个名字和分组，然后设置为durably，即没有trigger指向时，也保留。<br>接下来注册一个trigger去触发上面的job，设置cron表达式，绑定job即可。</p><h4 id="4-5-定时删除失效IP"><a href="#4-5-定时删除失效IP" class="headerlink" title="4.5 定时删除失效IP"></a>4.5 定时删除失效IP</h4><p>上面我们实现了定时抓取新代理IP的功能，接下来还需要定时从库中删除失效的代理IP，不能光等到使用时再删除。<br>方法是从库中读取所有代理IP（如果代理IP量很大，可以分页处理），然后启动多个任务去校验代理IP有效性，将无效的删除：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateFromDb</span><span class="params">()</span> </span>&#123;</div><div class="line">      List&lt;Proxy&gt; allProxy = proxyDao.getAllProxy();</div><div class="line">      <span class="keyword">if</span> (CollectionUtils.isNotEmpty(allProxy)) &#123;</div><div class="line">          <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(allProxy.size());</div><div class="line">          ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">5</span>);</div><div class="line">          allProxy.forEach(proxy -&gt; executorService.execute(<span class="keyword">new</span> ValidateJob(proxy, latch)));</div><div class="line">          <span class="keyword">for</span> (Proxy proxy : allProxy) &#123;</div><div class="line">              executorService.execute(<span class="keyword">new</span> ValidateJob(proxy, latch));</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              latch.await();</div><div class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">              LOGGER.error(e.getMessage());</div><div class="line">          &#125;</div><div class="line">          executorService.shutdownNow();</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ValidateJob</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">private</span> Proxy proxy;</div><div class="line"></div><div class="line">      <span class="keyword">private</span> CountDownLatch latch;</div><div class="line"></div><div class="line">      ValidateJob(Proxy proxy, CountDownLatch latch) &#123;</div><div class="line">          <span class="keyword">this</span>.proxy = proxy;</div><div class="line">          <span class="keyword">this</span>.latch = latch;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              <span class="keyword">if</span> (commentLoader.getSongInfo(<span class="number">209996</span>, proxy, httpConfig.getProxyValidateTimeout()) == <span class="keyword">null</span>) &#123;</div><div class="line">                  proxyDao.delete(proxy.getId());</div><div class="line">                  LOGGER.error(<span class="string">"disable proxy=&#123;&#125;"</span>, proxy);</div><div class="line">              &#125;</div><div class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">              LOGGER.error(e.getMessage());</div><div class="line">          &#125; <span class="keyword">finally</span> &#123;</div><div class="line">              latch.countDown();</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>同样需要一个定时任务，15分钟执行一次即可，代码与上面抓取代理任务类似。</p><h4 id="4-6-使用代理IP获取歌曲信息"><a href="#4-6-使用代理IP获取歌曲信息" class="headerlink" title="4.6 使用代理IP获取歌曲信息"></a>4.6 使用代理IP获取歌曲信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommentLoader</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CommentLoader.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern NAME_PATTERN = Pattern.compile(<span class="string">"&lt;title&gt;(.*) - 网易云音乐&lt;/title&gt;"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern DESCRIPTION_PATTERN = Pattern.compile(<span class="string">"&lt;meta name=\"description\" content=\"(.*)\" /&gt;"</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern IMAGE_PATTERN = Pattern.compile(<span class="string">"&lt;meta property=\"og:image\" content=\"(.*)\" /&gt;"</span>);</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> SongDao songDao;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> UserDao userDao;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> CommentDao commentDao;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> ProxyDao proxyDao;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HttpConfig httpConfig;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取歌曲和评论信息</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> start 歌曲id起始</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> end 歌曲id结束</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadSongs</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> songId = start; songId &lt;= end; songId++) &#123;</div><div class="line">            Proxy proxy = getRandomProxy();</div><div class="line">            Song songInfo = getSongInfo(songId, proxy, httpConfig.getSongLoadTimeout());</div><div class="line">            <span class="keyword">if</span> (songInfo == <span class="keyword">null</span>) &#123; <span class="comment">// 重试一次</span></div><div class="line">                proxyDao.delete(proxy.getId());</div><div class="line">                proxy = getRandomProxy();</div><div class="line">                songInfo = getSongInfo(songId, proxy, httpConfig.getSongLoadTimeout());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (songInfo == <span class="keyword">null</span>) &#123; <span class="comment">// 重试一次</span></div><div class="line">                proxyDao.delete(proxy.getId());</div><div class="line">                proxy = getRandomProxy();</div><div class="line">                songInfo = getSongInfo(songId, proxy, httpConfig.getSongLoadTimeout());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (songInfo == <span class="keyword">null</span>) &#123;</div><div class="line">                proxyDao.delete(proxy.getId());</div><div class="line">                logger.error(<span class="string">"songInfo is null. songId=&#123;&#125;"</span>, songId);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (songInfo != <span class="keyword">null</span>) &#123;</div><div class="line">                loadCommentInfo(songInfo, proxy);</div><div class="line">            &#125;</div><div class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">50</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取歌曲信息</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> songId 歌曲id</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 如果找到，返回：歌曲名称 - 歌手名称；否则返回null</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Song <span class="title">getSongInfo</span><span class="params">(<span class="keyword">long</span> songId, Proxy proxy, <span class="keyword">int</span> timeoutInSecond)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Response&lt;String&gt; response = HttpProxyClientFactory.musicClient(proxy, timeoutInSecond)</div><div class="line">                .songInfo(songId).execute();</div><div class="line">        Preconditions.checkNotNull(response);</div><div class="line">        String songInfo = response.body();</div><div class="line">        Preconditions.checkArgument(StringUtils.isNotBlank(songInfo));</div><div class="line">        Matcher nameMatcher = NAME_PATTERN.matcher(songInfo);</div><div class="line">        Matcher descriptionMatcher = DESCRIPTION_PATTERN.matcher(songInfo);</div><div class="line">        Matcher imageMatcher = IMAGE_PATTERN.matcher(songInfo);</div><div class="line">        String name = <span class="string">""</span>;</div><div class="line">        String description = <span class="string">""</span>;</div><div class="line">        String image = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (nameMatcher.find()) &#123;</div><div class="line">            name = nameMatcher.group(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (descriptionMatcher.find()) &#123;</div><div class="line">            description = descriptionMatcher.group(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (imageMatcher.find()) &#123;</div><div class="line">            image = imageMatcher.group(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(name)) &#123;</div><div class="line">            Song song = <span class="keyword">new</span> Song();</div><div class="line">            song.setSongId(songId);</div><div class="line">            song.setName(name);</div><div class="line">            song.setDescription(description);</div><div class="line">            song.setImage(image);</div><div class="line">            song.setCreateTime(<span class="keyword">new</span> Date());</div><div class="line">            logger.info(<span class="string">"song=&#123;&#125;"</span>, song);</div><div class="line">            <span class="keyword">return</span> song;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取歌曲评论</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> song  歌曲信息</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> proxy</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadCommentInfo</span><span class="params">(Song song, Proxy proxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        Long songId = song.getSongId();</div><div class="line">        String params = <span class="string">"flQdEgSsTmFkRagRN2ceHMwk6lYVIMro5auxLK/JywlqdjeNvEtiWDhReFI+QymePGPLvPnIuVi3dfsDuqEJW204VdwvX+gr3uiRBeSFuOm1VUSJ1HqOc+nJCh0j6WGUbWuJC5GaHTEE4gcpWXX36P4Eu4djoQBzoqdsMbCwoolb2/WrYw/N2hehuwBHO4Oz"</span>;</div><div class="line">        String encSecKey = <span class="string">"0263b1cd3b0a9b621a819b73e588e1cc5709349b21164dc45ab760e79858bb712986ea064dbfc41669e527b767f02da7511ac862cbc54ea7d164fc65e0359962273616e68e694453fb6820fa36dd9915b2b0f60dadb0a6022b2187b9ee011b35d82a1c0ed8ba0dceb877299eca944e80b1e74139f0191adf71ca536af7d7ec25"</span>;</div><div class="line">        Response&lt;CommentResponseBody&gt; response = HttpProxyClientFactory.musicClient(proxy, httpConfig.getSongLoadTimeout()).comment(songId, params, encSecKey).execute();</div><div class="line">        <span class="keyword">long</span> commentCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</div><div class="line">            CommentResponseBody commentResponseBody = response.body();</div><div class="line">            <span class="keyword">if</span> (commentResponseBody != <span class="keyword">null</span>) &#123;</div><div class="line">                commentCount = commentResponseBody.getTotal();</div><div class="line">                List&lt;CommentResponse&gt; hotComments = commentResponseBody.getHotComments();</div><div class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(hotComments)) &#123;</div><div class="line">                    <span class="keyword">for</span> (CommentResponse commentResponse : hotComments) &#123;</div><div class="line">                        Long userId = <span class="number">0L</span>;</div><div class="line">                        User user = commentResponse.getUser();</div><div class="line">                        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</div><div class="line">                            userId = user.getUserId();</div><div class="line">                            userDao.save(user);</div><div class="line">                        &#125;</div><div class="line">                        Long beRepliedUserId = <span class="number">0L</span>;</div><div class="line">                        String beRepliedContent = <span class="string">""</span>;</div><div class="line">                        List&lt;CommentReplied&gt; beRepliedList = commentResponse.getBeReplied();</div><div class="line">                        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(beRepliedList)) &#123;</div><div class="line">                            CommentReplied commentReplied = beRepliedList.get(<span class="number">0</span>);</div><div class="line">                            User repliedUser = commentReplied.getUser();</div><div class="line">                            <span class="keyword">if</span> (repliedUser != <span class="keyword">null</span>) &#123;</div><div class="line">                                beRepliedUserId = repliedUser.getUserId();</div><div class="line">                                userDao.save(repliedUser);</div><div class="line">                            &#125;</div><div class="line">                            beRepliedContent = commentReplied.getContent();</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (commentCount &gt; <span class="number">1000</span>) &#123;</div><div class="line">                            <span class="comment">// 总评论数少于1000的歌曲就扔掉了</span></div><div class="line">                            Comment comment = <span class="keyword">new</span> Comment();</div><div class="line">                            comment.setCommentId(commentResponse.getCommentId());</div><div class="line">                            comment.setSongId(songId);</div><div class="line">                            comment.setLikedCount(commentResponse.getLikedCount());</div><div class="line">                            comment.setContent(commentResponse.getContent());</div><div class="line">                            comment.setUserId(userId);</div><div class="line">                            comment.setBeRepliedUserId(beRepliedUserId);</div><div class="line">                            comment.setBeRepliedContent(beRepliedContent);</div><div class="line">                            comment.setCommentTime(<span class="keyword">new</span> Date(commentResponse.getTime()));</div><div class="line">                            comment.setCreateTime(<span class="keyword">new</span> Date());</div><div class="line">                            commentDao.save(comment);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        song.setCommentCount(commentCount);</div><div class="line">        songDao.save(song);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 查询一个随机代理</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Proxy <span class="title">getRandomProxy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = proxyDao.count();</div><div class="line">        <span class="keyword">return</span> proxyDao.getByIndex(ThreadLocalRandom.current().nextInt(count));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-初衷&quot;&gt;&lt;a href=&quot;#1-初衷&quot; class=&quot;headerlink&quot; title=&quot;1. 初衷&quot;&gt;&lt;/a&gt;1. 初衷&lt;/h3&gt;&lt;p&gt;作为云音乐的死忠用户，在大量版权丢失的情况下，依然坚守阵地，除了对UI的喜欢，还有就是歌曲下面精彩的评论信息了。&lt;br&gt;翻过很多热评后，就想把这些数据抓取下来。有了数据，就可以做数据分析。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
      <category term="spring" scheme="https://damon4u.github.io/categories/java/spring/"/>
    
    
      <category term="spring" scheme="https://damon4u.github.io/tags/spring/"/>
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>BigDecimal精度</title>
    <link href="https://damon4u.github.io//blog/2018/09/BigDecimal%E7%B2%BE%E5%BA%A6.html"/>
    <id>https://damon4u.github.io//blog/2018/09/BigDecimal精度.html</id>
    <published>2018-09-12T08:41:50.000Z</published>
    <updated>2018-09-13T14:15:58.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-构造函数的坑"><a href="#1-构造函数的坑" class="headerlink" title="1. 构造函数的坑"></a>1. 构造函数的坑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">      <span class="keyword">double</span> number = <span class="number">6302079.05</span>;</div><div class="line">      BigDecimal bigDecimalFromDouble = <span class="keyword">new</span> BigDecimal(number);</div><div class="line">      LOGGER.info(<span class="string">"bigDecimalFromDouble=&#123;&#125;"</span>, bigDecimalFromDouble);</div><div class="line">      BigDecimal bigDecimalFromString = <span class="keyword">new</span> BigDecimal(String.valueOf(number)) ;</div><div class="line">      LOGGER.info(<span class="string">"bigDecimalFromString=&#123;&#125;"</span>, bigDecimalFromString);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalFromDouble=6302079.049999999813735485076904296875</div><div class="line">bigDecimalFromString=6302079.05</div></pre></td></tr></table></figure></p><p>可以看到，直接使用double作为参数构造BigDecimal时，会丢失精度。<br>所以推荐的是先将double转化为字符串，然后赋值给构造函数。</p><a id="more"></a><h3 id="2-数值计算丢失精度"><a href="#2-数值计算丢失精度" class="headerlink" title="2. 数值计算丢失精度"></a>2. 数值计算丢失精度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDecimalCompute</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalFromString = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString=&#123;&#125;"</span>, bigDecimalFromString);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString floatValue=&#123;&#125;"</span>, bigDecimalFromString.floatValue());</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString floatValue*100=&#123;&#125;"</span>, (<span class="keyword">int</span>) (bigDecimalFromString.floatValue() * <span class="number">100</span>));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString doubleValue=&#123;&#125;"</span>, bigDecimalFromString.doubleValue());</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString doubleValue*100=&#123;&#125;"</span>, (<span class="keyword">int</span>) (bigDecimalFromString.doubleValue() * <span class="number">100</span>));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalFromString multiply(100)=&#123;&#125;"</span>, bigDecimalFromString.multiply(<span class="keyword">new</span> BigDecimal(<span class="string">"100"</span>)).intValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bigDecimalFromString=6302079.05</div><div class="line">bigDecimalFromString floatValue=6302079.0</div><div class="line">bigDecimalFromString floatValue*100=630207872</div><div class="line">bigDecimalFromString doubleValue=6302079.05</div><div class="line">bigDecimalFromString doubleValue*100=630207905</div><div class="line">bigDecimalFromString multiply(100)=630207905</div></pre></td></tr></table></figure></p><p>尝试调用<code>floatValue()</code>方法获取浮点值时，内部其实会将double转化为float，导致精度丢失。<br>所以要求使用BigDecimal提供的计算方法做四则运算，最后将结果返回指定数值类型。</p><h3 id="3-四舍五入"><a href="#3-四舍五入" class="headerlink" title="3. 四舍五入"></a>3. 四舍五入</h3><h4 id="3-1-ROUND-UP"><a href="#3-1-ROUND-UP" class="headerlink" title="3.1 ROUND_UP"></a>3.1 ROUND_UP</h4><blockquote><p>Rounding mode to round away from zero. Always increments the digit prior to a nonzero discarded fraction.</p></blockquote><p>不关心正负的无脑向上取整，远离0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_UP=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_UP));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_UP=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_UP));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_UP=6302079.1</div><div class="line">bigDecimalNegative ROUND_UP=-6302079.1</div></pre></td></tr></table></figure></p><h4 id="3-2-ROUND-DOWN"><a href="#3-2-ROUND-DOWN" class="headerlink" title="3.2 ROUND_DOWN"></a>3.2 ROUND_DOWN</h4><blockquote><p>Rounding mode to round towards zero. Never increments the digit prior to a discarded fraction (i.e., truncates).</p></blockquote><p>不关心正负的无脑向下取整，靠近0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_DOWN=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_DOWN));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_DOWN=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_DOWN));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_DOWN=6302079.0</div><div class="line">bigDecimalNegative ROUND_DOWN=-6302079.0</div></pre></td></tr></table></figure></p><h4 id="3-3-ROUND-CEILING"><a href="#3-3-ROUND-CEILING" class="headerlink" title="3.3 ROUND_CEILING"></a>3.3 ROUND_CEILING</h4><blockquote><p>Rounding mode to round towards positive infinity. If the BigDecimal is positive, behaves as for ROUND_UP; if negative, behaves as for ROUND_DOWN.</p></blockquote><p>向正无穷取整，如果是正值，那么表现跟ROUND_UP一样，如果是负值，那么表现跟ROUND_DOWN一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_CEILING=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_CEILING));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_CEILING=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_CEILING));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_CEILING=6302079.1</div><div class="line">bigDecimalNegative ROUND_CEILING=-6302079.0</div></pre></td></tr></table></figure></p><h4 id="3-4-ROUND-FLOOR"><a href="#3-4-ROUND-FLOOR" class="headerlink" title="3.4 ROUND_FLOOR"></a>3.4 ROUND_FLOOR</h4><blockquote><p>Rounding mode to round towards negative infinity. If the BigDecimal is positive, behave as for ROUND_DOWN; if negative, behave as for ROUND_UP.</p></blockquote><p>向负无穷取整，如果是正值，那么表现跟ROUND_DOWN一样，如果是负值，那么表现跟ROUND_UP一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_FLOOR=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_FLOOR));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_FLOOR=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_FLOOR));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_FLOOR=6302079.0</div><div class="line">bigDecimalNegative ROUND_FLOOR=-6302079.1</div></pre></td></tr></table></figure></p><h4 id="3-5-ROUND-HALF-UP"><a href="#3-5-ROUND-HALF-UP" class="headerlink" title="3.5 ROUND_HALF_UP"></a>3.5 ROUND_HALF_UP</h4><blockquote><p>Rounding mode to round towards “nearest neighbor” unless both neighbors are equidistant, in which case round up. Behaves as for ROUND_UP if the discarded fraction is ≥ 0.5; otherwise, behaves as for ROUND_DOWN.</p></blockquote><p>不关心正负的无脑四舍五入，如果是5，那么进位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_HALF_UP=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_UP));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_HALF_UP=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_UP));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_HALF_UP=6302079.1</div><div class="line">bigDecimalNegative ROUND_HALF_UP=-6302079.1</div></pre></td></tr></table></figure></p><h4 id="3-6-ROUND-HALF-DOWN"><a href="#3-6-ROUND-HALF-DOWN" class="headerlink" title="3.6 ROUND_HALF_DOWN"></a>3.6 ROUND_HALF_DOWN</h4><blockquote><p>Rounding mode to round towards “nearest neighbor” unless both neighbors are equidistant, in which case round down. Behaves as for ROUND_UP if the discarded fraction is &gt; 0.5; otherwise, behaves as for ROUND_DOWN.</p></blockquote><p>不关心正负的无脑四舍五入，如果是5，那么舍掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_DOWN));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_DOWN));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_HALF_DOWN=6302079.0</div><div class="line">bigDecimalNegative ROUND_HALF_DOWN=-6302079.0</div></pre></td></tr></table></figure></p><h4 id="3-7-ROUND-HALF-EVEN"><a href="#3-7-ROUND-HALF-EVEN" class="headerlink" title="3.7 ROUND_HALF_EVEN"></a>3.7 ROUND_HALF_EVEN</h4><blockquote><p>Rounding mode to round towards the “nearest neighbor” unless both neighbors are equidistant, in which case, round towards the even neighbor. Behaves as for ROUND_HALF_UP if the digit to the left of the discarded fraction is odd; behaves as for ROUND_HALF_DOWN if it’s even.</p></blockquote><p>不关心正负的无脑四舍五入，如果是5，那么看左边数字奇偶性，如果左边数字是奇数，那么进位，如果是偶数，那么舍掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBigDecimalRound</span><span class="params">()</span> </span>&#123;</div><div class="line">    BigDecimal bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.05"</span>) ;</div><div class="line">    BigDecimal bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.05"</span>) ;</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive=&#123;&#125;"</span>, bigDecimalPositive);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative=&#123;&#125;"</span>, bigDecimalNegative);</div><div class="line"></div><div class="line">    <span class="comment">// 最后一位的前一位是偶数，那么ROUND_HALF_EVEN等同与ROUND_HALF_DOWN</span></div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_EVEN));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_EVEN));</div><div class="line"></div><div class="line">    <span class="comment">// 将最后一位的前一位变成奇数，那么ROUND_HALF_EVEN等同与ROUND_HALF_UP</span></div><div class="line">    bigDecimalPositive = <span class="keyword">new</span> BigDecimal(<span class="string">"6302079.15"</span>);</div><div class="line">    bigDecimalNegative = <span class="keyword">new</span> BigDecimal(<span class="string">"-6302079.15"</span>);</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalPositive ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalPositive.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_EVEN));</div><div class="line">    LOGGER.info(<span class="string">"bigDecimalNegative ROUND_HALF_DOWN=&#123;&#125;"</span>, bigDecimalNegative.setScale(<span class="number">1</span>, BigDecimal.ROUND_HALF_EVEN));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bigDecimalPositive ROUND_HALF_DOWN=6302079.0</div><div class="line">bigDecimalNegative ROUND_HALF_DOWN=-6302079.0</div><div class="line">bigDecimalPositive ROUND_HALF_DOWN=6302079.2</div><div class="line">bigDecimalNegative ROUND_HALF_DOWN=-6302079.2</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-构造函数的坑&quot;&gt;&lt;a href=&quot;#1-构造函数的坑&quot; class=&quot;headerlink&quot; title=&quot;1. 构造函数的坑&quot;&gt;&lt;/a&gt;1. 构造函数的坑&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BigDecimalTest&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;6302079.05&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      BigDecimal bigDecimalFromDouble = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigDecimal(number);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      LOGGER.info(&lt;span class=&quot;string&quot;&gt;&quot;bigDecimalFromDouble=&amp;#123;&amp;#125;&quot;&lt;/span&gt;, bigDecimalFromDouble);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      BigDecimal bigDecimalFromString = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigDecimal(String.valueOf(number)) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      LOGGER.info(&lt;span class=&quot;string&quot;&gt;&quot;bigDecimalFromString=&amp;#123;&amp;#125;&quot;&lt;/span&gt;, bigDecimalFromString);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bigDecimalFromDouble=6302079.049999999813735485076904296875&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bigDecimalFromString=6302079.05&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，直接使用double作为参数构造BigDecimal时，会丢失精度。&lt;br&gt;所以推荐的是先将double转化为字符串，然后赋值给构造函数。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>git从某一次提交上创建分支</title>
    <link href="https://damon4u.github.io//blog/2018/09/git%E4%BB%8E%E6%9F%90%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4%E4%B8%8A%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF.html"/>
    <id>https://damon4u.github.io//blog/2018/09/git从某一次提交上创建分支.html</id>
    <published>2018-09-11T08:41:50.000Z</published>
    <updated>2018-09-11T14:34:38.830Z</updated>
    
    <content type="html"><![CDATA[<p>从某一次提交上创建分支使用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch &lt;branch name&gt; &lt;start point&gt;</div></pre></td></tr></table></figure></p><p>平时我们是在当前分支的最新代码上迁出新分支，那么可以忽略后面的<code>&lt;start point&gt;</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch new_branch</div></pre></td></tr></table></figure><p>假如我们想在某一次提交的基础上迁出新分支，那么就需要使用<code>&lt;start point&gt;</code>了，写上该提交的SHA值。<br><a id="more"></a></p><p>举例：<br>我们已经有了三次提交，提交历史如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~/git/ [master] git l</div><div class="line">* 666898f (HEAD -&gt; master) c; - damon4u, 2 seconds ago</div><div class="line">* e713719 b - damon4u, 20 seconds ago</div><div class="line">* 36acecc a - damon4u, 30 seconds ago</div></pre></td></tr></table></figure></p><p>假如我们想从b上面迁出新分支，可以这么做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] git branch new_branch e713719</div></pre></td></tr></table></figure></p><p>用b提交的SHA做参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] git branch</div><div class="line">* master</div><div class="line">  new_branch</div><div class="line"> ~/git/ [master] git checkout new_branch</div><div class="line">Switched to branch &apos;new_branch&apos;</div><div class="line"> ~/git/ [new_branch] git l</div><div class="line">* 666898f (master) c; - damon4u, 3 minutes ago</div><div class="line">* e713719 (HEAD -&gt; new_branch) b - damon4u, 4 minutes ago</div><div class="line">* 36acecc a - damon4u, 4 minutes ago</div></pre></td></tr></table></figure></p><p>发现，HEAD的指向b提交的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从某一次提交上创建分支使用如下命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git branch &amp;lt;branch name&amp;gt; &amp;lt;start point&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;平时我们是在当前分支的最新代码上迁出新分支，那么可以忽略后面的&lt;code&gt;&amp;lt;start point&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git branch new_branch&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假如我们想在某一次提交的基础上迁出新分支，那么就需要使用&lt;code&gt;&amp;lt;start point&amp;gt;&lt;/code&gt;了，写上该提交的SHA值。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="https://damon4u.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://damon4u.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git回滚</title>
    <link href="https://damon4u.github.io//blog/2018/09/git%E5%9B%9E%E6%BB%9A.html"/>
    <id>https://damon4u.github.io//blog/2018/09/git回滚.html</id>
    <published>2018-09-11T08:41:50.000Z</published>
    <updated>2018-09-11T14:37:51.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-git-revert"><a href="#1-git-revert" class="headerlink" title="1.git revert"></a>1.git revert</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert &lt;commit&gt;</div></pre></td></tr></table></figure><p>命令的含义是:</p><blockquote><p>Given one or more existing commits, revert the changes that the related patches introduce, and record some new commits that record them. This requires your working tree to be clean (no modifications from the HEAD commit).</p><p>Note: git revert is used to record some new commits to reverse the effect of some earlier commits (often only a faulty one).<br>If you want to throw away all uncommitted changes in your working directory, you should see <code>git-reset</code>, particularly the <code>--hard</code> option.<br>If you want to extract specific files as they were in another commit, you should see <code>git-checkout</code>, specifically the <code>git checkout &lt;commit&gt; -- &lt;filename&gt;</code> syntax.<br>Take care with these alternatives as both will discard uncommitted changes in your working directory.</p></blockquote><a id="more"></a><p>这里解释的很清楚，<strong>revert命令会撤销某一次提交引入的修改，并且会产生一次新的提交。</strong><br>下面的Note部分对reset、checkout做了区分：<br>如果你想把工作区没有提交的修改扔掉，那么使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard</div></pre></td></tr></table></figure></p><p>如果你想检出某一次提交版本的文件，那么使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout &lt;commit&gt; -- &lt;filename&gt;</div></pre></td></tr></table></figure></p><p>对于revert命令，需要注意一点，如果使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert HEAD~1</div></pre></td></tr></table></figure></p><p>那么只会撤销上上次这一次提交的修改，而不会撤销上次提交的修改。它并不是回退到HEAD~1前的版本。<br>举个例子：<br>假如现在有三次提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* c5ce0d0 (HEAD -&gt; master) c - damon4u, 9 seconds ago</div><div class="line">* 131ffaa b - damon4u, 25 seconds ago</div><div class="line">* d8f0aa0 a - damon4u, 33 seconds ago</div></pre></td></tr></table></figure></p><p>然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert HEAD^</div></pre></td></tr></table></figure></p><p>撤销上上次的修改，执行后会让我们写备注信息，从这里我们可以看到，这次revert会撤销131ffaa这次修改，这次撤销会删除b。<br>注意，只删除了b，没有说删除c，也就是说，上次的修改是不会收到影响的，不会回到a那次提交。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Revert &quot;b&quot;</div><div class="line"></div><div class="line">This reverts commit 131ffaa420d3e27dddc10caa3a089fb8679c034a.</div><div class="line"></div><div class="line"># Please enter the commit message for your changes. Lines starting</div><div class="line"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</div><div class="line"># On branch master</div><div class="line"># Changes to be committed:</div><div class="line">#       deleted:    b</div><div class="line">#</div></pre></td></tr></table></figure></p><p>再看一下日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* 16481c1 (HEAD -&gt; master) Revert &quot;b&quot; - damon4u, 3 minutes ago</div><div class="line">* c5ce0d0 c - damon4u, 4 minutes ago</div><div class="line">* 131ffaa b - damon4u, 4 minutes ago</div><div class="line">* d8f0aa0 a - damon4u, 5 minutes ago</div></pre></td></tr></table></figure></p><p>多了一条回滚的提交。</p><p>线上推荐使用revert来撤销最近一次提交，回滚到上一个版本，因为不会影响历史记录，只是新增一次提交，比较安全。<br>但是如果要回滚到指定commit，那么可以使用reset命令或者checkout命令，下面介绍。</p><h3 id="2-git-reset"><a href="#2-git-reset" class="headerlink" title="2.git reset"></a>2.git reset</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset [&lt;commit&gt;]</div></pre></td></tr></table></figure><blockquote><p>This form resets the current branch head to <code>&lt;commit&gt;</code> and possibly updates the index (resetting it to the tree of <code>&lt;commit&gt;</code>) and the working tree depending on <code>&lt;mode&gt;</code>. If <code>&lt;mode&gt;</code> is omitted, defaults to “<code>--mixed</code>“. The <code>&lt;mode&gt;</code> must be one of the following:</p></blockquote><p>这里解释的也比较明白，使用reset命令可以将当前分支的HEAD指向某一次提交，并更新当前的工作区到那次提交，mode模式跟之前撤销工作区修改时一样，默认是–mixed，即恢复到add后，没提交前。</p><p>还用上次的例子：<br>我们先把b请回来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert HEAD</div></pre></td></tr></table></figure></p><p>这个命令是撤销上一次提交，还记得，上次提交把b删了，那么撤销它，就能把b找回来。</p><p>假如我们发现b和c都没有用，想回到只有a的时候，那么先在日志中找到只有a的那次提交SHA值<code>d8f0aa0</code>，然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset d8f0aa0</div></pre></td></tr></table></figure></p><p>这样，就只有a了，并且历史也被我们篡改，看不到b和c的提交历史啦。<br>所以说，这样做还是很危险的。适合本地操作。<br>如果想找回b和c怎么办呢？<br>先找到包含bhec的SHA<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reflog</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d8f0aa0 HEAD@&#123;0&#125;: reset: moving to d8f0aa0</div><div class="line">0bc9d5a HEAD@&#123;1&#125;: revert: Revert &quot;Revert &quot;a&quot;&quot;</div><div class="line">97adb10 HEAD@&#123;2&#125;: revert: Revert &quot;a&quot;</div><div class="line">c972a81 HEAD@&#123;3&#125;: revert: Revert &quot;Revert &quot;b&quot;&quot;</div><div class="line">16481c1 HEAD@&#123;4&#125;: revert: Revert &quot;b&quot;</div><div class="line">c5ce0d0 HEAD@&#123;5&#125;: commit: c</div><div class="line">131ffaa HEAD@&#123;6&#125;: commit: b</div><div class="line">d8f0aa0 HEAD@&#123;7&#125;: commit (initial): a</div></pre></td></tr></table></figure><p>也就是<code>c5ce0d0</code>，<br>然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset c5ce0d0</div></pre></td></tr></table></figure></p><p>就找回了b和c。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-git-revert&quot;&gt;&lt;a href=&quot;#1-git-revert&quot; class=&quot;headerlink&quot; title=&quot;1.git revert&quot;&gt;&lt;/a&gt;1.git revert&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git revert &amp;lt;commit&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;命令的含义是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given one or more existing commits, revert the changes that the related patches introduce, and record some new commits that record them. This requires your working tree to be clean (no modifications from the HEAD commit).&lt;/p&gt;
&lt;p&gt;Note: git revert is used to record some new commits to reverse the effect of some earlier commits (often only a faulty one).&lt;br&gt;If you want to throw away all uncommitted changes in your working directory, you should see &lt;code&gt;git-reset&lt;/code&gt;, particularly the &lt;code&gt;--hard&lt;/code&gt; option.&lt;br&gt;If you want to extract specific files as they were in another commit, you should see &lt;code&gt;git-checkout&lt;/code&gt;, specifically the &lt;code&gt;git checkout &amp;lt;commit&amp;gt; -- &amp;lt;filename&amp;gt;&lt;/code&gt; syntax.&lt;br&gt;Take care with these alternatives as both will discard uncommitted changes in your working directory.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="git" scheme="https://damon4u.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://damon4u.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git分支操作</title>
    <link href="https://damon4u.github.io//blog/2018/09/git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C.html"/>
    <id>https://damon4u.github.io//blog/2018/09/git分支操作.html</id>
    <published>2018-09-11T08:41:50.000Z</published>
    <updated>2018-09-11T14:34:38.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-checkout远程分支到本地"><a href="#1-checkout远程分支到本地" class="headerlink" title="1.checkout远程分支到本地"></a>1.checkout远程分支到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b &lt;local_branch_name&gt; origin/&lt;remote_branch_name&gt;</div></pre></td></tr></table></figure><h3 id="2-提交到远程分支"><a href="#2-提交到远程分支" class="headerlink" title="2.提交到远程分支"></a>2.提交到远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin &lt;remote_branch_name&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-checkout远程分支到本地&quot;&gt;&lt;a href=&quot;#1-checkout远程分支到本地&quot; class=&quot;headerlink&quot; title=&quot;1.checkout远程分支到本地&quot;&gt;&lt;/a&gt;1.checkout远程分支到本地&lt;/h3&gt;&lt;figure class
      
    
    </summary>
    
      <category term="git" scheme="https://damon4u.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://damon4u.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git删除操作</title>
    <link href="https://damon4u.github.io//blog/2018/09/git%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.html"/>
    <id>https://damon4u.github.io//blog/2018/09/git删除操作.html</id>
    <published>2018-09-11T08:41:50.000Z</published>
    <updated>2018-09-11T14:34:38.832Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-同时从本地与版本库中删除"><a href="#1-同时从本地与版本库中删除" class="headerlink" title="1.同时从本地与版本库中删除"></a>1.同时从本地与版本库中删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm [-r] [-n] &lt;file&gt;</div></pre></td></tr></table></figure><p><code>-r</code>参数递归移除目录。<br><code>-n</code>加上这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览，所以一般用这个参数先看看要删除哪些文件，防止误删，确认之后，就去掉此参数，真正的删除文件。</p><h3 id="2-仅从版本库中删除"><a href="#2-仅从版本库中删除" class="headerlink" title="2.仅从版本库中删除"></a>2.仅从版本库中删除</h3><p>我们想把文件从 Git 仓库中删除(亦即从暂存区域移除),但仍然希 望保留在当前工作目录中。换句话说,仅是从跟踪清单中删除。<br>比如一些大型日志文件或者一堆.a 编译文件,不小心纳入仓库后,要移除跟踪但不删除文件,以便稍后在 .gitignore 文件中补上,用 –cached 选项即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm [-r] [-n] --cached &lt;file&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-同时从本地与版本库中删除&quot;&gt;&lt;a href=&quot;#1-同时从本地与版本库中删除&quot; class=&quot;headerlink&quot; title=&quot;1.同时从本地与版本库中删除&quot;&gt;&lt;/a&gt;1.同时从本地与版本库中删除&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="git" scheme="https://damon4u.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://damon4u.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git配置信息管理</title>
    <link href="https://damon4u.github.io//blog/2018/09/git%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86.html"/>
    <id>https://damon4u.github.io//blog/2018/09/git配置信息管理.html</id>
    <published>2018-09-11T08:41:50.000Z</published>
    <updated>2018-09-11T14:41:01.020Z</updated>
    
    <content type="html"><![CDATA[<p>查看git全局设置信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config -l</div></pre></td></tr></table></figure></p><p>设置配置信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global user.name=&quot;Your Name&quot;</div></pre></td></tr></table></figure></p><p>这里的<code>--global</code>参数表示示你这台机器上所有的Git仓库都会使用用这个配置,当然也可以对某个仓库指定不同的用用户名和Email地址。</p><p>配置别名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git config --global alias.st status</div><div class="line">git config --global alias.co checkout</div><div class="line">git config --global alias.ci commit</div><div class="line">git config --global alias.br branch</div><div class="line">git config --global alias.unstage &apos;reset HEAD&apos;</div><div class="line">git config --global alias.last &apos;log -1&apos;</div><div class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看git全局设置信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="git" scheme="https://damon4u.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://damon4u.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git远程仓库管理</title>
    <link href="https://damon4u.github.io//blog/2018/09/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%AE%A1%E7%90%86.html"/>
    <id>https://damon4u.github.io//blog/2018/09/git远程仓库管理.html</id>
    <published>2018-09-11T08:41:50.000Z</published>
    <updated>2018-09-11T14:39:45.500Z</updated>
    
    <content type="html"><![CDATA[<p>查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote -v</div></pre></td></tr></table></figure></p><p>添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:michaelliao/learngit.git</div></pre></td></tr></table></figure></p><p>修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin git@github.com:michaelliao/learngit.git</div></pre></td></tr></table></figure></p><p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote rm origin</div><div class="line">git remote add origin git@...git</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div 
      
    
    </summary>
    
      <category term="git" scheme="https://damon4u.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://damon4u.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git撤销修改</title>
    <link href="https://damon4u.github.io//blog/2018/09/git%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9.html"/>
    <id>https://damon4u.github.io//blog/2018/09/git撤销修改.html</id>
    <published>2018-09-11T08:41:50.000Z</published>
    <updated>2018-09-11T14:41:24.068Z</updated>
    
    <content type="html"><![CDATA[<p>基本的命令含义参考:<a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.2-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A%EF%BC%9AReset%E3%80%81Checkout%E3%80%81Revert%E7%9A%84%E9%80%89%E6%8B%A9" target="_blank" rel="external">代码回滚：Reset、Checkout、Revert的选择</a></p><p>初始化一个空的测试目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> ~/git/ git init</div><div class="line">Initialized empty Git repository in /Users/git/.git/</div><div class="line"> ~/git/ [master] ls</div><div class="line"> ~/git/ [master]</div></pre></td></tr></table></figure></p><a id="more"></a><h3 id="1-撤销新增文件"><a href="#1-撤销新增文件" class="headerlink" title="1.撤销新增文件"></a>1.撤销新增文件</h3><h4 id="1-1-还没有add"><a href="#1-1-还没有add" class="headerlink" title="1.1 还没有add"></a>1.1 还没有add</h4><p>如果是新增的文件，还没有add提交到缓冲区，只是工作区做了修改，此时该文件是不受git管理的，所以直接修改或者删除该文件就好.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] touch A.java</div><div class="line"> ~/git/ [master] ls</div><div class="line">A.java</div><div class="line"> ~/git/ [master] git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"></div><div class="line">A.java</div><div class="line"></div><div class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div></pre></td></tr></table></figure></p><p>假如我们写了一个新的代码类A.java，然后还没有add提交，现在你后悔了，发现这个类没什么卵用，打算删除掉，那么，直接干掉就好，git也不会在意，反正它根本就不知道A.java的存在（Untracked）。</p><h4 id="1-2-add了，但是还没有commit"><a href="#1-2-add了，但是还没有commit" class="headerlink" title="1.2 add了，但是还没有commit"></a>1.2 add了，但是还没有commit</h4><p>假如你觉得A.java写的还有点意义，把它加入到缓存区，准备交由git管理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] git add A.java</div><div class="line"> ~/git/ [master] git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">Changes to be committed:</div><div class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</div><div class="line"></div><div class="line">new file:   A.java</div></pre></td></tr></table></figure></p><p>刚add完，发现有个错误，或者又反悔了，不想add了，想从缓存区中拿出来，返回到没有add时的状态，那么，可以根据提示，使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] git rm --cached A.java</div><div class="line">rm &apos;A.java&apos;</div><div class="line"> ~/git/ [master] git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class="line"></div><div class="line">A.java</div><div class="line"></div><div class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div></pre></td></tr></table></figure></p><p>看，回到了没有add时的状态了。<br>如果你觉得A.java根本毫无存在价值，从缓存区拿出来之后就直接扔掉了，不需要恢复到add前的状态，而是直接删除，那么可以使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] git rm -f A.java</div><div class="line">rm &apos;A.java&apos;</div><div class="line"> ~/git/ [master] ls</div><div class="line"> ~/git/ [master] git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</div></pre></td></tr></table></figure></p><p>看，A.java已经从这个世界消失了。<br>有人不服，说，我直接删除A.java不就好了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] rm A.java</div><div class="line"> ~/git/ [master] git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">Changes to be committed:</div><div class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</div><div class="line"></div><div class="line">new file:   A.java</div><div class="line"></div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line"></div><div class="line">deleted:    A.java</div><div class="line"></div><div class="line"> ~/git/ [master] ls</div></pre></td></tr></table></figure></p><p>可以看到，A.java确实也不见了。<br>但是仍然会看到有一个修改没有提交，在缓存区里发呆。<br>不仅如此，工作区多了一个为提交的修改，是delete: A.java。</p><blockquote><p>由此看出，直接删除文件，相当于是一种新增的修改操作，而不是对之前git操作的撤销。</p></blockquote><p>注意看提示，使用<code>git add/rm &lt;file&gt;</code>命令将修改更新缓存区或者使用<code>git checkout -- &lt;file&gt;</code>将修改撤销。<br>我们先试一下第一种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] git add A.java</div><div class="line"> ~/git/ [master] git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</div><div class="line"> ~/git/ [master] ls</div></pre></td></tr></table></figure></p><p>提交修改之后，缓冲区也清净了。<br>再试试第二种：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] git checkout -- A.java</div><div class="line"> ~/git/ [master] git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">Changes to be committed:</div><div class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</div><div class="line"></div><div class="line">new file:   A.java</div><div class="line"></div><div class="line"> ~/git/ [master] ls</div><div class="line">A.java</div></pre></td></tr></table></figure></p><p>看到，缓存区保持原样，A.java又回到了现实世界，撤销了上一次的文件删除修改。</p><h4 id="1-3-commit了"><a href="#1-3-commit了" class="headerlink" title="1.3 commit了"></a>1.3 commit了</h4><p>如果自信满满的commit了，然后后悔了，想干掉。分两种情况：<br>第一种情况是，像例子里面这样，第一次提交，之前没有commit过，那如果想撤销本次提交，我还没想到方法。<br>只能去删除A.java，然后再来一次提交，第一次提交的黑历史无法抹去。<br>或者使用revert命令，通过一个新的提交，撤销某一次提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] git revert HEAD</div><div class="line">[master 32a2e57] Revert &quot;A&quot;</div><div class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> delete mode 100644 A.java</div><div class="line"> ~/git/ [master] ls</div></pre></td></tr></table></figure></p><p>revert命令是撤销某一次提交，HEAD指的是最新的一次提交。<br>期间，会让你确认一下提交备注：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Revert &quot;A&quot;</div><div class="line"></div><div class="line">This reverts commit 969bb74c6125dc9fe4d1ef2327d4fda41a81fa6f.</div><div class="line"></div><div class="line"># Please enter the commit message for your changes. Lines starting</div><div class="line"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</div><div class="line"># On branch master</div><div class="line"># Changes to be committed:</div><div class="line"># deleted:    A.java</div><div class="line">#</div></pre></td></tr></table></figure></p><p>我们看到，上一次提交添加的A.java已经消失了，只是在git提交日志里面，能看到两条记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* 32a2e57 (HEAD -&gt; master) Revert &quot;A&quot;</div><div class="line">* 5b6ce5c A</div></pre></td></tr></table></figure></p><p>第二种情况是，非第一次提交，那么可以使用reset命令撤销提交，在下文中给出。</p><h3 id="2-撤销修改"><a href="#2-撤销修改" class="headerlink" title="2.撤销修改"></a>2.撤销修改</h3><p>我们重新把A.java请回来，初始内容为<code>hello</code>，然后做一次提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] vim A.java</div><div class="line"> ~/git/ [master] cat A.java</div><div class="line">hello</div><div class="line"> ~/git/ [master] git add .</div><div class="line"> ~/git/ [master+] git cm &apos;A init&apos;</div><div class="line">[master 5b9ab26] A init</div><div class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 A.java</div><div class="line"> ~/git/ [master] ls</div><div class="line">A.java</div></pre></td></tr></table></figure></p><h4 id="2-1-还没有add"><a href="#2-1-还没有add" class="headerlink" title="2.1 还没有add"></a>2.1 还没有add</h4><p>老大说A.java有bug，需要修改，于是我们开始做每天最常见的游戏fix，将内容修改为<code>world</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] vim A.java</div><div class="line"> ~/git/ [master*] cat A.java</div><div class="line">world</div><div class="line"> ~/git/ [master*] git status</div><div class="line">On branch master</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line"></div><div class="line">modified:   A.java</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure></p><p>修改完，可以看到提示，如果你觉得没问题，就add，这很正常~<br>但是，有一天脑袋不清醒，写了一大堆看不懂的代码，而且把原来的逻辑改的乱七八糟，现在唯一想做的就是把这些该死的代码删掉，恢复到上一次add或者commit的状态。<br>当然，你可以选择手动的删除，或者，使用提示中的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master*] git checkout -- A.java</div><div class="line"> ~/git/ [master] cat A.java</div><div class="line">hello</div></pre></td></tr></table></figure></p><p>意思就是,把A.java在工作区的修改全部撤销,这里有两种情况:<br>一种是A.java自修改后还没有被放到暂存区,现在,撤销修改就回到和版本库一模一样的状态（上一次commit）;<br>一种是A.java已经add到暂存区后,又作了修改,现在,撤销修改就回到添加到暂存区后的状态（上一次add）。</p><h4 id="2-2-已经add了，但是没有commit"><a href="#2-2-已经add了，但是没有commit" class="headerlink" title="2.2 已经add了，但是没有commit"></a>2.2 已经add了，但是没有commit</h4><p>信心满满的add了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master*] git add A.java</div><div class="line"> ~/git/ [master+] git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</div><div class="line"></div><div class="line">modified:   A.java</div></pre></td></tr></table></figure></p><p>如果发现有问题，想把A.java从缓存区拿出来，可以使用提示命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master+] git reset HEAD A.java</div><div class="line">Unstaged changes after reset:</div><div class="line">MA.java</div><div class="line"> ~/git/ [master*] git status</div><div class="line">On branch master</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line"></div><div class="line">modified:   A.java</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure></p><p>现在，A.java回到了add前的状态。</p><p>注意，这里是对指定文件的撤回，参数<code>--hard</code>是没用的（后面讲），因为该操作不会影响工作区，肯定会回到add前的状态，保留工作区修改。<br>如果想撤销工作区的修改，可以进一步使用上面的<code>git checkout --&lt;file&gt;</code>命令。</p><h4 id="3-3-已经commit了"><a href="#3-3-已经commit了" class="headerlink" title="3.3 已经commit了"></a>3.3 已经commit了</h4><p>如果已经commit了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master+] git commit -m &apos;fix A.java&apos;</div><div class="line">[master 17acd80] fix A.java</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div><div class="line"> ~/git/ [master] git status</div><div class="line">On branch master</div><div class="line">nothing to commit, working directory clean</div></pre></td></tr></table></figure></p><p>现在，如果想撤回这次提交，干掉黑历史，回到之前的某个提交版本，可以使用下面的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> ~/git/ [master] git reset HEAD^</div><div class="line">Unstaged changes after reset:</div><div class="line">MA.java</div><div class="line"> ~/git/ [master*] git status</div><div class="line">On branch master</div><div class="line">Changes not staged for commit:</div><div class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</div><div class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</div><div class="line"></div><div class="line">modified:   A.java</div><div class="line"></div><div class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</div></pre></td></tr></table></figure></p><p>看，代码回到了上一次提交，add前的状态。并且git log中，提交黑历史也不见了。</p><p><code>git reset</code>命令常用的参数包括三种：</p><ul><li>–soft – 缓存区和工作目录都不会被改变</li><li>–mixed – 默认选项。缓存区和你指定的提交同步，但工作目录不受影响</li><li>–hard – 缓存区和工作目录都同步到你指定的提交</li></ul><p>把这些标记想成定义<code>git reset</code>操作的作用域就容易理解多了。<br><img src="https://camo.githubusercontent.com/6f605243c7eedce24cd32e53348d7f5b2db20bff/68747470733a2f2f7777772e61746c61737369616e2e636f6d2f6769742f696d616765732f7475746f7269616c732f616476616e6365642f726573657474696e672d636865636b696e672d6f75742d616e642d726576657274696e672f30332e737667" alt="git reset"></p><p>这些标记往往和HEAD作为参数一起使用。比如，<code>git reset --mixed HEAD</code> 将你当前的改动从缓存区中移除，但是这些改动还留在工作目录中。另一方面，如果你想完全舍弃你没有提交的改动，你可以使用<code>git reset --hard HEAD</code>。这是git reset最常用的两种用法。</p><p><strong>关于回退版本：</strong><br>查看提交历史，以便确定要回退到哪个版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure></p><p>查看命令历史,以便确定要回到未来的哪个版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reflog</div></pre></td></tr></table></figure></p><p>版本更换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset  [--hard] commit_id</div></pre></td></tr></table></figure></p><p>由于HEAD指向的版本就是当前版本，所以上一个版本就是HEAD^,上上个版本就是HEAD^^,当然往上100个版本写100个^比较容易数不过来,所以写成HEAD~100。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本的命令含义参考:&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki/5.2-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A%EF%BC%9AReset%E3%80%81Checkout%E3%80%81Revert%E7%9A%84%E9%80%89%E6%8B%A9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码回滚：Reset、Checkout、Revert的选择&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;初始化一个空的测试目录：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt; ~/git/ git init&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Initialized empty Git repository in /Users/git/.git/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ~/git/ [master] ls&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ~/git/ [master]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://damon4u.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://damon4u.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>cpu过高</title>
    <link href="https://damon4u.github.io//blog/2018/09/cpu%E8%BF%87%E9%AB%98.html"/>
    <id>https://damon4u.github.io//blog/2018/09/cpu过高.html</id>
    <published>2018-09-06T08:41:50.000Z</published>
    <updated>2018-09-10T15:59:02.147Z</updated>
    
    <content type="html"><![CDATA[<p>一个应用占用CPU很高，除了确实是计算密集型应用之外，通常原因都是出现了死循环。</p><p>总体流程：<br>首先显示java进程的线程列表，查找运行时间长的线程:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -mp pid -o THREAD,tid,time</div></pre></td></tr></table></figure></p><p>或者使用top命令的线程模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top -p pid</div></pre></td></tr></table></figure></p><p>然后按’H’，进入线程模式，第一列PID为tid（线程id）</p><p>其次将需要的线程ID转换为16进制格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printf &quot;%x\n&quot; tid</div></pre></td></tr></table></figure></p><p>最后打印线程的堆栈信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jstack pid |grep tid -A 30</div></pre></td></tr></table></figure></p><a id="more"></a><p>举个例子说明下：</p><h3 id="1-查找进程号"><a href="#1-查找进程号" class="headerlink" title="1. 查找进程号"></a>1. 查找进程号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ jps -v | grep -v Jps</div><div class="line">43109 Bootstrap ...</div></pre></td></tr></table></figure><p>使用<code>jps</code>命令显示当前的java进程，加上<code>-v</code>参数可以显示进程的详情信息，更好的判断是否是关心的进程。</p><h3 id="2-查找耗时的线程号"><a href="#2-查找耗时的线程号" class="headerlink" title="2. 查找耗时的线程号"></a>2. 查找耗时的线程号</h3><p>一个进程下包含很多线程，我们关心的是那些线程运行了很长时间还没有结束，导致资源一直被占用。<br>第一种方法是使用<code>ps</code>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ps -mp 43109 -o THREAD,tid,time | sort -r -k9 | head -10</div><div class="line">USER     %CPU PRI SCNT WCHAN  USER SYSTEM   TID     TIME</div><div class="line">appops   14.7   -    - -         -      -     - 03:05:55</div><div class="line">appops    8.0  19    - -         -      - 43422 01:41:26  ------------这个线程执行了01:41:26</div><div class="line">appops    0.2  19    - -         -      - 43411 00:03:44</div><div class="line">appops    0.2  19    - -         -      - 43415 00:03:30</div><div class="line">appops    0.2  19    - -         -      - 43414 00:03:22</div><div class="line">appops    0.2  19    - -         -      - 43424 00:03:20</div><div class="line">appops    0.2  19    - -         -      - 43408 00:03:10</div><div class="line">appops    0.2  19    - -         -      - 43418 00:03:07</div><div class="line">appops    0.2  19    - -         -      - 43407 00:03:06</div></pre></td></tr></table></figure></p><p>其中<code>ps</code>命令查询进程的执行信息，<code>-o</code>命令指定输出信息列，包含线程tid和线程执行时间。然后使用<code>sort</code>命令按时间倒叙排序，取前10行。</p><p>第二种方法是使用<code>top</code>命令：<br>首先输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ top -p 43109</div><div class="line">top - 11:44:11 up 519 days, 23:37,  1 user,  load average: 0.27, 0.28, 0.31</div><div class="line">Tasks:   1 total,   0 running,   1 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  1.4 us,  0.9 sy,  0.0 ni, 97.6 id,  0.0 wa,  0.0 hi,  0.1 si,  0.0 st</div><div class="line">KiB Mem:  12330736 total, 11692416 used,   638320 free,    79176 buffers</div><div class="line">KiB Swap:        0 total,        0 used,        0 free,  6568140 cached</div><div class="line"></div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S  %CPU %MEM    TIME+  COMMAND</div><div class="line">43109 appops    20   0 5225m 3.7g  11m S  16.0 31.4 187:28.17 java</div></pre></td></tr></table></figure></p><p>进入单个进程信息后，输入<code>H</code>，进入线程模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">top - 11:47:16 up 519 days, 23:40,  1 user,  load average: 0.08, 0.20, 0.28</div><div class="line">Threads: 124 total,   0 running, 124 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  1.7 us,  1.0 sy,  0.0 ni, 97.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem:  12330736 total, 11694844 used,   635892 free,    79176 buffers</div><div class="line">KiB Swap:        0 total,        0 used,        0 free,  6568872 cached</div><div class="line"></div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S  %CPU %MEM    TIME+  COMMAND</div><div class="line">43422 appops    20   0 5225m 3.7g  11m S  12.3 31.4 103:00.04 java</div><div class="line">43418 appops    20   0 5225m 3.7g  11m S   0.3 31.4   3:07.64 java</div><div class="line">43424 appops    20   0 5225m 3.7g  11m S   0.3 31.4   3:20.64 java</div><div class="line">43442 appops    20   0 5225m 3.7g  11m S   0.3 31.4   0:48.77 java</div><div class="line">43109 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:00.00 java</div><div class="line">43110 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:01.38 java</div><div class="line">43111 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:01.73 java</div><div class="line">43112 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:01.85 java</div><div class="line">43113 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:01.82 java</div><div class="line">43114 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:01.83 java</div><div class="line">43115 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:01.75 java</div><div class="line">43116 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:01.75 java</div><div class="line">43117 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:01.77 java</div><div class="line">43118 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:01.77 java</div><div class="line">43119 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:14.83 java</div><div class="line">43120 appops    20   0 5225m 3.7g  11m S   0.0 31.4   0:00.53 java</div></pre></td></tr></table></figure></p><p>接着输入<code>T</code>，表示按时间倒叙排序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">top - 11:47:54 up 519 days, 23:41,  1 user,  load average: 0.17, 0.20, 0.28</div><div class="line">Threads: 124 total,   0 running, 124 sleeping,   0 stopped,   0 zombie</div><div class="line">%Cpu(s):  1.6 us,  0.7 sy,  0.0 ni, 97.6 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem:  12330736 total, 11696052 used,   634684 free,    79176 buffers</div><div class="line">KiB Swap:        0 total,        0 used,        0 free,  6569020 cached</div><div class="line"></div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S  %CPU %MEM    TIME+  COMMAND</div><div class="line">43422 appops    20   0 5225m 3.7g  11m S  13.0 31.4 103:04.72 java</div><div class="line">43411 appops    20   0 5225m 3.7g  11m S   0.0 31.4   3:45.74 java</div><div class="line">43415 appops    20   0 5225m 3.7g  11m S   0.0 31.4   3:31.93 java</div><div class="line">43414 appops    20   0 5225m 3.7g  11m S   0.0 31.4   3:26.41 java</div><div class="line">43424 appops    20   0 5225m 3.7g  11m S   0.0 31.4   3:20.64 java</div><div class="line">43408 appops    20   0 5225m 3.7g  11m S   0.0 31.4   3:12.97 java</div><div class="line">43418 appops    20   0 5225m 3.7g  11m S   0.0 31.4   3:07.73 java</div><div class="line">43407 appops    20   0 5225m 3.7g  11m S   0.0 31.4   3:06.85 java</div><div class="line">43412 appops    20   0 5225m 3.7g  11m S   0.0 31.4   3:01.83 java</div><div class="line">43419 appops    20   0 5225m 3.7g  11m S   0.0 31.4   3:01.40 java</div><div class="line">43438 appops    20   0 5225m 3.7g  11m S   0.0 31.4   3:00.63 java</div><div class="line">43437 appops    20   0 5225m 3.7g  11m S   0.0 31.4   2:59.67 java</div><div class="line">43439 appops    20   0 5225m 3.7g  11m S   0.0 31.4   2:59.61 java</div><div class="line">43413 appops    20   0 5225m 3.7g  11m S   0.0 31.4   2:55.66 java</div><div class="line">43421 appops    20   0 5225m 3.7g  11m S   0.0 31.4   2:51.55 java</div></pre></td></tr></table></figure></p><blockquote><p>注：<br>M %MEM<br>N PID<br>P %CPU<br>T TIME+</p></blockquote><p>同样能找到耗时较多的线程号：43422。</p><h3 id="3-将线程ID转换为16进制格式"><a href="#3-将线程ID转换为16进制格式" class="headerlink" title="3. 将线程ID转换为16进制格式"></a>3. 将线程ID转换为16进制格式</h3><p>由于<code>jstack</code>命令输出的线程id是使用16进制格式，所以我们要将tid转化为16进制进行搜索。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ printf &quot;%x\n&quot; 43422</div><div class="line">a99e</div></pre></td></tr></table></figure></p><h3 id="4-在进程堆栈日志中查找"><a href="#4-在进程堆栈日志中查找" class="headerlink" title="4. 在进程堆栈日志中查找"></a>4. 在进程堆栈日志中查找</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ jstack 43109 |grep a99e -A 30</div><div class="line">&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean#0_Worker-17&quot; prio=10 tid=0x00007fe889c95800 nid=0xa99e runnable [0x00007fe8878f6000]</div><div class="line">   java.lang.Thread.State: RUNNABLE</div><div class="line">at java.net.SocketInputStream.socketRead0(Native Method)</div><div class="line">at java.net.SocketInputStream.read(SocketInputStream.java:152)</div><div class="line">at java.net.SocketInputStream.read(SocketInputStream.java:122)</div><div class="line">at java.net.SocketInputStream.read(SocketInputStream.java:108)</div><div class="line">at redis.clients.util.RedisInputStream.ensureFill(RedisInputStream.java:195)</div><div class="line">at redis.clients.util.RedisInputStream.readByte(RedisInputStream.java:40)</div><div class="line">at redis.clients.jedis.Protocol.process(Protocol.java:128)</div><div class="line">at redis.clients.jedis.Protocol.read(Protocol.java:192)</div><div class="line">at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:282)</div><div class="line">at redis.clients.jedis.Connection.getBinaryBulkReply(Connection.java:201)</div><div class="line">at redis.clients.jedis.BinaryJedis.get(BinaryJedis.java:127)</div><div class="line">...</div></pre></td></tr></table></figure><p>这样能看到具体线程执行情况，以及长时间执行的原因。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个应用占用CPU很高，除了确实是计算密集型应用之外，通常原因都是出现了死循环。&lt;/p&gt;
&lt;p&gt;总体流程：&lt;br&gt;首先显示java进程的线程列表，查找运行时间长的线程:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ps -mp pid -o THREAD,tid,time&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者使用top命令的线程模式：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;top -p pid&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后按’H’，进入线程模式，第一列PID为tid（线程id）&lt;/p&gt;
&lt;p&gt;其次将需要的线程ID转换为16进制格式：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;printf &amp;quot;%x\n&amp;quot; tid&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后打印线程的堆栈信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;jstack pid |grep tid -A 30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>curl命令</title>
    <link href="https://damon4u.github.io//blog/2018/08/curl.html"/>
    <id>https://damon4u.github.io//blog/2018/08/curl.html</id>
    <published>2018-08-29T08:41:50.000Z</published>
    <updated>2018-08-30T09:34:56.822Z</updated>
    
    <content type="html"><![CDATA[<p>curl命令可以方便的调试接口，发送网络请求。</p><a id="more"></a><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p><code>curl</code> - transfer a URL</p><blockquote><p>curl  is  a  tool  to  transfer  data from or to a server, using one of the supported protocols (DICT, FILE, FTP, FTPS,GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMBS, SMTP, SMTPS,  TELNET  and TFTP).</p><p>curl offers a busload of useful tricks like proxy support, user authentication, FTP upload, HTTP post, SSL connections, cookies, file transfer resume, Metalink, and more.</p></blockquote><p>格式如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl [options] [URL...]</div></pre></td></tr></table></figure></p><p>以下将使用<code>http://requestb.in/1g31nxf1?inspect</code>作为测试URL，在request.bin网站上可以看到每次请求的全部内容，方便测试。</p><h3 id="2-GET"><a href="#2-GET" class="headerlink" title="2.GET"></a>2.GET</h3><p>如果不加任何参数，那么将会使用GET方法发送http请求。<br>例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ~/ curl "http://requestb.in/1g31nxf1"</div><div class="line"><span class="meta">ok%</span></div></pre></td></tr></table></figure></p><p>这样就是一个最简单的GET请求，不包含任何参数和头信息。</p><p>下面加一些请求参数：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ~/ curl "http://requestb.in/1g31nxf1?username=dj&amp;pwd=123"</div><div class="line"><span class="meta">ok%</span></div></pre></td></tr></table></figure></p><h3 id="3-POST"><a href="#3-POST" class="headerlink" title="3.POST"></a>3.POST</h3><p>curl中是使用<code>-d</code>或者<code>--data</code>命令来添加数据的。<br>进而发送一个POST请求。<br>默认的Content-Type是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Content-Type: application/x-www-form-urlencoded</div></pre></td></tr></table></figure></p><p>这里的urlencoded的意思就是需要把请求参数中的特殊符号转化为%XX那种ascii码。如value值中包含有空格，则需要先将空格转换成%20。</p><p>在新版本的CURL中，提供了新的选项 –data-urlencode，通过该选项提供的参数会自动转义特殊字符。</p><p>举例：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ~/ curl -d "&#123;\"username\":\"alice\",\"pwd\":123&#125;" "http://requestb.in/1g31nxf1"</div><div class="line"><span class="meta">ok%</span></div></pre></td></tr></table></figure></p><p>这样，body中就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;username&quot;:&quot;alice&quot;,&quot;pwd&quot;:123&#125;</div></pre></td></tr></table></figure></p><p>我们来换一种：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -d "username=bob" -d "pwd=123" "http://requestb.in/1g31nxf1"</div></pre></td></tr></table></figure></p><p>这样，body中就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username=bob&amp;pwd=123</div></pre></td></tr></table></figure></p><p>等同于<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ~/ curl -d "username=bob&amp;pwd=123" "http://requestb.in/1g31nxf1"</div><div class="line"><span class="meta">ok%</span></div></pre></td></tr></table></figure></p><p>我们还可以先把body数据写入<code>文件</code>中，然后使用-d发出去，如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> ~/ cat post.data</div><div class="line">&#123;"data":"json"&#125;</div><div class="line"> ~/ curl -d @post.data "http://requestb.in/1g31nxf1"</div><div class="line"><span class="meta">ok%</span></div></pre></td></tr></table></figure></p><p>我们拿到的body是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;data&quot;:&quot;json&quot;&#125;</div></pre></td></tr></table></figure></p><p>换一个内容：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> ~/ cat post.data</div><div class="line">username=cat&amp;pwd=123</div><div class="line"> ~/ curl -d @post.data "http://requestb.in/1g31nxf1"</div><div class="line"><span class="meta">ok%</span></div></pre></td></tr></table></figure></p><p>拿到的body是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username=cat&amp;pwd=123</div></pre></td></tr></table></figure></p><p>也就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pwd: 123</div><div class="line">username: cat</div></pre></td></tr></table></figure></p><h3 id="4-添加头信息"><a href="#4-添加头信息" class="headerlink" title="4.添加头信息"></a>4.添加头信息</h3><p>使用<code>-H</code>或者<code>--header</code>来添加头信息，注意使用<code>:</code>连接key和value。<br>例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ~/ curl -d @post.data "http://requestb.in/1g31nxf1" -H "Content-Type:application/json" -H "Accept:gzip"</div><div class="line"><span class="meta">ok%</span></div></pre></td></tr></table></figure></p><h3 id="5-HEAD"><a href="#5-HEAD" class="headerlink" title="5.HEAD"></a>5.HEAD</h3><p>使用<code>-I</code>会发送HEAD请求，只会获取头信息。<br>例如<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> ~/ curl -I "http://requestb.in/1g31nxf1"</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Connection: keep-alive</div><div class="line">Server: gunicorn/19.3.0</div><div class="line">Date: Thu, 03 Mar 2016 11:20:59 GMT</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Content-Length: 2</div><div class="line">Sponsored-By: https://www.runscope.com</div><div class="line">Via: 1.1 vegur</div></pre></td></tr></table></figure></p><p>可以在request.bin上看到发送了HEAD请求。</p><p>如果是在发送GET或者POST请求是看返回的头信息，可以使用<code>-i</code>参数。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> ~/ curl -i -d "username=bob&amp;pwd=123" "http://requestb.in/1g31nxf1" -H "Content-Type:application/json" -H "Accept:gzip"</div><div class="line">HTTP/1.1 200 OK</div><div class="line">Connection: keep-alive</div><div class="line">Server: gunicorn/19.3.0</div><div class="line">Date: Thu, 03 Mar 2016 11:20:25 GMT</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Content-Length: 2</div><div class="line">Sponsored-By: https://www.runscope.com</div><div class="line">Via: 1.1 vegur</div><div class="line"></div><div class="line"><span class="meta">ok%</span></div></pre></td></tr></table></figure></p><p>可以看到，会发送POST请求，同时看到了返回的头信息。</p><h3 id="6-PUT"><a href="#6-PUT" class="headerlink" title="6.PUT"></a>6.PUT</h3><p>使用<code>-T</code>会发送PUT请求上传文件。<br>例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ~/ curl -T post.data "http://requestb.in/1g31nxf1"</div><div class="line"><span class="meta">ok%</span></div></pre></td></tr></table></figure></p><p>可以在request.bin上看到发送了PUT请求，body是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username=cat&amp;pwd=123</div></pre></td></tr></table></figure></p><h3 id="7-Cookie"><a href="#7-Cookie" class="headerlink" title="7.Cookie"></a>7.Cookie</h3><p>使用<code>-b</code>参数设置cookie信息。<br>例如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> ~/ curl -b "key=213;role=0" "http://requestb.in/1g31nxf1"</div><div class="line"><span class="meta">ok%</span></div></pre></td></tr></table></figure></p><p>注意，使用<code>=</code>连接key和value，然后使用<code>;</code>分隔多个cookie。</p><h3 id="8-输出相应参数"><a href="#8-输出相应参数" class="headerlink" title="8.输出相应参数"></a>8.输出相应参数</h3><p>使用<code>-w</code>可以输出相应变量的参数。<br>例如<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> ~/ curl -w "\ntime_connect: %&#123;time_connect&#125;\ntime_starttransfer: %&#123;time_starttransfer&#125;\ntime_total: %&#123;time_total&#125;\n" "http://requestb.in/1g31nxf1"</div><div class="line">ok</div><div class="line">time_connect: 0.324</div><div class="line">time_starttransfer: 0.670</div><div class="line">time_total: 0.670</div></pre></td></tr></table></figure></p><h3 id="9-使用代理"><a href="#9-使用代理" class="headerlink" title="9.使用代理"></a>9.使用代理</h3><p>假如代理服务器ip是125.86.166.89，端口是23564，类型是https，那么使用代理发送GET请求：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -x "https://125.86.166.89:23564" "http://www.baidu.com"</div></pre></td></tr></table></figure></p><p>默认是使用http协议。<br>有时候代理需要加认证，需要携带头信息：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -x "60.184.111.104:766" -H "Proxy-Authorization:Basic ZGFtb240dTEyM0AxNjMuY29tOlJGdk56SHZ2VVY2N2F1" "http://www.baidu.com"</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;curl命令可以方便的调试接口，发送网络请求。&lt;/p&gt;
    
    </summary>
    
      <category term="shell" scheme="https://damon4u.github.io/categories/shell/"/>
    
    
      <category term="shell" scheme="https://damon4u.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型</title>
    <link href="https://damon4u.github.io//blog/2018/08/%E6%B3%9B%E5%9E%8B.html"/>
    <id>https://damon4u.github.io//blog/2018/08/泛型.html</id>
    <published>2018-08-24T08:41:50.000Z</published>
    <updated>2018-08-29T13:00:53.339Z</updated>
    
    <content type="html"><![CDATA[<p>Java范型有点类似与C++中的模板类或者模板方法，对类型进行抽象。</p><a id="more"></a><h3 id="1-泛型是什么"><a href="#1-泛型是什么" class="headerlink" title="1. 泛型是什么"></a>1. 泛型是什么</h3><p>举一个JDK中的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">ArrayList&lt;Integer&gt; intList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">ArrayList&lt;Double&gt; doubleList = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</div></pre></td></tr></table></figure></p><p>这里创建了三个List，分别存储String、Integer和Double。<br>在调用List的<code>add</code>和<code>get</code>方法时，会对类型进行检查。<br>这里ArrayList将内存存储的类型参数化，各种类型的变量都可以组装成对应的List，而不必针对每个类型分别实现一个构建ArrayList的类。</p><h3 id="2-没有泛型会怎样"><a href="#2-没有泛型会怎样" class="headerlink" title="2. 没有泛型会怎样"></a>2. 没有泛型会怎样</h3><p>我们实现两个能够设置点坐标的类，分别设置Integer类型的点坐标和Float类型的点坐标：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置Integer类型的点坐标</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerPoint</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Integer x ;       <span class="comment">// 表示X坐标</span></div><div class="line">    <span class="keyword">private</span> Integer y ;       <span class="comment">// 表示Y坐标</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(Integer x)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(Integer y)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.y = y ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getX</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getY</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.y ;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//设置Float类型的点坐标</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FloatPoint</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Float x ;       <span class="comment">// 表示X坐标</span></div><div class="line">    <span class="keyword">private</span> Float y ;       <span class="comment">// 表示Y坐标</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(Float x)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(Float y)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.y = y ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getX</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getY</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.y ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>那现在有个问题：大家有没有发现，他们除了变量类型不一样，一个是Integer一个是Float以外，其它并没有什么区别！那我们能不能合并成一个呢？<br>答案是可以的，因为Integer和Float都是派生自Object的，我们用下面这段代码代替：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectPoint</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Object x ;</div><div class="line">    <span class="keyword">private</span> Object y ;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(Object x)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(Object y)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.y = y ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getX</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getY</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.y ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>即全部都用Object来代替所有的子类；<br>在使用的时候是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ObjectPoint integerPoint = <span class="keyword">new</span> ObjectPoint();</div><div class="line">integerPoint.setX(<span class="keyword">new</span> Integer(<span class="number">100</span>));</div><div class="line">Integer integerX=(Integer)integerPoint.getX();</div><div class="line"></div><div class="line">ObjectPoint floatPoint = <span class="keyword">new</span> ObjectPoint();</div><div class="line">floatPoint.setX(<span class="keyword">new</span> Float(<span class="number">100.12f</span>));</div><div class="line">Float floatX = (Float)floatPoint.getX();</div></pre></td></tr></table></figure></p><p>特别注意取值时需要强制类型转换。<br>但问题来了：注意，注意，我们这里使用了强制转换，我们这里setX（）和getX（）写得很近，所以我们明确的知道我们传进去的是Float类型，那如果我们记错了呢？<br>比如我们改成下面这样，编译时会报错吗：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectPoint floatPoint = <span class="keyword">new</span> ObjectPoint();</div><div class="line">floatPoint.setX(<span class="keyword">new</span> Float(<span class="number">100.12f</span>));</div><div class="line">String floatX = (String)floatPoint.getX();</div></pre></td></tr></table></figure></p><p>不会！！！我们问题的关键在于这句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String floatX = (String)floatPoint.getX();</div></pre></td></tr></table></figure></p><p>强制转换时，编译不会出错。因为编译器也不知道你传进去的是什么，而floatPoint.getX()返回的类型是Object，所以编译时，将Object强转成String是成立的。必然不会报错。<br>而在运行时，则不然，在运行时，floatPoint实例中明明传进去的是Float类型的变量，非要把它强转成String类型，肯定会报类型转换错误的！<br>那有没有一种办法在编译阶段，即能合并成同一个，又能在编译时检查出来传进去类型不对呢？当然，这就是泛型。</p><h3 id="3-泛型类"><a href="#3-泛型类" class="headerlink" title="3. 泛型类"></a>3. 泛型类</h3><p>我们先看看泛型的类是怎么定义的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&lt;<span class="title">T</span>&gt;</span>&#123;<span class="comment">// 此处可以随便写标识符号</span></div><div class="line">    <span class="comment">//定义变量</span></div><div class="line">    <span class="keyword">private</span> T x ;      </div><div class="line">    <span class="keyword">private</span> T y ;      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(T x)</span></span>&#123;<span class="comment">//作为参数</span></div><div class="line">        <span class="keyword">this</span>.x = x ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(T y)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.y = y ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getX</span><span class="params">()</span></span>&#123;<span class="comment">//作为返回值</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x ;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getY</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.y ;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//IntegerPoint使用</span></div><div class="line">Point&lt;Integer&gt; p = <span class="keyword">new</span> Point&lt;Integer&gt;() ;</div><div class="line">p.setX(<span class="keyword">new</span> Integer(<span class="number">100</span>)) ;</div><div class="line">System.out.println(p.getX());  </div><div class="line"></div><div class="line"><span class="comment">//FloatPoint使用</span></div><div class="line">Point&lt;Float&gt; p = <span class="keyword">new</span> Point&lt;Float&gt;() ;</div><div class="line">p.setX(<span class="keyword">new</span> Float(<span class="number">100.12f</span>)) ;</div><div class="line">System.out.println(p.getX());</div></pre></td></tr></table></figure></p><p>上在我们只定义了一个泛型变量T，那如果我们需要传进去多个泛型要怎么办呢？<br>只需要在类似下面这样就可以了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MorePoint</span>&lt;<span class="title">T</span>,<span class="title">U</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> T x;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> T y;       </div><div class="line"></div><div class="line">    <span class="keyword">private</span> U name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(T x)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.x = x;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getX</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(U name)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> U <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用</span></div><div class="line">MorePoint&lt;Integer,String&gt; morePoint = <span class="keyword">new</span> MorePoint&lt;Integer, String&gt;();</div><div class="line">morePoint.setName(<span class="string">"harvic"</span>);</div><div class="line">System.out.println(<span class="string">"morPont.getName:"</span> + morePoint.getName());</div></pre></td></tr></table></figure></p><h3 id="4-泛型接口"><a href="#4-泛型接口" class="headerlink" title="4. 泛型接口"></a>4. 泛型接口</h3><p>在接口上定义泛型与在类中定义泛型是一样的，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span>&lt;<span class="title">T</span>&gt;</span>&#123;        <span class="comment">// 在接口上定义泛型  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getVar</span><span class="params">()</span> </span>; <span class="comment">// 定义抽象方法，抽象方法的返回值就是泛型类型  </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVar</span><span class="params">(T x)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="4-1-使用方法一：非泛型类"><a href="#4-1-使用方法一：非泛型类" class="headerlink" title="4.1 使用方法一：非泛型类"></a>4.1 使用方法一：非泛型类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfoImpl</span> <span class="keyword">implements</span> <span class="title">Info</span>&lt;<span class="title">String</span>&gt;</span>&#123;<span class="comment">// 定义泛型接口的子类</span></div><div class="line">    <span class="keyword">private</span> String var ;<span class="comment">// 定义属性</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoImpl</span><span class="params">(String var)</span></span>&#123;<span class="comment">// 通过构造方法设置属性内容</span></div><div class="line">        <span class="keyword">this</span>.setVar(var) ;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVar</span><span class="params">(String var)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.var = var ;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVar</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.var ;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsDemo24</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arsg[])</span></span>&#123;</div><div class="line">        InfoImpl i = <span class="keyword">new</span> InfoImpl(<span class="string">"harvic"</span>);</div><div class="line">        System.out.println(i.getVar()) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>要清楚的一点是InfoImpl不是一个泛型类！因为他类名后没有<t>！<br>然后在在这里我们将Info<string>中的泛型变量T定义填充为了String类型。所以在重写时setVar()和getVar()时，IDE会也我们直接生成String类型的重写函数。</string></t></p><h4 id="4-2-使用方法二：泛型类"><a href="#4-2-使用方法二：泛型类" class="headerlink" title="4.2 使用方法二：泛型类"></a>4.2 使用方法二：泛型类</h4><p>在方法一中，我们在类中直接把Info<t>接口给填充好了，但我们的类，是可以构造成泛型类的，那我们利用泛型类来构造填充泛型接口会是怎样呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span>&lt;<span class="title">T</span>&gt;</span>&#123;<span class="comment">// 在接口上定义泛型</span></div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getVar</span><span class="params">()</span> </span>;<span class="comment">// 定义抽象方法，抽象方法的返回值就是泛型类型</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVar</span><span class="params">(T var)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfoImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Info</span>&lt;<span class="title">T</span>&gt;</span>&#123;<span class="comment">// 定义泛型接口的子类</span></div><div class="line"><span class="keyword">private</span> T var ;<span class="comment">// 定义属性</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">InfoImpl</span><span class="params">(T var)</span></span>&#123;<span class="comment">// 通过构造方法设置属性内容</span></div><div class="line"><span class="keyword">this</span>.setVar(var) ;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVar</span><span class="params">(T var)</span></span>&#123;</div><div class="line"><span class="keyword">this</span>.var = var ;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getVar</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.var ;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsDemo24</span></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arsg[])</span></span>&#123;</div><div class="line">InfoImpl&lt;String&gt; i = <span class="keyword">new</span> InfoImpl&lt;String&gt;(<span class="string">"harvic"</span>);</div><div class="line">System.out.println(i.getVar()) ;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></t></p><h3 id="5-泛型函数"><a href="#5-泛型函数" class="headerlink" title="5. 泛型函数"></a>5. 泛型函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFans</span> </span>&#123;</div><div class="line"><span class="comment">//静态函数</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">StaticMethod</span><span class="params">(T a)</span></span>&#123;</div><div class="line">        Log.d(<span class="string">"harvic"</span>,<span class="string">"StaticMethod: "</span>+a.toString());</div><div class="line">    &#125;</div><div class="line"><span class="comment">//普通函数</span></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">OtherMethod</span><span class="params">(T a)</span></span>&#123;</div><div class="line">        Log.d(<span class="string">"harvic"</span>,<span class="string">"OtherMethod: "</span>+a.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面分别是静态泛型函数和常规泛型函数的定义方法，与以往方法的唯一不同点就是在返回值前加上<t>来表示泛型变量。其它没什么区别。<br>使用方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//静态方法</span></div><div class="line">StaticFans.StaticMethod(<span class="string">"adfdsa"</span>);<span class="comment">//使用方法一</span></div><div class="line">StaticFans.&lt;String&gt;StaticMethod(<span class="string">"adfdsa"</span>);<span class="comment">//使用方法二</span></div><div class="line"></div><div class="line"><span class="comment">//常规方法</span></div><div class="line">StaticFans staticFans = <span class="keyword">new</span> StaticFans();</div><div class="line">staticFans.OtherMethod(<span class="keyword">new</span> Integer(<span class="number">123</span>));<span class="comment">//使用方法一</span></div><div class="line">staticFans.&lt;Integer&gt;OtherMethod(<span class="keyword">new</span> Integer(<span class="number">123</span>));<span class="comment">//使用方法二</span></div></pre></td></tr></table></figure></t></p><h3 id="6-使用Class传递泛型类Class对象"><a href="#6-使用Class传递泛型类Class对象" class="headerlink" title="6. 使用Class传递泛型类Class对象"></a>6. 使用Class<t>传递泛型类Class对象</t></h3><p>有时，我们会遇到一个情况，比如，我们在使用JSON解析字符串的时候，代码一般是这样的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;SuccessModel&gt; <span class="title">parseArray</span><span class="params">(String response)</span></span>&#123;</div><div class="line">    List&lt;SuccessModel&gt; modelList = JSON.parseArray(response, SuccessModel.class);</div><div class="line">    <span class="keyword">return</span> modelList;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这段代码的意义就是根据SuccessModel解析出List<successmodel>的数组。<br>那现在，我们把下面这句组装成一个泛型函数要怎么来做呢?<br>首先，我们应该把SuccessModel单独抽出来做为泛型变量，但parseArray()中用到的SuccessModel.class要怎么弄呢？<br>先来看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">parseArray</span><span class="params">(String response, Class&lt;T&gt; object)</span></span>&#123;</div><div class="line">    List&lt;T&gt; modelList = JSON.parseArray(response, object);</div><div class="line">    <span class="keyword">return</span> modelList;</div><div class="line">&#125;</div></pre></td></tr></table></figure></successmodel></p><p>注意到，我们用的Class<t> object来传递类的class对象，即我们上面提到的SuccessModel.class。<br>这是因为Class<t>也是一泛型，它是传来用来装载类的class对象的，它的定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Instances of the class &#123;<span class="doctag">@code</span> Class&#125; represent classes and</span></div><div class="line"><span class="comment"> * interfaces in a running Java application.  An enum is a kind of</span></div><div class="line"><span class="comment"> * class and an annotation is a kind of interface.  Every array also</span></div><div class="line"><span class="comment"> * belongs to a class that is reflected as a &#123;<span class="doctag">@code</span> Class&#125; object</span></div><div class="line"><span class="comment"> * that is shared by all arrays with the same element type and number</span></div><div class="line"><span class="comment"> * of dimensions.  The primitive Java types (&#123;<span class="doctag">@code</span> boolean&#125;,</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> byte&#125;, &#123;<span class="doctag">@code</span> char&#125;, &#123;<span class="doctag">@code</span> short&#125;,</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> int&#125;, &#123;<span class="doctag">@code</span> long&#125;, &#123;<span class="doctag">@code</span> float&#125;, and</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> double&#125;), and the keyword &#123;<span class="doctag">@code</span> void&#125; are also</span></div><div class="line"><span class="comment"> * represented as &#123;<span class="doctag">@code</span> Class&#125; objects.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></t></t></p><h3 id="7-类型绑定"><a href="#7-类型绑定" class="headerlink" title="7. 类型绑定"></a>7. 类型绑定</h3><p>有时候，我们在泛型类或者泛型函数中希望泛型参数能够是某个接口的实现，这样我们可以调用接口方法。</p><h4 id="7-1-extends"><a href="#7-1-extends" class="headerlink" title="7.1 extends"></a>7.1 extends</h4><p>有时候，你会希望泛型类型只能是某一部分类型，比如操作数据的时候，你会希望是Number或其子类类型。这个想法其实就是给泛型参数添加一个界限。其定义形式为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;T extends BoundingType&gt;</div></pre></td></tr></table></figure></p><p>此定义表示T应该是BoundingType的子类型（subtype）。T和BoundingType可以是类，也可以是接口。另外注意的是，此处的”extends“表示的子类型，不等同于继承。<br>一定要非常注意的是，这里的extends不是类继承里的那个extends！两个根本没有任何关联。在这里extends后的BoundingType可以是类，也可以是接口，意思是说，T是在BoundingType基础上创建的，具有BoundingType的功能。目测是Java的开发人员不想再引入一个关键字，所以用已有的extends来代替而已。<br>我们假设，我们有很多种类的水果，需要写一个函数，打印出填充进去水果的名字：<br>为此，我们先建一个基类来设置和提取名字：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后写个泛型函数来提取名字：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Fruit&gt; <span class="function">String <span class="title">getFruitName</span><span class="params">(T t)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> t.getName();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从这段代码也可以看出，类型绑定有两个作用：</p><ol><li>对填充的泛型加以限定</li><li>使用泛型变量T时，可以使用BoundingType内部的函数。</li></ol><p>有关绑定限定的用法，其实我们可以同时绑定多个绑定,用&amp;连接，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Fruit &amp; Serializable&gt; <span class="function">String <span class="title">getFruitName</span><span class="params">(T t)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> t.getName();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="7-2-通配符"><a href="#7-2-通配符" class="headerlink" title="7.2 通配符"></a>7.2 通配符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Point&lt;?&gt; point;</div><div class="line"></div><div class="line">point = <span class="keyword">new</span> Point&lt;Integer&gt;(<span class="number">3</span>,<span class="number">3</span>);</div><div class="line">point = <span class="keyword">new</span> Point&lt;Float&gt;(<span class="number">4.3f</span>,<span class="number">4.3f</span>);</div><div class="line">point = <span class="keyword">new</span> Point&lt;Double&gt;(<span class="number">4.3</span>d,<span class="number">4.90</span>d);</div><div class="line">point = <span class="keyword">new</span> Point&lt;Long&gt;(<span class="number">12l</span>,<span class="number">23l</span>);</div></pre></td></tr></table></figure><p>无边界通配符<code>?</code>则只能用于填充泛型变量T，表示通配任何类型！！！！再重复一遍：？只能用于填充泛型变量T。它是用来填充T的！！！！只是填充方式的一种！！！<br>构造泛型实例时，如果省略了填充类型，则默认填充为无边界通配符！如下写法是对等的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Point point3 = <span class="keyword">new</span> Point(<span class="keyword">new</span> Integer(<span class="number">23</span>),<span class="keyword">new</span> Integer(<span class="number">23</span>));</div><div class="line">Point&lt;?&gt; point3 = <span class="keyword">new</span> Point(<span class="keyword">new</span> Integer(<span class="number">23</span>),<span class="keyword">new</span> Integer(<span class="number">23</span>));</div></pre></td></tr></table></figure></p><h5 id="7-2-1-通配符？的extends绑定"><a href="#7-2-1-通配符？的extends绑定" class="headerlink" title="7.2.1 通配符？的extends绑定"></a>7.2.1 通配符？的extends绑定</h5><p>从上面我们可以知道通配符？可以代表任意类型，但跟泛型一样，如果不加以限定，在后期的使用中编译器可能不会报错。所以我们同样，要对？加以限定。<br>同样，通配符<code>?</code>可以用extends绑定范围。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Point&lt;? extends Number&gt; point;</div></pre></td></tr></table></figure></p><p>此时，当将T填充为String和Object时，赋值给point就会报错！<br>这里虽然是指派生自Number的任意类型，但new Point<number>();也是可以成功赋值的，这说明包括边界自身。<br>再重复一遍：无边界通配符只是泛型T的填充方式，给他加上限定，只是限定了赋值给它（比如这里的point）的实例类型。<br>如果想从根本上解决乱填充Point的问题，需要从Point泛型类定义时加上<t extends="" number="">:</t></number></p><p>注意：利用&lt;? extends Number&gt;定义的变量，只可取其中的值，不可修改。<br>正因为point的类型为 Point&lt;? extends Number&gt; point，那也就是说，填充Point的泛型变量T的为&lt;? extends Number&gt;，这是一个什么类型？未知类型！！！怎么可能能用一个未知类型来设置内部值！这完全是不合理的。也就是说，它可能是Integer，也可能是Float，那么就不能往里面写数据。<br>但取值时，正由于泛型变量T被填充为&lt;? extends Number&gt;，所以编译器能确定的是T肯定是Number的子类，编译器就会用Number来填充T。</p><h5 id="7-2-2-通配符？的super绑定"><a href="#7-2-2-通配符？的super绑定" class="headerlink" title="7.2.2 通配符？的super绑定"></a>7.2.2 通配符？的super绑定</h5><p>如果说 &lt;? extends XXX&gt;指填充为派生于XXX的任意子类的话，那么&lt;? super XXX&gt;则表示填充为任意XXX的父类！<br>我们先写三个类，Employee,Manager,CEO,分别代表工人，管理者，CEO<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CEO</span> <span class="keyword">extends</span> <span class="title">Manager</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后，如果我这样生成一个变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;? <span class="keyword">super</span> Manager&gt; list;</div></pre></td></tr></table></figure></p><p>它表示的意思是将泛型T填充为&lt;? super Manager&gt;，即任意Manager的父类；也就是说任意将List<t>中的泛型变量T填充为Manager父类的List变量，都可以赋值给list。<br>new ArrayList<employee>()，new ArrayList<manager>()都是正确的，而new ArrayList<ceo>()却报错，当然是因为CEO类已经不再是Manager的父类了。所以会报编译错误。</ceo></manager></employee></t></p><p>注意：super通配符实例内容：能存不能取。<br>由于list是List&lt;? super Manager&gt;类型，那么list中可以填充Manager和Manager的子类，它们一定是&lt;? super Manager&gt;的子类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.add(<span class="keyword">new</span> Employee()); <span class="comment">//编译错误</span></div></pre></td></tr></table></figure></p><p>但是想添加Employee是不可以的，因为Employee不一定是&lt;? super Manager&gt;的子类。比如用Manager填充了T。<br>而从list中取出来的数据是Object类型的，需要强制类型转换。<br>总结 ? extends 和 the ? super 通配符的特征，我们可以得出以下结论：</p><ul><li>如果你想从一个数据类型里获取数据，使用 ? extends 通配符（能取不能存）</li><li>如果你想把对象写入一个数据结构里，使用 ? super 通配符（能存不能取）</li><li>如果你既想存，又想取，那就别用通配符。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java范型有点类似与C++中的模板类或者模板方法，对类型进行抽象。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://damon4u.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://damon4u.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>classpath与classpath*</title>
    <link href="https://damon4u.github.io//blog/2018/08/classpath%E4%B8%8Eclasspath*.html"/>
    <id>https://damon4u.github.io//blog/2018/08/classpath与classpath*.html</id>
    <published>2018-08-22T08:41:50.000Z</published>
    <updated>2018-08-23T12:47:22.586Z</updated>
    
    <content type="html"><![CDATA[<p>classpath是指WEB-INF文件夹下的classes目录。通常我们需要在Spring的容器配置文件中指定类路径下的配置文件。<br>本文介绍<code>classpath:</code> 与 <code>classpath*:</code>写法的区别。</p><a id="more"></a><p>通常我们会将jdbc.properties放到resources下，maven打包后放到classes目录中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 读取JDBC配置文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>或是将容器配置文件按功能划分，最后通过import，统一到一个总的配置文件中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:database/daoContext.xml"</span>/&gt;</span></div></pre></td></tr></table></figure></p><p>以上两种情况我们都是引入本项目resources中的文件，也就是直接在classes目录中。</p><p>有时候我们需要引用第三方jar包中的配置文件，此时，这些没有直接的出现在classes目录中，我们需要spring帮我们去所有的classpath找，这是就需要<code>classpath*:</code>了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;import resource=&quot;classpath*:delayMessageConsumerContext.xml&quot;/&gt;</div></pre></td></tr></table></figure></p><p>需要注意的是，用classpath*:需要遍历所有的classpath，所以加载速度是很慢，应该尽量避免使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;classpath是指WEB-INF文件夹下的classes目录。通常我们需要在Spring的容器配置文件中指定类路径下的配置文件。&lt;br&gt;本文介绍&lt;code&gt;classpath:&lt;/code&gt; 与 &lt;code&gt;classpath*:&lt;/code&gt;写法的区别。&lt;/p&gt;
    
    </summary>
    
      <category term="spring" scheme="https://damon4u.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://damon4u.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>maven版本控制插件</title>
    <link href="https://damon4u.github.io//blog/2018/08/maven%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%8F%92%E4%BB%B6.html"/>
    <id>https://damon4u.github.io//blog/2018/08/maven版本控制插件.html</id>
    <published>2018-08-15T08:41:50.000Z</published>
    <updated>2018-08-15T13:38:12.455Z</updated>
    
    <content type="html"><![CDATA[<p>versions-maven-plugin插件可以用来方便的管理父子模块的版本。</p><p>参考Versions Maven Plugin Doc <a href="https://www.mojohaus.org/versions-maven-plugin/usage.html" target="_blank" rel="external">Versions Maven Plugin</a></p><a id="more"></a><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h3><p>项目中经常会出现父子项目：<br>父pom<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact.parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>artifact.child1<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>artifact.child2<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div></pre></td></tr></table></figure></p><p>然后可能会有很多子module，<br>子模块1的pom<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact.parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact.child1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div></pre></td></tr></table></figure></p><p>子模块2的pom<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group.parent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact.parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact.child2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div></pre></td></tr></table></figure></p><p>当项目版本升级时，需要修改父pom和所有子pom的版本，很繁琐。</p><p>versions-maven-plugin这个插件可以帮我们完成版本控制。</p><h3 id="2-引入插件"><a href="#2-引入插件" class="headerlink" title="2.引入插件"></a>2.引入插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;plugins&gt;</div><div class="line">    &lt;plugin&gt;</div><div class="line">        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;versions-maven-plugin&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;2.3&lt;/version&gt;</div><div class="line">    &lt;/plugin&gt;</div><div class="line">&lt;/plugins&gt;</div></pre></td></tr></table></figure><h3 id="3-升级版本"><a href="#3-升级版本" class="headerlink" title="3.升级版本"></a>3.升级版本</h3><p>使用<code>versions:set</code>命令，修改项目版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn versions:set -DnewVersion=1.0.1-SNAPSHOT</div></pre></td></tr></table></figure></p><p>或者在IDEA中双击，然后在运行界面输入新版本号。<br>此时会在项目中生成多个<code>pom.xml.versionBackup</code>文件。这些文件是用来回滚的。</p><h3 id="4-提交升级"><a href="#4-提交升级" class="headerlink" title="4.提交升级"></a>4.提交升级</h3><p>如果升级版本没有问题，使用<code>versions:commit</code>命令确认，会删除生成的多个<code>pom.xml.versionBackup</code>文件。<br>注意，执行这个命令后，就不能使用下面的回滚命令回滚到最初的版本了。</p><h3 id="5-回滚版本"><a href="#5-回滚版本" class="headerlink" title="5.回滚版本"></a>5.回滚版本</h3><p>使用<code>versions:revert</code>命令，回滚到备份中的版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn versions:revert</div></pre></td></tr></table></figure></p><p>或者在IDEA中双击即可，之前生成的<code>pom.xml.versionBackup</code>文件也会被删掉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;versions-maven-plugin插件可以用来方便的管理父子模块的版本。&lt;/p&gt;
&lt;p&gt;参考Versions Maven Plugin Doc &lt;a href=&quot;https://www.mojohaus.org/versions-maven-plugin/usage.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Versions Maven Plugin&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="maven" scheme="https://damon4u.github.io/categories/maven/"/>
    
    
      <category term="maven" scheme="https://damon4u.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>事务隔离性</title>
    <link href="https://damon4u.github.io//blog/2018/08/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E6%80%A7.html"/>
    <id>https://damon4u.github.io//blog/2018/08/事务隔离性.html</id>
    <published>2018-08-14T08:41:50.000Z</published>
    <updated>2018-08-14T13:48:18.069Z</updated>
    
    <content type="html"><![CDATA[<p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><a id="more"></a><h3 id="1-四种隔离级别"><a href="#1-四种隔离级别" class="headerlink" title="1. 四种隔离级别"></a>1. 四种隔离级别</h3><p>MySQL/InnoDB提供SQL标准所描述的所有四个事务隔离级别：</p><ul><li>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据</li><li>提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)</li><li>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，<strong>InnoDB默认级别</strong>。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读</li><li>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞</li></ul><p>按照SQL:1992 事务隔离级别，InnoDB默认是可重复读的（REPEATABLE READ）。</p><h3 id="2-设置和查看mysql的隔离级别"><a href="#2-设置和查看mysql的隔离级别" class="headerlink" title="2. 设置和查看mysql的隔离级别"></a>2. 设置和查看mysql的隔离级别</h3><p>可以在命令行用–transaction-isolation选项，或在选项文件里，为所有连接设置默认隔离级别。</p><p>例如，可以在my.inf文件的[mysqld]节里类似如下设置该选项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transaction-isolation = &#123;READ-UNCOMMITTED | READ-COMMITTED | REPEATABLE-READ | SERIALIZABLE&#125;</div></pre></td></tr></table></figure></p><p>用户可以用SET TRANSACTION语句改变单个会话或者所有新进连接的隔离级别。它的语法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> [<span class="keyword">SESSION</span> | <span class="keyword">GLOBAL</span>] <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> &#123;<span class="keyword">READ</span> UNCOMMITTED | <span class="keyword">READ</span> COMMITTED | REPEATABLE <span class="keyword">READ</span> | <span class="keyword">SERIALIZABLE</span>&#125;</div></pre></td></tr></table></figure></p><p>注意：默认的行为（不带session和global）是为下一个（未开始）事务设置隔离级别。如果你使用GLOBAL关键字，语句在全局对从那点开始创建的所有新连接（除了不存在的连接）设置默认事务级别。你需要SUPER权限来做这个。使用SESSION 关键字为将来在当前连接上执行的事务设置默认事务级别。 任何客户端都能自由改变会话隔离级别（甚至在事务的中间），或者为下一个事务设置隔离级别。</p><p>可以用下列语句查询全局和会话事务隔离级别：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> @@global.tx_isolation;</div><div class="line"><span class="keyword">SELECT</span> @@session.tx_isolation;</div><div class="line"><span class="keyword">SELECT</span> @@tx_isolation;</div></pre></td></tr></table></figure></p><h3 id="3-事务隔离性相关的问题"><a href="#3-事务隔离性相关的问题" class="headerlink" title="3. 事务隔离性相关的问题"></a>3. 事务隔离性相关的问题</h3><h4 id="3-1-脏读"><a href="#3-1-脏读" class="headerlink" title="3.1 脏读"></a>3.1 脏读</h4><p>脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。<br>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。<br>session 1:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@global.tx_isolation;</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| @@global.tx_isolation |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| REPEATABLE-READ       |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">select</span> @@session.tx_isolation;</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| REPEATABLE-READ       |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into ttd values(1);</div><div class="line">Query OK, 1 row affected (0.05 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p><p>session 2:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| REPEATABLE-READ        |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">select</span> @@global.tx_isolation;</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| @@global.tx_isolation |</div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">| REPEATABLE-READ   |        <span class="comment">--------该隔离级别下(除了 read uncommitted)</span></div><div class="line">+<span class="comment">-----------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> ttd;</div><div class="line">Empty <span class="keyword">set</span> (<span class="number">0.00</span> sec)         <span class="comment">--------不会出现脏读</span></div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">set</span> <span class="keyword">session</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> uncommitted;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| READ-UNCOMMITTED       |   <span class="comment">--------该隔离级别下</span></div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |                     <span class="comment">--------出现脏读</span></div><div class="line"></div><div class="line">+<span class="comment">------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p><p>结论:session 2 在READ-UNCOMMITTED 下读取到session 1 中未提交事务修改的数据.</p><h4 id="3-2-不可重复读"><a href="#3-2-不可重复读" class="headerlink" title="3.2 不可重复读"></a>3.2 不可重复读</h4><p>是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。<br>不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。<br>session 1:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| READ-COMMITTED         |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p><p>session 2 :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| REPEATABLE-READ        |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">insert</span> <span class="keyword">into</span> ttd <span class="keyword">values</span>(<span class="number">2</span>);  <span class="comment">------也可以更新数据</span></div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |</div><div class="line">|    2 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">commit</span>;</div><div class="line">Query OK, 0 rows affected (0.02 sec)</div></pre></td></tr></table></figure></p><p>session 2 提交后,查看session 1 的结果;</p><p>session 1:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |                          <span class="comment">--------和第一次的结果不一样,READ-COMMITTED 级别出现了不重复读</span></div><div class="line">|    2 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p><h4 id="3-3-可重复读"><a href="#3-3-可重复读" class="headerlink" title="3.3 可重复读"></a>3.3 可重复读</h4><p>session 1:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| REPEATABLE-READ        |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |</div><div class="line">|    2 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div></pre></td></tr></table></figure></p><p>session 2 :<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select @@session.tx_isolation;</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| @@session.tx_isolation |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">| REPEATABLE-READ        |</div><div class="line">+<span class="comment">------------------------+</span></div><div class="line">row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">mysql&gt; <span class="keyword">start</span> <span class="keyword">transaction</span>;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; insert into ttd values(3);</div><div class="line">Query OK, 1 row affected (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; commit;</div><div class="line">Query OK, 0 rows affected (0.03 sec)</div></pre></td></tr></table></figure></p><p>session 2 提交后,查看session 1 的结果;</p><p>session 1:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from ttd;</div><div class="line">+<span class="comment">------+</span></div><div class="line">| id   |</div><div class="line">+<span class="comment">------+</span></div><div class="line">|    1 |    <span class="comment">--------和第一次的结果一样,REPEATABLE-READ级别没出现重复读</span></div><div class="line">|    2 |</div><div class="line">+<span class="comment">------+</span></div><div class="line">rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</div><div class="line"></div><div class="line">(<span class="keyword">commit</span> <span class="keyword">session</span> <span class="number">1</span> 之后 再<span class="keyword">select</span> * <span class="keyword">from</span> ttd 可以看到<span class="keyword">session</span> <span class="number">2</span> 插入的数据<span class="number">3</span>)</div></pre></td></tr></table></figure></p><h4 id="3-4-幻读"><a href="#3-4-幻读" class="headerlink" title="3.4 幻读"></a>3.4 幻读</h4><p>第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mysql&gt;CREATE TABLE `t_bitfly` (</div><div class="line">`id` bigint(20) NOT NULL default '0',</div><div class="line">`value` varchar(32) default NULL,</div><div class="line">PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB</div><div class="line"></div><div class="line">mysql&gt; select @@global.tx_isolation, @@tx_isolation;</div><div class="line">+<span class="comment">-----------------------+-----------------+</span></div><div class="line">| @@global.tx_isolation | @@tx_isolation  |</div><div class="line">+<span class="comment">-----------------------+-----------------+</span></div><div class="line">| REPEATABLE-READ       | REPEATABLE-READ |</div><div class="line">+<span class="comment">-----------------------+-----------------+</span></div></pre></td></tr></table></figure><p>实验一：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">t Session A                   Session B</div><div class="line">|</div><div class="line">| <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;          <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| empty <span class="keyword">set</span></div><div class="line">|                             <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_bitfly</div><div class="line">|                             <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'a'</span>);</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| empty <span class="keyword">set</span></div><div class="line">|                             <span class="keyword">COMMIT</span>;</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| empty <span class="keyword">set</span></div><div class="line">|</div><div class="line">| <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_bitfly <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'a'</span>);</div><div class="line">| ERROR 1062 (23000):</div><div class="line">| Duplicate entry '1' for key 1</div><div class="line">v (shit, 刚刚明明告诉我没有这条记录的)</div></pre></td></tr></table></figure></p><p>如此就出现了幻读，以为表里没有数据，其实数据已经存在了，傻乎乎的提交后，才发现数据冲突了。</p><p>实验二：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">t Session A                  Session B</div><div class="line">|</div><div class="line">| <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;         <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| | id   | value |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| |    1 | a     |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">|                            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_bitfly</div><div class="line">|                            <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'b'</span>);</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| | id   | value |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| |    1 | a     |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">|                            <span class="keyword">COMMIT</span>;</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| | id   | value |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| |    1 | a     |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">|</div><div class="line">| <span class="keyword">UPDATE</span> t_bitfly <span class="keyword">SET</span> <span class="keyword">value</span>=<span class="string">'z'</span>;</div><div class="line">| Rows matched: 2  Changed: 2  Warnings: 0</div><div class="line">| (怎么多出来一行)</div><div class="line">|</div><div class="line">| <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_bitfly;</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| | id   | value |</div><div class="line">| +<span class="comment">------+-------+</span></div><div class="line">| |    1 | z     |</div><div class="line">| |    2 | z     |</div><div class="line">| +<span class="comment">------+-------+</span></div></pre></td></tr></table></figure></p><p>本事务中第一次读取出一行，做了一次更新后，另一个事务里提交的数据就出现了。也可以看做是一种幻读。<br><strong>当隔离级别是可重复读，且禁用innodb_locks_unsafe_for_binlog的情况下，在搜索和扫描index的时候使用的next-key locks可以避免幻读。</strong></p><h3 id="4-生产环境遇到的问题"><a href="#4-生产环境遇到的问题" class="headerlink" title="4. 生产环境遇到的问题"></a>4. 生产环境遇到的问题</h3><h4 id="4-1-事务未提交导致数据读取失败"><a href="#4-1-事务未提交导致数据读取失败" class="headerlink" title="4.1 事务未提交导致数据读取失败"></a>4.1 事务未提交导致数据读取失败</h4><p>背景：项目做了读写分离，事务标注的方法会使用主库进行写操作。项目中将缓存管理抽离出来，例如UserManager，其中使用单独的读库配置来加载数据到缓存。<br>在用户注册逻辑中，最外层有事务注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">  <span class="comment">// 1. 保存到数据库中</span></div><div class="line">  userDao.save(userName);</div><div class="line">  <span class="comment">// 2. 预热缓存，并从缓存中读取数据，这里读取到的user未空</span></div><div class="line">  User user = userManager.get(userName);</div><div class="line">  <span class="comment">// 3. 使用user，报错NPE</span></div><div class="line">  user.getUserName();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>方法使用事务注解，将使用主库进行数据写操作。当事务还没有被提交时，userManager尝试读取从库中的数据到缓存，是读取不到的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。&lt;/p&gt;
&lt;p&gt;即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="https://damon4u.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://damon4u.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>貂蝉</title>
    <link href="https://damon4u.github.io//blog/2018/08/%E8%B2%82%E8%9D%89.html"/>
    <id>https://damon4u.github.io//blog/2018/08/貂蝉.html</id>
    <published>2018-08-10T09:41:50.000Z</published>
    <updated>2018-08-10T09:20:38.151Z</updated>
    
    <content type="html"><![CDATA[<p>貂蝉。</p><p><code>今夜我就是你的圣诞礼物，喜欢吗</code></p><p><img src="/images/wzry8.gif" alt=""></p><a id="more"></a><p>1、今夜我就是你的圣诞礼物，喜欢吗</p><p>2、圣诞快乐</p><p>3、平安夜，想要和你一起度过</p><p>4、叮叮当，叮叮当，铃儿响叮当</p><p>5、子龙哥哥，纵使天各一方，小蝉依然～～</p><p>6、糖果和我，谁更甜蜜?</p><p>7、有你的陪伴，一点都不冷哦~</p><p>8、去吧，怒放吧，花开咯</p><p>9、又欺负人呀</p><p>10、来打雪仗吧</p><p>11、平安夜的邂逅，可怜的家伙，果然一生孤独</p><p>翻盘<br><img src="/images/wzry9.gif" alt=""></p><p>双排<br><img src="/images/wzry10.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;貂蝉。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;今夜我就是你的圣诞礼物，喜欢吗&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wzry8.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
  </entry>
  
  <entry>
    <title>阿轲</title>
    <link href="https://damon4u.github.io//blog/2018/08/%E9%98%BF%E8%BD%B2.html"/>
    <id>https://damon4u.github.io//blog/2018/08/阿轲.html</id>
    <published>2018-08-10T08:41:50.000Z</published>
    <updated>2018-08-14T15:54:09.541Z</updated>
    
    <content type="html"><![CDATA[<p>阿轲。</p><p><code>致命芳华</code></p><p><img src="/images/wzry3.jpeg" alt=""></p><a id="more"></a><p>1、不是你记忆中的荆轲，但致命的程度，没两样</p><p>2、我，是你惹不起的</p><p>3、非死不可</p><p>4、不知道你的名字，但清楚你的死期</p><p>5、你已经死了</p><p>6、没我快</p><p>7、只相信本能</p><p>8、想叫就叫吧，反正是最后一声了</p><p>第一次五杀<br><img src="/images/wzry6.gif" alt=""></p><p>开黑时带躺<br><img src="/images/wzry7.gif" alt=""></p><p>第一次大神推荐<br><img src="/images/wzry4.png" alt=""></p><p>第一次单排上王者<br><img src="/images/wzry5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阿轲。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;致命芳华&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wzry3.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
  </entry>
  
  <entry>
    <title>元歌</title>
    <link href="https://damon4u.github.io//blog/2018/08/%E5%85%83%E6%AD%8C.html"/>
    <id>https://damon4u.github.io//blog/2018/08/元歌.html</id>
    <published>2018-08-10T03:41:50.000Z</published>
    <updated>2018-08-15T01:39:24.274Z</updated>
    
    <content type="html"><![CDATA[<p>元歌。</p><p><code>1433223</code></p><p><img src="/images/wzry2.gif" alt=""></p><a id="more"></a><p>1、幸福令人畏惧，更钟情绝望的美学</p><p>2、为战斗加点品味，加点恶作剧，嗯——会很有趣！</p><p>3、无间道的游戏，可以很有趣的哦——</p><p>4、人生如戏——全靠演技——</p><p>5、追随！阿亮的追随——</p><p>6、法则和禁忌存在的意义不就是被打破吗？</p><p>7、美是致命的愉悦！</p><p>8、命运这种事，无法拒绝呀——</p><p>9、随指尖而舞</p><p>10、据说文案已想不出更美妙的语言，来赞美我的杰作和你的死亡。</p><p>11、好像听到了阿亮的呼唤，嗯，哼哼哼……嗯嘻，背负起这罪孽与你同行！</p><p>12、操纵木偶和操纵心灵是同样的艺术</p><p>13、得偿所愿——</p><p>14、喧哗与骚动</p><p>15、哼，本就没什么永恒，又何必在乎后悔</p><p>16、生得渺小，死得精彩</p><p>17、我生命的提线，掌握在你手中</p><p>18、生命绽放于战场，璀璨，却仅限于你的眼中</p><p>19、栩栩如生的死亡</p><p>20、嘻，抛弃一切，站在你身边</p><p>21、去吧，哈哈哈……</p><p>22、做个安静的美男子</p><p>23、无欲无求，笑口常开</p><p>24、哪一个才是真正的我，我自己也不太明白</p><p><img src="/images/wzry1.gif" alt=""></p><p><img src="/images/wzry11.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;元歌。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1433223&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/wzry2.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/categories/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
    
      <category term="王者荣耀" scheme="https://damon4u.github.io/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
  </entry>
  
  <entry>
    <title>maven依赖传递性</title>
    <link href="https://damon4u.github.io//blog/2018/08/maven%E4%BE%9D%E8%B5%96%E4%BC%A0%E9%80%92%E6%80%A7.html"/>
    <id>https://damon4u.github.io//blog/2018/08/maven依赖传递性.html</id>
    <published>2018-08-08T09:41:50.000Z</published>
    <updated>2018-08-14T13:48:18.069Z</updated>
    
    <content type="html"><![CDATA[<p>参考Maven Doc <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" target="_blank" rel="external">Introduction to the Dependency Mechanism</a></p><a id="more"></a><h3 id="1-Transitive-Dependencies（依赖传递性）"><a href="#1-Transitive-Dependencies（依赖传递性）" class="headerlink" title="1.Transitive Dependencies（依赖传递性）"></a>1.Transitive Dependencies（依赖传递性）</h3><p>依赖传递这种特性可以帮助我们自动引入依赖包所需要的类，递归的。</p><ul><li>依赖机制：当项目中的依赖有多个版本（间接依赖）时，maven会使用“最短引用原则”决定最终使用哪个版本。如果引用树深度一样，那么会使用先声明的那个。</li><li>dependencyManagement：直接管理项目中依赖的版本，直接依赖或者间接依赖。</li><li>scope：这个字段允许指定依赖的作用范围。</li><li>exclusions：如果项目x依赖项目y，项目y依赖项目z，那么项目x的拥有者可以显示的排除项目z。</li><li>optional：如果项目y依赖项目z，项目y可以将对z的引用标识为optional，这样，当项目x引用项目y时，项目x就不会引入项目z。<strong>可以将optional理解为默认excluded。</strong></li></ul><h3 id="2-Dependency-Scope（依赖作用域）"><a href="#2-Dependency-Scope（依赖作用域）" class="headerlink" title="2.Dependency Scope（依赖作用域）"></a>2.Dependency Scope（依赖作用域）</h3><p>首先说一下classpath分类：</p><ul><li>compile classpath</li><li>test classpath</li><li>runtime classpath</li></ul><h4 id="2-1-complie"><a href="#2-1-complie" class="headerlink" title="2.1 complie"></a>2.1 complie</h4><p>默认就是compile。compile表示被依赖项目需要参与当前项目的编译，当然后续的测试，运行周期也参与其中，是一个比较强的依赖。打包的时候通常需要包含进去。</p><h4 id="2-2-provided"><a href="#2-2-provided" class="headerlink" title="2.2 provided"></a>2.2 provided</h4><p>provided意味着打包的时候可以不用包进去，别的设施(Web Container)会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。相当于compile，但是在打包阶段做了exclude的动作。<br>例如servlet，tomcat等web容易会提供。还有lombok，它在运行期不需要。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servletapi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="2-3-runtime"><a href="#2-3-runtime" class="headerlink" title="2.3 runtime"></a>2.3 runtime</h4><p>runtime表示被依赖项目无需参与项目的编译，不过后期的测试和运行周期需要其参与。<br>例如slf4j，运行期依赖。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="2-4-test"><a href="#2-4-test" class="headerlink" title="2.4 test"></a>2.4 test</h4><p>scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。<br>比较典型的如junit。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="2-5-system"><a href="#2-5-system" class="headerlink" title="2.5 system"></a>2.5 system</h4><p>从参与度来说，也provided相同，不过被依赖项不会从maven仓库抓，而是从本地文件系统拿，一定需要配合<code>systemPath</code>属性使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考Maven Doc &lt;a href=&quot;https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introduction to the Dependency Mechanism&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="maven" scheme="https://damon4u.github.io/categories/maven/"/>
    
    
      <category term="maven" scheme="https://damon4u.github.io/tags/maven/"/>
    
  </entry>
  
</feed>
